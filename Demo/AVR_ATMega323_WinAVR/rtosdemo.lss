
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00002b64  00002bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000685  0080015a  0080015a  00002c52  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000947  00000000  00000000  00002e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003775  00000000  00000000  00003759  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fe7  00000000  00000000  00006ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000368e  00000000  00000000  00007eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000740  00000000  00000000  0000b544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001710  00000000  00000000  0000bc84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021b7  00000000  00000000  0000d394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000f54b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_18>
      4c:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e6       	ldi	r30, 0x64	; 100
      7c:	fb e2       	ldi	r31, 0x2B	; 43
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 35       	cpi	r26, 0x5A	; 90
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	17 e0       	ldi	r17, 0x07	; 7
      8c:	aa e5       	ldi	r26, 0x5A	; 90
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3d       	cpi	r26, 0xDF	; 223
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 56 00 	call	0xac	; 0xac <main>
      9e:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
	vCoRoutineSchedule();
      a6:	0e 94 65 0f 	call	0x1eca	; 0x1eca <vCoRoutineSchedule>
}
      aa:	08 95       	ret

000000ac <main>:
	print("Hello World\r\n",strlen("Hello World\r\n"));
  }

}
short main( void )
{
      ac:	ef 92       	push	r14
      ae:	ff 92       	push	r15
      b0:	0f 93       	push	r16
      b2:	df 93       	push	r29
      b4:	cf 93       	push	r28
      b6:	0f 92       	push	r0
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62

static void prvIncrementResetCount( void )
{
unsigned char ucCount;

	eeprom_read_block( &ucCount, mainRESET_COUNT_ADDRESS, sizeof( ucCount ) );
      bc:	ce 01       	movw	r24, r28
      be:	01 96       	adiw	r24, 0x01	; 1
      c0:	60 e5       	ldi	r22, 0x50	; 80
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	41 e0       	ldi	r20, 0x01	; 1
      c6:	50 e0       	ldi	r21, 0x00	; 0
      c8:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__eerd_block_m328p>
	ucCount++;
      cc:	69 81       	ldd	r22, Y+1	; 0x01
      ce:	6f 5f       	subi	r22, 0xFF	; 255
      d0:	69 83       	std	Y+1, r22	; 0x01
	eeprom_write_byte( mainRESET_COUNT_ADDRESS, ucCount );
      d2:	80 e5       	ldi	r24, 0x50	; 80
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__eewr_byte_m328p>
short main( void )
{
	prvIncrementResetCount();

	/* Setup the LED's for output. */
	vParTestInitialise();
      da:	0e 94 bc 00 	call	0x178	; 0x178 <vParTestInitialise>
	
	xSerialPortInitMinimal( mainCOM_TEST_BAUD_RATE, 100 );
      de:	60 e8       	ldi	r22, 0x80	; 128
      e0:	75 e2       	ldi	r23, 0x25	; 37
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	44 e6       	ldi	r20, 0x64	; 100
      e8:	0e 94 c4 01 	call	0x388	; 0x388 <xSerialPortInitMinimal>


	xTaskCreate( TaskPrint, "Print", configMINIMAL_STACK_SIZE, NULL, mainCOM_TEST_PRIORITY, NULL );
      ec:	81 eb       	ldi	r24, 0xB1	; 177
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	71 e0       	ldi	r23, 0x01	; 1
      f4:	45 e5       	ldi	r20, 0x55	; 85
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	02 e0       	ldi	r16, 0x02	; 2
      fe:	ee 24       	eor	r14, r14
     100:	ff 24       	eor	r15, r15
     102:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
	
	
	/* Create the co-routines that flash the LED's. */
	vStartFlashCoRoutines( mainNUM_FLASH_COROUTINES ); 
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	0e 94 7d 12 	call	0x24fa	; 0x24fa <vStartFlashCoRoutines>

	/* In this port, to use preemptive scheduler define configUSE_PREEMPTION
	as 1 in portmacro.h.  To use the cooperative scheduler define
	configUSE_PREEMPTION as 0. */
	vTaskStartScheduler();
     10c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <vTaskStartScheduler>

	return 0;
}
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0f 90       	pop	r0
     116:	cf 91       	pop	r28
     118:	df 91       	pop	r29
     11a:	0f 91       	pop	r16
     11c:	ff 90       	pop	r15
     11e:	ef 90       	pop	r14
     120:	08 95       	ret

00000122 <print>:

/*-----------------------------------------------------------*/

void print(char *str,uint16_t len);
void print(char *str,uint16_t len)
{
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	7c 01       	movw	r14, r24
     130:	8b 01       	movw	r16, r22
     132:	c0 e0       	ldi	r28, 0x00	; 0
     134:	d0 e0       	ldi	r29, 0x00	; 0
     136:	0b c0       	rjmp	.+22     	; 0x14e <print+0x2c>
	uint16_t i;
	for(i=0;i<len;i++)
		xSerialPutChar( 0, str[i], 0 );
     138:	f7 01       	movw	r30, r14
     13a:	ec 0f       	add	r30, r28
     13c:	fd 1f       	adc	r31, r29
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	60 81       	ld	r22, Z
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	50 e0       	ldi	r21, 0x00	; 0
     148:	0e 94 9c 01 	call	0x338	; 0x338 <xSerialPutChar>

void print(char *str,uint16_t len);
void print(char *str,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
     14c:	21 96       	adiw	r28, 0x01	; 1
     14e:	c0 17       	cp	r28, r16
     150:	d1 07       	cpc	r29, r17
     152:	90 f3       	brcs	.-28     	; 0x138 <print+0x16>
		xSerialPutChar( 0, str[i], 0 );
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	ff 90       	pop	r15
     15e:	ef 90       	pop	r14
     160:	08 95       	ret

00000162 <TaskPrint>:
{
  (void) pvParameters;

  for(;;)
  {
	vTaskDelay(500);              // wait for a second
     162:	84 ef       	ldi	r24, 0xF4	; 244
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 7d 08 	call	0x10fa	; 0x10fa <vTaskDelay>
	print("Hello World\r\n",strlen("Hello World\r\n"));
     16a:	86 e0       	ldi	r24, 0x06	; 6
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	6d e0       	ldi	r22, 0x0D	; 13
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	0e 94 91 00 	call	0x122	; 0x122 <print>
     176:	f5 cf       	rjmp	.-22     	; 0x162 <TaskPrint>

00000178 <vParTestInitialise>:

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
	ucCurrentOutputValue = partstALL_OUTPUTS_OFF;
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	80 93 14 01 	sts	0x0114, r24

	/* Set port B direction to outputs.  Start with all output off. */
	DDRB = partstALL_BITS_OUTPUT;
     17e:	84 b9       	out	0x04, r24	; 4
	PORTB = ucCurrentOutputValue;
     180:	80 91 14 01 	lds	r24, 0x0114
     184:	85 b9       	out	0x05, r24	; 5
}
     186:	08 95       	ret

00000188 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
     188:	1f 93       	push	r17
     18a:	28 2f       	mov	r18, r24
unsigned char ucBit;

	if( uxLED <= partstMAX_OUTPUT_LED )
     18c:	88 30       	cpi	r24, 0x08	; 8
     18e:	e8 f4       	brcc	.+58     	; 0x1ca <vParTestToggleLED+0x42>
	{
		ucBit = ( ( unsigned char ) 1 ) << uxLED;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 c0       	rjmp	.+4      	; 0x19a <vParTestToggleLED+0x12>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	2a 95       	dec	r18
     19c:	e2 f7       	brpl	.-8      	; 0x196 <vParTestToggleLED+0xe>
     19e:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     1a0:	0e 94 76 03 	call	0x6ec	; 0x6ec <vTaskSuspendAll>
		{
			if( ucCurrentOutputValue & ucBit )
     1a4:	80 91 14 01 	lds	r24, 0x0114
     1a8:	81 23       	and	r24, r17
     1aa:	29 f0       	breq	.+10     	; 0x1b6 <vParTestToggleLED+0x2e>
			{
				ucCurrentOutputValue &= ~ucBit;
     1ac:	80 91 14 01 	lds	r24, 0x0114
     1b0:	10 95       	com	r17
     1b2:	18 23       	and	r17, r24
     1b4:	03 c0       	rjmp	.+6      	; 0x1bc <vParTestToggleLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     1b6:	80 91 14 01 	lds	r24, 0x0114
     1ba:	18 2b       	or	r17, r24
     1bc:	10 93 14 01 	sts	0x0114, r17
			}

			PORTB = ucCurrentOutputValue;
     1c0:	80 91 14 01 	lds	r24, 0x0114
     1c4:	85 b9       	out	0x05, r24	; 5
		}
		xTaskResumeAll();			
     1c6:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
	}
}
     1ca:	1f 91       	pop	r17
     1cc:	08 95       	ret

000001ce <vParTestSetLED>:
	PORTB = ucCurrentOutputValue;
}
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	28 2f       	mov	r18, r24
     1d4:	06 2f       	mov	r16, r22
unsigned char ucBit = ( unsigned char ) 1;

	if( uxLED <= partstMAX_OUTPUT_LED )
     1d6:	88 30       	cpi	r24, 0x08	; 8
     1d8:	d8 f4       	brcc	.+54     	; 0x210 <vParTestSetLED+0x42>
	{
		ucBit <<= uxLED;	
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <vParTestSetLED+0x16>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	2a 95       	dec	r18
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <vParTestSetLED+0x12>
     1e8:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     1ea:	0e 94 76 03 	call	0x6ec	; 0x6ec <vTaskSuspendAll>
		{
			if( xValue == pdTRUE )
     1ee:	01 30       	cpi	r16, 0x01	; 1
     1f0:	29 f4       	brne	.+10     	; 0x1fc <vParTestSetLED+0x2e>
			{
				ucBit ^= ( unsigned char ) 0xff;
				ucCurrentOutputValue &= ucBit;
     1f2:	80 91 14 01 	lds	r24, 0x0114
     1f6:	10 95       	com	r17
     1f8:	18 23       	and	r17, r24
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <vParTestSetLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     1fc:	80 91 14 01 	lds	r24, 0x0114
     200:	18 2b       	or	r17, r24
     202:	10 93 14 01 	sts	0x0114, r17
			}

			PORTB = ucCurrentOutputValue;
     206:	80 91 14 01 	lds	r24, 0x0114
     20a:	85 b9       	out	0x05, r24	; 5
		}
		xTaskResumeAll();
     20c:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
	}
}
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	08 95       	ret

00000216 <vSerialClose>:
	( void ) xPort;

	/* Turn off the interrupts.  We may also want to delete the queues and/or
	re-install the original ISR. */

	portENTER_CRITICAL();
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	0f 92       	push	r0
	{
		vInterruptOff();
     21c:	e1 ec       	ldi	r30, 0xC1	; 193
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8f 7d       	andi	r24, 0xDF	; 223
     224:	80 83       	st	Z, r24
		ucByte = UCSR0B;
     226:	80 81       	ld	r24, Z
		ucByte &= ~serRX_INT_ENABLE;
     228:	8f 77       	andi	r24, 0x7F	; 127
		UCSR0B = ucByte;
     22a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
     22c:	0f 90       	pop	r0
     22e:	0f be       	out	0x3f, r0	; 63
}
     230:	08 95       	ret

00000232 <__vector_19>:
	}
}
/*-----------------------------------------------------------*/

SIGNAL( USART_UDRE_vect )
{
     232:	1f 92       	push	r1
     234:	0f 92       	push	r0
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	0f 92       	push	r0
     23a:	11 24       	eor	r1, r1
     23c:	2f 93       	push	r18
     23e:	3f 93       	push	r19
     240:	4f 93       	push	r20
     242:	5f 93       	push	r21
     244:	6f 93       	push	r22
     246:	7f 93       	push	r23
     248:	8f 93       	push	r24
     24a:	9f 93       	push	r25
     24c:	af 93       	push	r26
     24e:	bf 93       	push	r27
     250:	ef 93       	push	r30
     252:	ff 93       	push	r31
     254:	df 93       	push	r29
     256:	cf 93       	push	r28
     258:	00 d0       	rcall	.+0      	; 0x25a <__vector_19+0x28>
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
signed char cChar, cTaskWoken;

	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &cTaskWoken ) == pdTRUE )
     25e:	80 91 5c 01 	lds	r24, 0x015C
     262:	90 91 5d 01 	lds	r25, 0x015D
     266:	be 01       	movw	r22, r28
     268:	6f 5f       	subi	r22, 0xFF	; 255
     26a:	7f 4f       	sbci	r23, 0xFF	; 255
     26c:	ae 01       	movw	r20, r28
     26e:	4e 5f       	subi	r20, 0xFE	; 254
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	0e 94 1d 0c 	call	0x183a	; 0x183a <xQueueReceiveFromISR>
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	21 f4       	brne	.+8      	; 0x282 <__vector_19+0x50>
	{
		/* Send the next character queued for Tx. */
		UDR0 = cChar;
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	80 93 c6 00 	sts	0x00C6, r24
     280:	05 c0       	rjmp	.+10     	; 0x28c <__vector_19+0x5a>
	}
	else
	{
		/* Queue empty, nothing to send. */
		vInterruptOff();
     282:	80 91 c1 00 	lds	r24, 0x00C1
     286:	8f 7d       	andi	r24, 0xDF	; 223
     288:	80 93 c1 00 	sts	0x00C1, r24
	}
}
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	cf 91       	pop	r28
     292:	df 91       	pop	r29
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	bf 91       	pop	r27
     29a:	af 91       	pop	r26
     29c:	9f 91       	pop	r25
     29e:	8f 91       	pop	r24
     2a0:	7f 91       	pop	r23
     2a2:	6f 91       	pop	r22
     2a4:	5f 91       	pop	r21
     2a6:	4f 91       	pop	r20
     2a8:	3f 91       	pop	r19
     2aa:	2f 91       	pop	r18
     2ac:	0f 90       	pop	r0
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	0f 90       	pop	r0
     2b2:	1f 90       	pop	r1
     2b4:	18 95       	reti

000002b6 <__vector_18>:
	portEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

SIGNAL( USART_RX_vect )
{
     2b6:	1f 92       	push	r1
     2b8:	0f 92       	push	r0
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	0f 92       	push	r0
     2be:	11 24       	eor	r1, r1
     2c0:	2f 93       	push	r18
     2c2:	3f 93       	push	r19
     2c4:	4f 93       	push	r20
     2c6:	5f 93       	push	r21
     2c8:	6f 93       	push	r22
     2ca:	7f 93       	push	r23
     2cc:	8f 93       	push	r24
     2ce:	9f 93       	push	r25
     2d0:	af 93       	push	r26
     2d2:	bf 93       	push	r27
     2d4:	ef 93       	push	r30
     2d6:	ff 93       	push	r31
     2d8:	df 93       	push	r29
     2da:	cf 93       	push	r28
     2dc:	00 d0       	rcall	.+0      	; 0x2de <__vector_18+0x28>
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
signed char cChar;
signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
     2e2:	1a 82       	std	Y+2, r1	; 0x02

	/* Get the character and post it on the queue of Rxed characters.
	If the post causes a task to wake force a context switch as the woken task
	may have a higher priority than the task we have interrupted. */
	cChar = UDR0;
     2e4:	80 91 c6 00 	lds	r24, 0x00C6
     2e8:	89 83       	std	Y+1, r24	; 0x01

	xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
     2ea:	80 91 5a 01 	lds	r24, 0x015A
     2ee:	90 91 5b 01 	lds	r25, 0x015B
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	ae 01       	movw	r20, r28
     2fa:	4e 5f       	subi	r20, 0xFE	; 254
     2fc:	5f 4f       	sbci	r21, 0xFF	; 255
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <xQueueGenericSendFromISR>

	if( xHigherPriorityTaskWoken != pdFALSE )
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	88 23       	and	r24, r24
     308:	11 f0       	breq	.+4      	; 0x30e <__vector_18+0x58>
	{
		taskYIELD();
     30a:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
	}
}
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	cf 91       	pop	r28
     314:	df 91       	pop	r29
     316:	ff 91       	pop	r31
     318:	ef 91       	pop	r30
     31a:	bf 91       	pop	r27
     31c:	af 91       	pop	r26
     31e:	9f 91       	pop	r25
     320:	8f 91       	pop	r24
     322:	7f 91       	pop	r23
     324:	6f 91       	pop	r22
     326:	5f 91       	pop	r21
     328:	4f 91       	pop	r20
     32a:	3f 91       	pop	r19
     32c:	2f 91       	pop	r18
     32e:	0f 90       	pop	r0
     330:	0f be       	out	0x3f, r0	; 63
     332:	0f 90       	pop	r0
     334:	1f 90       	pop	r1
     336:	18 95       	reti

00000338 <xSerialPutChar>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )
{
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	0f 92       	push	r0
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	69 83       	std	Y+1, r22	; 0x01
	/* Only one port is supported. */
	( void ) pxPort;

	/* Return false if after the block time there is no room on the Tx queue. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) != pdPASS )
     344:	80 91 5c 01 	lds	r24, 0x015C
     348:	90 91 5d 01 	lds	r25, 0x015D
     34c:	be 01       	movw	r22, r28
     34e:	6f 5f       	subi	r22, 0xFF	; 255
     350:	7f 4f       	sbci	r23, 0xFF	; 255
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <xQueueGenericSend>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	11 f0       	breq	.+4      	; 0x360 <xSerialPutChar+0x28>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	06 c0       	rjmp	.+12     	; 0x36c <xSerialPutChar+0x34>
	{
		return pdFAIL;
	}

	vInterruptOn();
     360:	80 91 c1 00 	lds	r24, 0x00C1
     364:	80 62       	ori	r24, 0x20	; 32
     366:	80 93 c1 00 	sts	0x00C1, r24
     36a:	81 e0       	ldi	r24, 0x01	; 1

	return pdPASS;
}
     36c:	0f 90       	pop	r0
     36e:	cf 91       	pop	r28
     370:	df 91       	pop	r29
     372:	08 95       	ret

00000374 <xSerialGetChar>:
	/* Only one port is supported. */
	( void ) pxPort;

	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
     374:	80 91 5a 01 	lds	r24, 0x015A
     378:	90 91 5b 01 	lds	r25, 0x015B
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	0e 94 df 0c 	call	0x19be	; 0x19be <xQueueGenericReceive>
     382:	81 11       	cpse	r24, r1
     384:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return pdFALSE;
	}
}
     386:	08 95       	ret

00000388 <xSerialPortInitMinimal>:
	UCSR0B = ucInByte;										\
}
/*-----------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	7b 01       	movw	r14, r22
     394:	8c 01       	movw	r16, r24
     396:	d4 2e       	mov	r13, r20
unsigned long ulBaudRateCounter;
unsigned char ucByte;

	portENTER_CRITICAL();
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	0f 92       	push	r0
	{
		/* Create the queues used by the com test task. */
		xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     39e:	84 2f       	mov	r24, r20
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <xQueueGenericCreate>
     3a8:	90 93 5b 01 	sts	0x015B, r25
     3ac:	80 93 5a 01 	sts	0x015A, r24
		xCharsForTx = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     3b0:	8d 2d       	mov	r24, r13
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <xQueueGenericCreate>
     3ba:	90 93 5d 01 	sts	0x015D, r25
     3be:	80 93 5c 01 	sts	0x015C, r24

		/* Calculate the baud rate register value from the equation in the
		data sheet. */
		ulBaudRateCounter = ( configCPU_CLOCK_HZ / ( serBAUD_DIV_CONSTANT * ulWantedBaud ) ) - ( unsigned long ) 1;
     3c2:	94 e0       	ldi	r25, 0x04	; 4
     3c4:	ee 0c       	add	r14, r14
     3c6:	ff 1c       	adc	r15, r15
     3c8:	00 1f       	adc	r16, r16
     3ca:	11 1f       	adc	r17, r17
     3cc:	9a 95       	dec	r25
     3ce:	d1 f7       	brne	.-12     	; 0x3c4 <xSerialPortInitMinimal+0x3c>
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	72 e1       	ldi	r23, 0x12	; 18
     3d4:	8a e7       	ldi	r24, 0x7A	; 122
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	a8 01       	movw	r20, r16
     3da:	97 01       	movw	r18, r14
     3dc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodsi4>
     3e0:	21 50       	subi	r18, 0x01	; 1
     3e2:	30 40       	sbci	r19, 0x00	; 0
     3e4:	40 40       	sbci	r20, 0x00	; 0
     3e6:	50 40       	sbci	r21, 0x00	; 0

		/* Set the baud rate. */	
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
		UBRR0L = ucByte;
     3e8:	20 93 c4 00 	sts	0x00C4, r18

		ulBaudRateCounter >>= ( unsigned long ) 8;
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
     3ec:	23 2f       	mov	r18, r19
     3ee:	34 2f       	mov	r19, r20
     3f0:	45 2f       	mov	r20, r21
     3f2:	55 27       	eor	r21, r21
		UBRR0H = ucByte;	
     3f4:	20 93 c5 00 	sts	0x00C5, r18

		/* Enable the Rx interrupt.  The Tx interrupt will get enabled
		later. Also enable the Rx and Tx. */
		UCSR0B = ( serRX_INT_ENABLE | serRX_ENABLE | serTX_ENABLE );
     3f8:	88 e9       	ldi	r24, 0x98	; 152
     3fa:	80 93 c1 00 	sts	0x00C1, r24

		/* Set the data bits to 8. */
		UCSR0C = ( serEIGHT_DATA_BITS );
     3fe:	86 e0       	ldi	r24, 0x06	; 6
     400:	80 93 c2 00 	sts	0x00C2, r24
		
		
	}
	portEXIT_CRITICAL();
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
	
	/* Unlike other ports, this serial code does not allow for more than one
	com port.  We therefore don't return a pointer to a port structure and can
	instead just return NULL. */
	return NULL;
}
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	df 90       	pop	r13
     416:	08 95       	ret

00000418 <xAreRegTestTasksStillRunning>:
	xTaskCreate( prvRegisterCheck2, "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

portBASE_TYPE xAreRegTestTasksStillRunning( void )
{
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	80 91 5e 01 	lds	r24, 0x015E
     41e:	88 23       	and	r24, r24
     420:	09 f4       	brne	.+2      	; 0x424 <xAreRegTestTasksStillRunning+0xc>
     422:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     424:	89 2f       	mov	r24, r25
     426:	08 95       	ret

00000428 <prvRegisterCheck1>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	5"		);
     428:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r0,		r31"	);
     42a:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	6"		);
     42c:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r1,		r31"	);
     42e:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	7"		);
     430:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r2,		r31"	);
     432:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	8"		);
     434:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r3,		r31"	);
     436:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	9"		);
     438:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r4,		r31"	);
     43a:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	10"		);
     43c:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r5,		r31"	);
     43e:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	11"		);
     440:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r6,		r31"	);
     442:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	12"		);
     444:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r7,		r31"	);
     446:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	13"		);
     448:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r8,		r31"	);
     44a:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	14"		);
     44c:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r9,		r31"	);
     44e:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	15"		);
     450:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r10,	r31"	);
     452:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	16"		);
     454:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r11,	r31"	);
     456:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	17"		);
     458:	f1 e1       	ldi	r31, 0x11	; 17
		asm( 	"MOV	r12,	r31"	);
     45a:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	18"		);
     45c:	f2 e1       	ldi	r31, 0x12	; 18
		asm( 	"MOV	r13,	r31"	);
     45e:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	19"		);
     460:	f3 e1       	ldi	r31, 0x13	; 19
		asm( 	"MOV	r14,	r31"	);
     462:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	20"		);
     464:	f4 e1       	ldi	r31, 0x14	; 20
		asm( 	"MOV	r15,	r31"	);
     466:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	21"		);
     468:	05 e1       	ldi	r16, 0x15	; 21
		asm(	"LDI	r17,	22"		);
     46a:	16 e1       	ldi	r17, 0x16	; 22
		asm(	"LDI	r18,	23"		);
     46c:	27 e1       	ldi	r18, 0x17	; 23
		asm(	"LDI	r19,	24"		);
     46e:	38 e1       	ldi	r19, 0x18	; 24
		asm(	"LDI	r20,	25"		);
     470:	49 e1       	ldi	r20, 0x19	; 25
		asm(	"LDI	r21,	26"		);
     472:	5a e1       	ldi	r21, 0x1A	; 26
		asm(	"LDI	r22,	27"		);
     474:	6b e1       	ldi	r22, 0x1B	; 27
		asm(	"LDI	r23,	28"		);
     476:	7c e1       	ldi	r23, 0x1C	; 28
		asm(	"LDI	r24,	29"		);
     478:	8d e1       	ldi	r24, 0x1D	; 29
		asm(	"LDI	r25,	30"		);
     47a:	9e e1       	ldi	r25, 0x1E	; 30
		asm(	"LDI	r26,	31"		);
     47c:	af e1       	ldi	r26, 0x1F	; 31
		asm(	"LDI	r27,	32"		);
     47e:	b0 e2       	ldi	r27, 0x20	; 32
		asm(	"LDI	r30,	33"		);
     480:	e1 e2       	ldi	r30, 0x21	; 33

		asm(	"LDI	r31,	5"			);
     482:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r0"			);
     484:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     486:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	6"			);
     48a:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r1"			);
     48c:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     48e:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	7"			);
     492:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r2"			);
     494:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     496:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	8"			);
     49a:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r3"			);
     49c:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     49e:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	9"			);
     4a2:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r4"			);
     4a4:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     4a6:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	10"			);
     4aa:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r5"			);
     4ac:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     4ae:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	11"			);
     4b2:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r6"			);
     4b4:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     4b6:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	12"			);
     4ba:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r7"			);
     4bc:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     4be:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	13"			);
     4c2:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r8"			);
     4c4:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     4c6:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	14"			);
     4ca:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r9"			);
     4cc:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     4ce:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	15"			);
     4d2:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r10"		);
     4d4:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     4d6:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	16"			);
     4da:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r11"		);
     4dc:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     4de:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	17"			);
     4e2:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r12"		);
     4e4:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     4e6:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	18"			);
     4ea:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r13"		);
     4ec:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     4ee:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	19"			);
     4f2:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r14"		);
     4f4:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     4f6:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	20"			);
     4fa:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r15"		);
     4fc:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     4fe:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	21"			);
     502:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r16"		);
     504:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     506:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	22"			);
     50a:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r17"		);
     50c:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     50e:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	23"			);
     512:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r18"		);
     514:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     516:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	24"			);
     51a:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r19"		);
     51c:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     51e:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	25"			);
     522:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r20"		);
     524:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     526:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	26"			);
     52a:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r21"		);
     52c:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     52e:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	27"			);
     532:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r22"		);
     534:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     536:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	28"			);
     53a:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r23"		);
     53c:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     53e:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	29"			);
     542:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r24"		);
     544:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     546:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	30"			);
     54a:	fe e1       	ldi	r31, 0x1E	; 30
		asm(	"CPSE	r31,	r25"		);
     54c:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     54e:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	31"			);
     552:	ff e1       	ldi	r31, 0x1F	; 31
		asm(	"CPSE	r31,	r26"		);
     554:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     556:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	32"			);
     55a:	f0 e2       	ldi	r31, 0x20	; 32
		asm(	"CPSE	r31,	r27"		);
     55c:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     55e:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	33"			);
     562:	f1 e2       	ldi	r31, 0x21	; 33
		asm(	"CPSE	r31,	r30"		);
     564:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     566:	00 92 5e 01 	sts	0x015E, r0
     56a:	5e cf       	rjmp	.-324    	; 0x428 <prvRegisterCheck1>

0000056c <prvRegisterCheck2>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	1"		);
     56c:	f1 e0       	ldi	r31, 0x01	; 1
		asm( 	"MOV	r0,		r31"	);
     56e:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	2"		);
     570:	f2 e0       	ldi	r31, 0x02	; 2
		asm( 	"MOV	r1,		r31"	);
     572:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	3"		);
     574:	f3 e0       	ldi	r31, 0x03	; 3
		asm( 	"MOV	r2,		r31"	);
     576:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	4"		);
     578:	f4 e0       	ldi	r31, 0x04	; 4
		asm( 	"MOV	r3,		r31"	);
     57a:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	5"		);
     57c:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r4,		r31"	);
     57e:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	6"		);
     580:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r5,		r31"	);
     582:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	7"		);
     584:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r6,		r31"	);
     586:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	8"		);
     588:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r7,		r31"	);
     58a:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	9"		);
     58c:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r8,		r31"	);
     58e:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	10"		);
     590:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r9,		r31"	);
     592:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	11"		);
     594:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r10,	r31"	);
     596:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	12"		);
     598:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r11,	r31"	);
     59a:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	13"		);
     59c:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r12,	r31"	);
     59e:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	14"		);
     5a0:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r13,	r31"	);
     5a2:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	15"		);
     5a4:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r14,	r31"	);
     5a6:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	16"		);
     5a8:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r15,	r31"	);
     5aa:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	17"		);
     5ac:	01 e1       	ldi	r16, 0x11	; 17
		asm(	"LDI	r17,	18"		);
     5ae:	12 e1       	ldi	r17, 0x12	; 18
		asm(	"LDI	r18,	19"		);
     5b0:	23 e1       	ldi	r18, 0x13	; 19
		asm(	"LDI	r19,	20"		);
     5b2:	34 e1       	ldi	r19, 0x14	; 20
		asm(	"LDI	r20,	21"		);
     5b4:	45 e1       	ldi	r20, 0x15	; 21
		asm(	"LDI	r21,	22"		);
     5b6:	56 e1       	ldi	r21, 0x16	; 22
		asm(	"LDI	r22,	23"		);
     5b8:	67 e1       	ldi	r22, 0x17	; 23
		asm(	"LDI	r23,	24"		);
     5ba:	78 e1       	ldi	r23, 0x18	; 24
		asm(	"LDI	r24,	25"		);
     5bc:	89 e1       	ldi	r24, 0x19	; 25
		asm(	"LDI	r25,	26"		);
     5be:	9a e1       	ldi	r25, 0x1A	; 26
		asm(	"LDI	r26,	27"		);
     5c0:	ab e1       	ldi	r26, 0x1B	; 27
		asm(	"LDI	r27,	28"		);
     5c2:	bc e1       	ldi	r27, 0x1C	; 28
		asm(	"LDI	r30,	29"		);
     5c4:	ed e1       	ldi	r30, 0x1D	; 29

		asm(	"LDI	r31,	1"			);
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
		asm(	"CPSE	r31,	r0"			);
     5c8:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     5ca:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	2"			);
     5ce:	f2 e0       	ldi	r31, 0x02	; 2
		asm(	"CPSE	r31,	r1"			);
     5d0:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     5d2:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	3"			);
     5d6:	f3 e0       	ldi	r31, 0x03	; 3
		asm(	"CPSE	r31,	r2"			);
     5d8:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     5da:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	4"			);
     5de:	f4 e0       	ldi	r31, 0x04	; 4
		asm(	"CPSE	r31,	r3"			);
     5e0:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     5e2:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	5"			);
     5e6:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r4"			);
     5e8:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     5ea:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	6"			);
     5ee:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r5"			);
     5f0:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     5f2:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	7"			);
     5f6:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r6"			);
     5f8:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     5fa:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	8"			);
     5fe:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r7"			);
     600:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     602:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	9"			);
     606:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r8"			);
     608:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     60a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	10"			);
     60e:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r9"			);
     610:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     612:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	11"			);
     616:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r10"		);
     618:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     61a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	12"			);
     61e:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r11"		);
     620:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     622:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	13"			);
     626:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r12"		);
     628:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     62a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	14"			);
     62e:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r13"		);
     630:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     632:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	15"			);
     636:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r14"		);
     638:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     63a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	16"			);
     63e:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r15"		);
     640:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     642:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	17"			);
     646:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r16"		);
     648:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     64a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	18"			);
     64e:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r17"		);
     650:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     652:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	19"			);
     656:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r18"		);
     658:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     65a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	20"			);
     65e:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r19"		);
     660:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     662:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	21"			);
     666:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r20"		);
     668:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     66a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	22"			);
     66e:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r21"		);
     670:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     672:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	23"			);
     676:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r22"		);
     678:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     67a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	24"			);
     67e:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r23"		);
     680:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     682:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	25"			);
     686:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r24"		);
     688:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     68a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	26"			);
     68e:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r25"		);
     690:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     692:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	27"			);
     696:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r26"		);
     698:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     69a:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	28"			);
     69e:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r27"		);
     6a0:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     6a2:	00 92 5e 01 	sts	0x015E, r0
		asm(	"LDI	r31,	29"			);
     6a6:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r30"		);
     6a8:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     6aa:	00 92 5e 01 	sts	0x015E, r0
     6ae:	5e cf       	rjmp	.-324    	; 0x56c <prvRegisterCheck2>

000006b0 <vStartRegTestTasks>:
portBASE_TYPE xRegTestError = pdFALSE;

/*-----------------------------------------------------------*/

void vStartRegTestTasks( void )
{
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
	xTaskCreate( prvRegisterCheck1, "Reg1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     6b6:	84 e1       	ldi	r24, 0x14	; 20
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	65 e1       	ldi	r22, 0x15	; 21
     6bc:	71 e0       	ldi	r23, 0x01	; 1
     6be:	45 e5       	ldi	r20, 0x55	; 85
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	00 e0       	ldi	r16, 0x00	; 0
     6c8:	ee 24       	eor	r14, r14
     6ca:	ff 24       	eor	r15, r15
     6cc:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
	xTaskCreate( prvRegisterCheck2, "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     6d0:	86 eb       	ldi	r24, 0xB6	; 182
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	6a e1       	ldi	r22, 0x1A	; 26
     6d6:	71 e0       	ldi	r23, 0x01	; 1
     6d8:	45 e5       	ldi	r20, 0x55	; 85
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
}
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	08 95       	ret

000006ec <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     6ec:	80 91 61 01 	lds	r24, 0x0161
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	80 93 61 01 	sts	0x0161, r24
}
     6f6:	08 95       	ret

000006f8 <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     6fe:	20 91 64 01 	lds	r18, 0x0164
     702:	30 91 65 01 	lds	r19, 0x0165
	}
	portTICK_TYPE_EXIT_CRITICAL();
     706:	0f 90       	pop	r0
     708:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
     70a:	c9 01       	movw	r24, r18
     70c:	08 95       	ret

0000070e <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
     70e:	20 91 64 01 	lds	r18, 0x0164
     712:	30 91 65 01 	lds	r19, 0x0165
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     716:	c9 01       	movw	r24, r18
     718:	08 95       	ret

0000071a <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
     71a:	80 91 6a 01 	lds	r24, 0x016A
}
     71e:	08 95       	ret

00000720 <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
     720:	00 97       	sbiw	r24, 0x00	; 0
     722:	21 f4       	brne	.+8      	; 0x72c <pcTaskGetName+0xc>
     724:	80 91 5f 01 	lds	r24, 0x015F
     728:	90 91 60 01 	lds	r25, 0x0160
     72c:	9c 01       	movw	r18, r24
     72e:	27 5e       	subi	r18, 0xE7	; 231
     730:	3f 4f       	sbci	r19, 0xFF	; 255
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
}
     732:	c9 01       	movw	r24, r18
     734:	08 95       	ret

00000736 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     736:	80 91 61 01 	lds	r24, 0x0161
     73a:	88 23       	and	r24, r24
     73c:	21 f0       	breq	.+8      	; 0x746 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 63 01 	sts	0x0163, r24
     744:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     746:	10 92 63 01 	sts	0x0163, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     74a:	20 91 62 01 	lds	r18, 0x0162
     74e:	99 e0       	ldi	r25, 0x09	; 9
     750:	01 c0       	rjmp	.+2      	; 0x754 <vTaskSwitchContext+0x1e>
     752:	21 50       	subi	r18, 0x01	; 1
     754:	29 9f       	mul	r18, r25
     756:	d0 01       	movw	r26, r0
     758:	11 24       	eor	r1, r1
     75a:	a0 59       	subi	r26, 0x90	; 144
     75c:	be 4f       	sbci	r27, 0xFE	; 254
     75e:	8c 91       	ld	r24, X
     760:	88 23       	and	r24, r24
     762:	b9 f3       	breq	.-18     	; 0x752 <vTaskSwitchContext+0x1c>
     764:	11 96       	adiw	r26, 0x01	; 1
     766:	ed 91       	ld	r30, X+
     768:	fc 91       	ld	r31, X
     76a:	12 97       	sbiw	r26, 0x02	; 2
     76c:	02 80       	ldd	r0, Z+2	; 0x02
     76e:	f3 81       	ldd	r31, Z+3	; 0x03
     770:	e0 2d       	mov	r30, r0
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	fc 93       	st	X, r31
     776:	ee 93       	st	-X, r30
     778:	11 97       	sbiw	r26, 0x01	; 1
     77a:	cd 01       	movw	r24, r26
     77c:	03 96       	adiw	r24, 0x03	; 3
     77e:	e8 17       	cp	r30, r24
     780:	f9 07       	cpc	r31, r25
     782:	31 f4       	brne	.+12     	; 0x790 <vTaskSwitchContext+0x5a>
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	93 81       	ldd	r25, Z+3	; 0x03
     788:	12 96       	adiw	r26, 0x02	; 2
     78a:	9c 93       	st	X, r25
     78c:	8e 93       	st	-X, r24
     78e:	11 97       	sbiw	r26, 0x01	; 1
     790:	11 96       	adiw	r26, 0x01	; 1
     792:	ed 91       	ld	r30, X+
     794:	fc 91       	ld	r31, X
     796:	12 97       	sbiw	r26, 0x02	; 2
     798:	86 81       	ldd	r24, Z+6	; 0x06
     79a:	97 81       	ldd	r25, Z+7	; 0x07
     79c:	90 93 60 01 	sts	0x0160, r25
     7a0:	80 93 5f 01 	sts	0x015F, r24
     7a4:	20 93 62 01 	sts	0x0162, r18
     7a8:	08 95       	ret

000007aa <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
     7aa:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     7ac:	80 91 68 01 	lds	r24, 0x0168
     7b0:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     7b2:	80 91 64 01 	lds	r24, 0x0164
     7b6:	90 91 65 01 	lds	r25, 0x0165
     7ba:	92 83       	std	Z+2, r25	; 0x02
     7bc:	81 83       	std	Z+1, r24	; 0x01
}
     7be:	08 95       	ret

000007c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
     7c0:	fc 01       	movw	r30, r24
     7c2:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
     7ca:	40 91 64 01 	lds	r20, 0x0164
     7ce:	50 91 65 01 	lds	r21, 0x0165
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
     7d2:	90 91 68 01 	lds	r25, 0x0168
     7d6:	80 81       	ld	r24, Z
     7d8:	98 17       	cp	r25, r24
     7da:	29 f0       	breq	.+10     	; 0x7e6 <xTaskCheckForTimeOut+0x26>
     7dc:	81 81       	ldd	r24, Z+1	; 0x01
     7de:	92 81       	ldd	r25, Z+2	; 0x02
     7e0:	48 17       	cp	r20, r24
     7e2:	59 07       	cpc	r21, r25
     7e4:	e0 f4       	brcc	.+56     	; 0x81e <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
     7e6:	21 81       	ldd	r18, Z+1	; 0x01
     7e8:	32 81       	ldd	r19, Z+2	; 0x02
     7ea:	6d 91       	ld	r22, X+
     7ec:	7c 91       	ld	r23, X
     7ee:	11 97       	sbiw	r26, 0x01	; 1
     7f0:	ca 01       	movw	r24, r20
     7f2:	82 1b       	sub	r24, r18
     7f4:	93 0b       	sbc	r25, r19
     7f6:	86 17       	cp	r24, r22
     7f8:	97 07       	cpc	r25, r23
     7fa:	88 f4       	brcc	.+34     	; 0x81e <xTaskCheckForTimeOut+0x5e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
     7fc:	24 1b       	sub	r18, r20
     7fe:	35 0b       	sbc	r19, r21
     800:	26 0f       	add	r18, r22
     802:	37 1f       	adc	r19, r23
     804:	2d 93       	st	X+, r18
     806:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     808:	80 91 68 01 	lds	r24, 0x0168
     80c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     80e:	80 91 64 01 	lds	r24, 0x0164
     812:	90 91 65 01 	lds	r25, 0x0165
     816:	92 83       	std	Z+2, r25	; 0x02
     818:	81 83       	std	Z+1, r24	; 0x01
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	01 c0       	rjmp	.+2      	; 0x820 <xTaskCheckForTimeOut+0x60>
     81e:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
     824:	08 95       	ret

00000826 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 63 01 	sts	0x0163, r24
}
     82c:	08 95       	ret

0000082e <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
     82e:	e0 91 5f 01 	lds	r30, 0x015F
     832:	f0 91 60 01 	lds	r31, 0x0160
     836:	84 85       	ldd	r24, Z+12	; 0x0c
     838:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     83a:	a0 91 5f 01 	lds	r26, 0x015F
     83e:	b0 91 60 01 	lds	r27, 0x0160
     842:	e0 91 5f 01 	lds	r30, 0x015F
     846:	f0 91 60 01 	lds	r31, 0x0160
     84a:	46 89       	ldd	r20, Z+22	; 0x16
     84c:	24 e0       	ldi	r18, 0x04	; 4
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	24 1b       	sub	r18, r20
     852:	31 09       	sbc	r19, r1
     854:	1d 96       	adiw	r26, 0x0d	; 13
     856:	3c 93       	st	X, r19
     858:	2e 93       	st	-X, r18
     85a:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
}
     85c:	08 95       	ret

0000085e <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	29 f4       	brne	.+10     	; 0x86c <xTaskNotifyStateClear+0xe>
     862:	e0 91 5f 01 	lds	r30, 0x015F
     866:	f0 91 60 01 	lds	r31, 0x0160
     86a:	01 c0       	rjmp	.+2      	; 0x86e <xTaskNotifyStateClear+0x10>
     86c:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
     874:	85 a1       	ldd	r24, Z+37	; 0x25
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	11 f0       	breq	.+4      	; 0x87e <xTaskNotifyStateClear+0x20>
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	02 c0       	rjmp	.+4      	; 0x882 <xTaskNotifyStateClear+0x24>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     87e:	15 a2       	std	Z+37, r1	; 0x25
     880:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		taskEXIT_CRITICAL();
     882:	0f 90       	pop	r0
     884:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     886:	08 95       	ret

00000888 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	7b 01       	movw	r14, r22
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
     896:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
     898:	2d a1       	ldd	r18, Y+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	8d a3       	std	Y+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
     89e:	89 a1       	ldd	r24, Y+33	; 0x21
     8a0:	9a a1       	ldd	r25, Y+34	; 0x22
     8a2:	ab a1       	ldd	r26, Y+35	; 0x23
     8a4:	bc a1       	ldd	r27, Y+36	; 0x24
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	a1 1d       	adc	r26, r1
     8aa:	b1 1d       	adc	r27, r1
     8ac:	89 a3       	std	Y+33, r24	; 0x21
     8ae:	9a a3       	std	Y+34, r25	; 0x22
     8b0:	ab a3       	std	Y+35, r26	; 0x23
     8b2:	bc a3       	std	Y+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     8b4:	21 30       	cpi	r18, 0x01	; 1
     8b6:	91 f5       	brne	.+100    	; 0x91c <__stack+0x1d>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     8b8:	80 91 61 01 	lds	r24, 0x0161
     8bc:	88 23       	and	r24, r24
     8be:	a9 f4       	brne	.+42     	; 0x8ea <vTaskNotifyGiveFromISR+0x62>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     8c0:	8e 01       	movw	r16, r28
     8c2:	0e 5f       	subi	r16, 0xFE	; 254
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
     8c6:	c8 01       	movw	r24, r16
     8c8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     8cc:	9e 89       	ldd	r25, Y+22	; 0x16
     8ce:	80 91 62 01 	lds	r24, 0x0162
     8d2:	89 17       	cp	r24, r25
     8d4:	10 f4       	brcc	.+4      	; 0x8da <vTaskNotifyGiveFromISR+0x52>
     8d6:	90 93 62 01 	sts	0x0162, r25
     8da:	89 e0       	ldi	r24, 0x09	; 9
     8dc:	98 9f       	mul	r25, r24
     8de:	c0 01       	movw	r24, r0
     8e0:	11 24       	eor	r1, r1
     8e2:	80 59       	subi	r24, 0x90	; 144
     8e4:	9e 4f       	sbci	r25, 0xFE	; 254
     8e6:	b8 01       	movw	r22, r16
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <vTaskNotifyGiveFromISR+0x6c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     8ea:	be 01       	movw	r22, r28
     8ec:	64 5f       	subi	r22, 0xF4	; 244
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	8a ea       	ldi	r24, 0xAA	; 170
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     8f8:	e0 91 5f 01 	lds	r30, 0x015F
     8fc:	f0 91 60 01 	lds	r31, 0x0160
     900:	9e 89       	ldd	r25, Y+22	; 0x16
     902:	86 89       	ldd	r24, Z+22	; 0x16
     904:	89 17       	cp	r24, r25
     906:	50 f4       	brcc	.+20     	; 0x91c <__stack+0x1d>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
     908:	e1 14       	cp	r14, r1
     90a:	f1 04       	cpc	r15, r1
     90c:	21 f0       	breq	.+8      	; 0x916 <__stack+0x17>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	f7 01       	movw	r30, r14
     912:	80 83       	st	Z, r24
     914:	03 c0       	rjmp	.+6      	; 0x91c <__stack+0x1d>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	80 93 63 01 	sts	0x0163, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	08 95       	ret

0000092a <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	f8 01       	movw	r30, r16
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
     938:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
     93a:	01 15       	cp	r16, r1
     93c:	11 05       	cpc	r17, r1
     93e:	41 f0       	breq	.+16     	; 0x950 <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
     940:	89 a1       	ldd	r24, Y+33	; 0x21
     942:	9a a1       	ldd	r25, Y+34	; 0x22
     944:	ab a1       	ldd	r26, Y+35	; 0x23
     946:	bc a1       	ldd	r27, Y+36	; 0x24
     948:	80 83       	st	Z, r24
     94a:	91 83       	std	Z+1, r25	; 0x01
     94c:	a2 83       	std	Z+2, r26	; 0x02
     94e:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
     950:	3d a1       	ldd	r19, Y+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
     956:	22 30       	cpi	r18, 0x02	; 2
     958:	99 f0       	breq	.+38     	; 0x980 <xTaskGenericNotifyFromISR+0x56>
     95a:	23 30       	cpi	r18, 0x03	; 3
     95c:	18 f4       	brcc	.+6      	; 0x964 <xTaskGenericNotifyFromISR+0x3a>
     95e:	21 30       	cpi	r18, 0x01	; 1
     960:	19 f5       	brne	.+70     	; 0x9a8 <xTaskGenericNotifyFromISR+0x7e>
     962:	05 c0       	rjmp	.+10     	; 0x96e <xTaskGenericNotifyFromISR+0x44>
     964:	23 30       	cpi	r18, 0x03	; 3
     966:	e1 f0       	breq	.+56     	; 0x9a0 <xTaskGenericNotifyFromISR+0x76>
     968:	24 30       	cpi	r18, 0x04	; 4
     96a:	f1 f4       	brne	.+60     	; 0x9a8 <xTaskGenericNotifyFromISR+0x7e>
     96c:	15 c0       	rjmp	.+42     	; 0x998 <xTaskGenericNotifyFromISR+0x6e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
     96e:	89 a1       	ldd	r24, Y+33	; 0x21
     970:	9a a1       	ldd	r25, Y+34	; 0x22
     972:	ab a1       	ldd	r26, Y+35	; 0x23
     974:	bc a1       	ldd	r27, Y+36	; 0x24
     976:	84 2b       	or	r24, r20
     978:	95 2b       	or	r25, r21
     97a:	a6 2b       	or	r26, r22
     97c:	b7 2b       	or	r27, r23
     97e:	07 c0       	rjmp	.+14     	; 0x98e <xTaskGenericNotifyFromISR+0x64>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
     980:	89 a1       	ldd	r24, Y+33	; 0x21
     982:	9a a1       	ldd	r25, Y+34	; 0x22
     984:	ab a1       	ldd	r26, Y+35	; 0x23
     986:	bc a1       	ldd	r27, Y+36	; 0x24
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	a1 1d       	adc	r26, r1
     98c:	b1 1d       	adc	r27, r1
     98e:	89 a3       	std	Y+33, r24	; 0x21
     990:	9a a3       	std	Y+34, r25	; 0x22
     992:	ab a3       	std	Y+35, r26	; 0x23
     994:	bc a3       	std	Y+36, r27	; 0x24
     996:	08 c0       	rjmp	.+16     	; 0x9a8 <xTaskGenericNotifyFromISR+0x7e>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
     998:	32 30       	cpi	r19, 0x02	; 2
     99a:	11 f4       	brne	.+4      	; 0x9a0 <xTaskGenericNotifyFromISR+0x76>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <xTaskGenericNotifyFromISR+0xea>
					{
						pxTCB->ulNotifiedValue = ulValue;
     9a0:	49 a3       	std	Y+33, r20	; 0x21
     9a2:	5a a3       	std	Y+34, r21	; 0x22
     9a4:	6b a3       	std	Y+35, r22	; 0x23
     9a6:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     9a8:	31 30       	cpi	r19, 0x01	; 1
     9aa:	99 f5       	brne	.+102    	; 0xa12 <xTaskGenericNotifyFromISR+0xe8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     9ac:	80 91 61 01 	lds	r24, 0x0161
     9b0:	88 23       	and	r24, r24
     9b2:	a9 f4       	brne	.+42     	; 0x9de <xTaskGenericNotifyFromISR+0xb4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     9b4:	8e 01       	movw	r16, r28
     9b6:	0e 5f       	subi	r16, 0xFE	; 254
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	c8 01       	movw	r24, r16
     9bc:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     9c0:	9e 89       	ldd	r25, Y+22	; 0x16
     9c2:	80 91 62 01 	lds	r24, 0x0162
     9c6:	89 17       	cp	r24, r25
     9c8:	10 f4       	brcc	.+4      	; 0x9ce <xTaskGenericNotifyFromISR+0xa4>
     9ca:	90 93 62 01 	sts	0x0162, r25
     9ce:	89 e0       	ldi	r24, 0x09	; 9
     9d0:	98 9f       	mul	r25, r24
     9d2:	c0 01       	movw	r24, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	80 59       	subi	r24, 0x90	; 144
     9d8:	9e 4f       	sbci	r25, 0xFE	; 254
     9da:	b8 01       	movw	r22, r16
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <xTaskGenericNotifyFromISR+0xbe>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     9de:	be 01       	movw	r22, r28
     9e0:	64 5f       	subi	r22, 0xF4	; 244
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	8a ea       	ldi	r24, 0xAA	; 170
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     9ec:	e0 91 5f 01 	lds	r30, 0x015F
     9f0:	f0 91 60 01 	lds	r31, 0x0160
     9f4:	9e 89       	ldd	r25, Y+22	; 0x16
     9f6:	86 89       	ldd	r24, Z+22	; 0x16
     9f8:	89 17       	cp	r24, r25
     9fa:	58 f4       	brcc	.+22     	; 0xa12 <xTaskGenericNotifyFromISR+0xe8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
     9fc:	e1 14       	cp	r14, r1
     9fe:	f1 04       	cpc	r15, r1
     a00:	21 f0       	breq	.+8      	; 0xa0a <xTaskGenericNotifyFromISR+0xe0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	f7 01       	movw	r30, r14
     a06:	80 83       	st	Z, r24
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <xTaskGenericNotifyFromISR+0xea>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 63 01 	sts	0x0163, r24
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <xTaskGenericNotifyFromISR+0xea>
     a12:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <xTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	fc 01       	movw	r30, r24
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
     a2c:	70 68       	ori	r23, 0x80	; 128
     a2e:	71 83       	std	Z+1, r23	; 0x01
     a30:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
     a32:	c6 81       	ldd	r28, Z+6	; 0x06
     a34:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
     a36:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
     a3a:	8e 01       	movw	r16, r28
     a3c:	0e 5f       	subi	r16, 0xFE	; 254
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	c8 01       	movw	r24, r16
     a42:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
     a46:	9e 89       	ldd	r25, Y+22	; 0x16
     a48:	80 91 62 01 	lds	r24, 0x0162
     a4c:	89 17       	cp	r24, r25
     a4e:	10 f4       	brcc	.+4      	; 0xa54 <xTaskRemoveFromUnorderedEventList+0x32>
     a50:	90 93 62 01 	sts	0x0162, r25
     a54:	89 e0       	ldi	r24, 0x09	; 9
     a56:	98 9f       	mul	r25, r24
     a58:	c0 01       	movw	r24, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	80 59       	subi	r24, 0x90	; 144
     a5e:	9e 4f       	sbci	r25, 0xFE	; 254
     a60:	b8 01       	movw	r22, r16
     a62:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
     a66:	e0 91 5f 01 	lds	r30, 0x015F
     a6a:	f0 91 60 01 	lds	r31, 0x0160
     a6e:	9e 89       	ldd	r25, Y+22	; 0x16
     a70:	86 89       	ldd	r24, Z+22	; 0x16
     a72:	89 17       	cp	r24, r25
     a74:	10 f0       	brcs	.+4      	; 0xa7a <xTaskRemoveFromUnorderedEventList+0x58>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	03 c0       	rjmp	.+6      	; 0xa80 <xTaskRemoveFromUnorderedEventList+0x5e>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 63 01 	sts	0x0163, r24
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     a92:	dc 01       	movw	r26, r24
     a94:	15 96       	adiw	r26, 0x05	; 5
     a96:	ed 91       	ld	r30, X+
     a98:	fc 91       	ld	r31, X
     a9a:	16 97       	sbiw	r26, 0x06	; 6
     a9c:	c6 81       	ldd	r28, Z+6	; 0x06
     a9e:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     aa0:	8e 01       	movw	r16, r28
     aa2:	04 5f       	subi	r16, 0xF4	; 244
     aa4:	1f 4f       	sbci	r17, 0xFF	; 255
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     aac:	80 91 61 01 	lds	r24, 0x0161
     ab0:	88 23       	and	r24, r24
     ab2:	a1 f4       	brne	.+40     	; 0xadc <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
     ab4:	8e 01       	movw	r16, r28
     ab6:	0e 5f       	subi	r16, 0xFE	; 254
     ab8:	1f 4f       	sbci	r17, 0xFF	; 255
     aba:	c8 01       	movw	r24, r16
     abc:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
     ac0:	9e 89       	ldd	r25, Y+22	; 0x16
     ac2:	80 91 62 01 	lds	r24, 0x0162
     ac6:	89 17       	cp	r24, r25
     ac8:	10 f4       	brcc	.+4      	; 0xace <xTaskRemoveFromEventList+0x44>
     aca:	90 93 62 01 	sts	0x0162, r25
     ace:	89 e0       	ldi	r24, 0x09	; 9
     ad0:	98 9f       	mul	r25, r24
     ad2:	c0 01       	movw	r24, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	80 59       	subi	r24, 0x90	; 144
     ad8:	9e 4f       	sbci	r25, 0xFE	; 254
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <xTaskRemoveFromEventList+0x56>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     adc:	8a ea       	ldi	r24, 0xAA	; 170
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	b8 01       	movw	r22, r16
     ae2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
     ae6:	e0 91 5f 01 	lds	r30, 0x015F
     aea:	f0 91 60 01 	lds	r31, 0x0160
     aee:	9e 89       	ldd	r25, Y+22	; 0x16
     af0:	86 89       	ldd	r24, Z+22	; 0x16
     af2:	89 17       	cp	r24, r25
     af4:	10 f0       	brcs	.+4      	; 0xafa <xTaskRemoveFromEventList+0x70>
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <xTaskRemoveFromEventList+0x76>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	80 93 63 01 	sts	0x0163, r24
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	08 95       	ret

00000b0a <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     b0a:	cf 92       	push	r12
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     b1a:	80 91 61 01 	lds	r24, 0x0161
     b1e:	88 23       	and	r24, r24
     b20:	09 f0       	breq	.+2      	; 0xb24 <xTaskIncrementTick+0x1a>
     b22:	a6 c0       	rjmp	.+332    	; 0xc70 <xTaskIncrementTick+0x166>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
     b24:	00 91 64 01 	lds	r16, 0x0164
     b28:	10 91 65 01 	lds	r17, 0x0165
     b2c:	0f 5f       	subi	r16, 0xFF	; 255
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
     b30:	10 93 65 01 	sts	0x0165, r17
     b34:	00 93 64 01 	sts	0x0164, r16

		if( xConstTickCount == ( TickType_t ) 0U )
     b38:	01 15       	cp	r16, r1
     b3a:	11 05       	cpc	r17, r1
     b3c:	79 f5       	brne	.+94     	; 0xb9c <xTaskIncrementTick+0x92>
		{
			taskSWITCH_DELAYED_LISTS();
     b3e:	20 91 a6 01 	lds	r18, 0x01A6
     b42:	30 91 a7 01 	lds	r19, 0x01A7
     b46:	80 91 a8 01 	lds	r24, 0x01A8
     b4a:	90 91 a9 01 	lds	r25, 0x01A9
     b4e:	90 93 a7 01 	sts	0x01A7, r25
     b52:	80 93 a6 01 	sts	0x01A6, r24
     b56:	30 93 a9 01 	sts	0x01A9, r19
     b5a:	20 93 a8 01 	sts	0x01A8, r18
     b5e:	80 91 68 01 	lds	r24, 0x0168
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	80 93 68 01 	sts	0x0168, r24

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     b68:	e0 91 a6 01 	lds	r30, 0x01A6
     b6c:	f0 91 a7 01 	lds	r31, 0x01A7
     b70:	80 81       	ld	r24, Z
     b72:	88 23       	and	r24, r24
     b74:	19 f4       	brne	.+6      	; 0xb7c <xTaskIncrementTick+0x72>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	0c c0       	rjmp	.+24     	; 0xb94 <xTaskIncrementTick+0x8a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     b7c:	e0 91 a6 01 	lds	r30, 0x01A6
     b80:	f0 91 a7 01 	lds	r31, 0x01A7
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     b84:	05 80       	ldd	r0, Z+5	; 0x05
     b86:	f6 81       	ldd	r31, Z+6	; 0x06
     b88:	e0 2d       	mov	r30, r0
     b8a:	06 80       	ldd	r0, Z+6	; 0x06
     b8c:	f7 81       	ldd	r31, Z+7	; 0x07
     b8e:	e0 2d       	mov	r30, r0
     b90:	82 81       	ldd	r24, Z+2	; 0x02
     b92:	93 81       	ldd	r25, Z+3	; 0x03
     b94:	90 93 67 01 	sts	0x0167, r25
     b98:	80 93 66 01 	sts	0x0166, r24

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
     b9c:	80 91 66 01 	lds	r24, 0x0166
     ba0:	90 91 67 01 	lds	r25, 0x0167
     ba4:	08 17       	cp	r16, r24
     ba6:	19 07       	cpc	r17, r25
     ba8:	08 f4       	brcc	.+2      	; 0xbac <xTaskIncrementTick+0xa2>
     baa:	4b c0       	rjmp	.+150    	; 0xc42 <xTaskIncrementTick+0x138>
     bac:	dd 24       	eor	r13, r13
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     bae:	49 e0       	ldi	r20, 0x09	; 9
     bb0:	c4 2e       	mov	r12, r20
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     bb2:	e0 91 a6 01 	lds	r30, 0x01A6
     bb6:	f0 91 a7 01 	lds	r31, 0x01A7
     bba:	80 81       	ld	r24, Z
     bbc:	88 23       	and	r24, r24
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	9f ef       	ldi	r25, 0xFF	; 255
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <xTaskIncrementTick+0xd8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     bc6:	e0 91 a6 01 	lds	r30, 0x01A6
     bca:	f0 91 a7 01 	lds	r31, 0x01A7
     bce:	05 80       	ldd	r0, Z+5	; 0x05
     bd0:	f6 81       	ldd	r31, Z+6	; 0x06
     bd2:	e0 2d       	mov	r30, r0
     bd4:	c6 81       	ldd	r28, Z+6	; 0x06
     bd6:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
     bdc:	08 17       	cp	r16, r24
     bde:	19 07       	cpc	r17, r25
     be0:	28 f4       	brcc	.+10     	; 0xbec <xTaskIncrementTick+0xe2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
     be2:	90 93 67 01 	sts	0x0167, r25
     be6:	80 93 66 01 	sts	0x0166, r24
     bea:	2c c0       	rjmp	.+88     	; 0xc44 <xTaskIncrementTick+0x13a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     bec:	32 e0       	ldi	r19, 0x02	; 2
     bee:	e3 2e       	mov	r14, r19
     bf0:	f1 2c       	mov	r15, r1
     bf2:	ec 0e       	add	r14, r28
     bf4:	fd 1e       	adc	r15, r29
     bf6:	c7 01       	movw	r24, r14
     bf8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     bfc:	8c 89       	ldd	r24, Y+20	; 0x14
     bfe:	9d 89       	ldd	r25, Y+21	; 0x15
     c00:	89 2b       	or	r24, r25
     c02:	21 f0       	breq	.+8      	; 0xc0c <xTaskIncrementTick+0x102>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     c04:	ce 01       	movw	r24, r28
     c06:	0c 96       	adiw	r24, 0x0c	; 12
     c08:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     c0c:	9e 89       	ldd	r25, Y+22	; 0x16
     c0e:	80 91 62 01 	lds	r24, 0x0162
     c12:	89 17       	cp	r24, r25
     c14:	10 f4       	brcc	.+4      	; 0xc1a <xTaskIncrementTick+0x110>
     c16:	90 93 62 01 	sts	0x0162, r25
     c1a:	9c 9d       	mul	r25, r12
     c1c:	c0 01       	movw	r24, r0
     c1e:	11 24       	eor	r1, r1
     c20:	80 59       	subi	r24, 0x90	; 144
     c22:	9e 4f       	sbci	r25, 0xFE	; 254
     c24:	b7 01       	movw	r22, r14
     c26:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     c2a:	e0 91 5f 01 	lds	r30, 0x015F
     c2e:	f0 91 60 01 	lds	r31, 0x0160
     c32:	9e 89       	ldd	r25, Y+22	; 0x16
     c34:	86 89       	ldd	r24, Z+22	; 0x16
     c36:	98 17       	cp	r25, r24
     c38:	08 f4       	brcc	.+2      	; 0xc3c <xTaskIncrementTick+0x132>
     c3a:	bb cf       	rjmp	.-138    	; 0xbb2 <xTaskIncrementTick+0xa8>
     c3c:	dd 24       	eor	r13, r13
     c3e:	d3 94       	inc	r13
     c40:	b8 cf       	rjmp	.-144    	; 0xbb2 <xTaskIncrementTick+0xa8>
     c42:	dd 24       	eor	r13, r13
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     c44:	e0 91 5f 01 	lds	r30, 0x015F
     c48:	f0 91 60 01 	lds	r31, 0x0160
     c4c:	86 89       	ldd	r24, Z+22	; 0x16
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	fc 01       	movw	r30, r24
     c52:	23 e0       	ldi	r18, 0x03	; 3
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	2a 95       	dec	r18
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <xTaskIncrementTick+0x14a>
     c5c:	e8 0f       	add	r30, r24
     c5e:	f9 1f       	adc	r31, r25
     c60:	e0 59       	subi	r30, 0x90	; 144
     c62:	fe 4f       	sbci	r31, 0xFE	; 254
     c64:	80 81       	ld	r24, Z
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	48 f0       	brcs	.+18     	; 0xc7c <xTaskIncrementTick+0x172>
     c6a:	dd 24       	eor	r13, r13
     c6c:	d3 94       	inc	r13
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <xTaskIncrementTick+0x172>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     c70:	80 91 69 01 	lds	r24, 0x0169
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	80 93 69 01 	sts	0x0169, r24
     c7a:	dd 24       	eor	r13, r13
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     c7c:	80 91 63 01 	lds	r24, 0x0163
     c80:	88 23       	and	r24, r24
     c82:	11 f0       	breq	.+4      	; 0xc88 <xTaskIncrementTick+0x17e>
     c84:	dd 24       	eor	r13, r13
     c86:	d3 94       	inc	r13
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
     c88:	8d 2d       	mov	r24, r13
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	08 95       	ret

00000c9c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	f8 01       	movw	r30, r16
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
     ca6:	ec 01       	movw	r28, r24

		taskENTER_CRITICAL();
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
     cae:	01 15       	cp	r16, r1
     cb0:	11 05       	cpc	r17, r1
     cb2:	41 f0       	breq	.+16     	; 0xcc4 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
     cb4:	89 a1       	ldd	r24, Y+33	; 0x21
     cb6:	9a a1       	ldd	r25, Y+34	; 0x22
     cb8:	ab a1       	ldd	r26, Y+35	; 0x23
     cba:	bc a1       	ldd	r27, Y+36	; 0x24
     cbc:	80 83       	st	Z, r24
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	a2 83       	std	Z+2, r26	; 0x02
     cc2:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
     cc4:	3d a1       	ldd	r19, Y+37	; 0x25

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	99 f0       	breq	.+38     	; 0xcf4 <xTaskGenericNotify+0x58>
     cce:	23 30       	cpi	r18, 0x03	; 3
     cd0:	18 f4       	brcc	.+6      	; 0xcd8 <xTaskGenericNotify+0x3c>
     cd2:	21 30       	cpi	r18, 0x01	; 1
     cd4:	19 f5       	brne	.+70     	; 0xd1c <xTaskGenericNotify+0x80>
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <xTaskGenericNotify+0x46>
     cd8:	23 30       	cpi	r18, 0x03	; 3
     cda:	e1 f0       	breq	.+56     	; 0xd14 <xTaskGenericNotify+0x78>
     cdc:	24 30       	cpi	r18, 0x04	; 4
     cde:	f1 f4       	brne	.+60     	; 0xd1c <xTaskGenericNotify+0x80>
     ce0:	15 c0       	rjmp	.+42     	; 0xd0c <xTaskGenericNotify+0x70>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
     ce2:	89 a1       	ldd	r24, Y+33	; 0x21
     ce4:	9a a1       	ldd	r25, Y+34	; 0x22
     ce6:	ab a1       	ldd	r26, Y+35	; 0x23
     ce8:	bc a1       	ldd	r27, Y+36	; 0x24
     cea:	84 2b       	or	r24, r20
     cec:	95 2b       	or	r25, r21
     cee:	a6 2b       	or	r26, r22
     cf0:	b7 2b       	or	r27, r23
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <xTaskGenericNotify+0x66>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
     cf4:	89 a1       	ldd	r24, Y+33	; 0x21
     cf6:	9a a1       	ldd	r25, Y+34	; 0x22
     cf8:	ab a1       	ldd	r26, Y+35	; 0x23
     cfa:	bc a1       	ldd	r27, Y+36	; 0x24
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	a1 1d       	adc	r26, r1
     d00:	b1 1d       	adc	r27, r1
     d02:	89 a3       	std	Y+33, r24	; 0x21
     d04:	9a a3       	std	Y+34, r25	; 0x22
     d06:	ab a3       	std	Y+35, r26	; 0x23
     d08:	bc a3       	std	Y+36, r27	; 0x24
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <xTaskGenericNotify+0x80>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
     d0c:	32 30       	cpi	r19, 0x02	; 2
     d0e:	11 f4       	brne	.+4      	; 0xd14 <xTaskGenericNotify+0x78>
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	27 c0       	rjmp	.+78     	; 0xd62 <xTaskGenericNotify+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
     d14:	49 a3       	std	Y+33, r20	; 0x21
     d16:	5a a3       	std	Y+34, r21	; 0x22
     d18:	6b a3       	std	Y+35, r22	; 0x23
     d1a:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     d1c:	31 30       	cpi	r19, 0x01	; 1
     d1e:	01 f5       	brne	.+64     	; 0xd60 <xTaskGenericNotify+0xc4>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     d20:	8e 01       	movw	r16, r28
     d22:	0e 5f       	subi	r16, 0xFE	; 254
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	c8 01       	movw	r24, r16
     d28:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
     d2c:	9e 89       	ldd	r25, Y+22	; 0x16
     d2e:	80 91 62 01 	lds	r24, 0x0162
     d32:	89 17       	cp	r24, r25
     d34:	10 f4       	brcc	.+4      	; 0xd3a <xTaskGenericNotify+0x9e>
     d36:	90 93 62 01 	sts	0x0162, r25
     d3a:	89 e0       	ldi	r24, 0x09	; 9
     d3c:	98 9f       	mul	r25, r24
     d3e:	c0 01       	movw	r24, r0
     d40:	11 24       	eor	r1, r1
     d42:	80 59       	subi	r24, 0x90	; 144
     d44:	9e 4f       	sbci	r25, 0xFE	; 254
     d46:	b8 01       	movw	r22, r16
     d48:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     d4c:	e0 91 5f 01 	lds	r30, 0x015F
     d50:	f0 91 60 01 	lds	r31, 0x0160
     d54:	9e 89       	ldd	r25, Y+22	; 0x16
     d56:	86 89       	ldd	r24, Z+22	; 0x16
     d58:	89 17       	cp	r24, r25
     d5a:	10 f4       	brcc	.+4      	; 0xd60 <xTaskGenericNotify+0xc4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
     d5c:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
     d60:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     d82:	80 91 61 01 	lds	r24, 0x0161
     d86:	81 50       	subi	r24, 0x01	; 1
     d88:	80 93 61 01 	sts	0x0161, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     d8c:	80 91 61 01 	lds	r24, 0x0161
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <xTaskResumeAll+0x26>
     d94:	6c c0       	rjmp	.+216    	; 0xe6e <xTaskResumeAll+0xfe>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     d96:	80 91 6a 01 	lds	r24, 0x016A
     d9a:	88 23       	and	r24, r24
     d9c:	09 f4       	brne	.+2      	; 0xda0 <xTaskResumeAll+0x30>
     d9e:	67 c0       	rjmp	.+206    	; 0xe6e <xTaskResumeAll+0xfe>
     da0:	c0 e0       	ldi	r28, 0x00	; 0
     da2:	d0 e0       	ldi	r29, 0x00	; 0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
     da4:	59 e0       	ldi	r21, 0x09	; 9
     da6:	e5 2e       	mov	r14, r21

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
     da8:	ff 24       	eor	r15, r15
     daa:	f3 94       	inc	r15
     dac:	29 c0       	rjmp	.+82     	; 0xe00 <xTaskResumeAll+0x90>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     dae:	e0 91 af 01 	lds	r30, 0x01AF
     db2:	f0 91 b0 01 	lds	r31, 0x01B0
     db6:	c6 81       	ldd	r28, Z+6	; 0x06
     db8:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     dba:	ce 01       	movw	r24, r28
     dbc:	0c 96       	adiw	r24, 0x0c	; 12
     dbe:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     dc2:	8e 01       	movw	r16, r28
     dc4:	0e 5f       	subi	r16, 0xFE	; 254
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	c8 01       	movw	r24, r16
     dca:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     dce:	9e 89       	ldd	r25, Y+22	; 0x16
     dd0:	80 91 62 01 	lds	r24, 0x0162
     dd4:	89 17       	cp	r24, r25
     dd6:	10 f4       	brcc	.+4      	; 0xddc <xTaskResumeAll+0x6c>
     dd8:	90 93 62 01 	sts	0x0162, r25
     ddc:	9e 9d       	mul	r25, r14
     dde:	c0 01       	movw	r24, r0
     de0:	11 24       	eor	r1, r1
     de2:	80 59       	subi	r24, 0x90	; 144
     de4:	9e 4f       	sbci	r25, 0xFE	; 254
     de6:	b8 01       	movw	r22, r16
     de8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     dec:	e0 91 5f 01 	lds	r30, 0x015F
     df0:	f0 91 60 01 	lds	r31, 0x0160
     df4:	9e 89       	ldd	r25, Y+22	; 0x16
     df6:	86 89       	ldd	r24, Z+22	; 0x16
     df8:	98 17       	cp	r25, r24
     dfa:	10 f0       	brcs	.+4      	; 0xe00 <xTaskResumeAll+0x90>
					{
						xYieldPending = pdTRUE;
     dfc:	f0 92 63 01 	sts	0x0163, r15
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     e00:	80 91 aa 01 	lds	r24, 0x01AA
     e04:	88 23       	and	r24, r24
     e06:	99 f6       	brne	.-90     	; 0xdae <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
     e08:	cd 2b       	or	r28, r29
     e0a:	d1 f0       	breq	.+52     	; 0xe40 <xTaskResumeAll+0xd0>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     e0c:	e0 91 a6 01 	lds	r30, 0x01A6
     e10:	f0 91 a7 01 	lds	r31, 0x01A7
     e14:	80 81       	ld	r24, Z
     e16:	88 23       	and	r24, r24
     e18:	19 f4       	brne	.+6      	; 0xe20 <xTaskResumeAll+0xb0>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	0c c0       	rjmp	.+24     	; 0xe38 <xTaskResumeAll+0xc8>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     e20:	e0 91 a6 01 	lds	r30, 0x01A6
     e24:	f0 91 a7 01 	lds	r31, 0x01A7
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     e28:	05 80       	ldd	r0, Z+5	; 0x05
     e2a:	f6 81       	ldd	r31, Z+6	; 0x06
     e2c:	e0 2d       	mov	r30, r0
     e2e:	06 80       	ldd	r0, Z+6	; 0x06
     e30:	f7 81       	ldd	r31, Z+7	; 0x07
     e32:	e0 2d       	mov	r30, r0
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	90 93 67 01 	sts	0x0167, r25
     e3c:	80 93 66 01 	sts	0x0166, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     e40:	10 91 69 01 	lds	r17, 0x0169

					if( uxPendedCounts > ( UBaseType_t ) 0U )
     e44:	11 23       	and	r17, r17
     e46:	59 f0       	breq	.+22     	; 0xe5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
     e48:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
     e4a:	0e 94 85 05 	call	0xb0a	; 0xb0a <xTaskIncrementTick>
     e4e:	88 23       	and	r24, r24
     e50:	11 f0       	breq	.+4      	; 0xe56 <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
     e52:	00 93 63 01 	sts	0x0163, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
     e56:	11 50       	subi	r17, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
     e58:	c1 f7       	brne	.-16     	; 0xe4a <xTaskResumeAll+0xda>

						uxPendedTicks = 0;
     e5a:	10 92 69 01 	sts	0x0169, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
     e5e:	80 91 63 01 	lds	r24, 0x0163
     e62:	88 23       	and	r24, r24
     e64:	21 f0       	breq	.+8      	; 0xe6e <xTaskResumeAll+0xfe>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
     e66:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <xTaskResumeAll+0x100>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	08 95       	ret

00000e82 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	ec 01       	movw	r28, r24
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     e8c:	00 91 64 01 	lds	r16, 0x0164
     e90:	10 91 65 01 	lds	r17, 0x0165
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     e94:	80 91 5f 01 	lds	r24, 0x015F
     e98:	90 91 60 01 	lds	r25, 0x0160
     e9c:	02 96       	adiw	r24, 0x02	; 2
     e9e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
     ea2:	c0 0f       	add	r28, r16
     ea4:	d1 1f       	adc	r29, r17

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     ea6:	e0 91 5f 01 	lds	r30, 0x015F
     eaa:	f0 91 60 01 	lds	r31, 0x0160
     eae:	d3 83       	std	Z+3, r29	; 0x03
     eb0:	c2 83       	std	Z+2, r28	; 0x02

		if( xTimeToWake < xConstTickCount )
     eb2:	c0 17       	cp	r28, r16
     eb4:	d1 07       	cpc	r29, r17
     eb6:	68 f4       	brcc	.+26     	; 0xed2 <prvAddCurrentTaskToDelayedList+0x50>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     eb8:	80 91 a8 01 	lds	r24, 0x01A8
     ebc:	90 91 a9 01 	lds	r25, 0x01A9
     ec0:	60 91 5f 01 	lds	r22, 0x015F
     ec4:	70 91 60 01 	lds	r23, 0x0160
     ec8:	6e 5f       	subi	r22, 0xFE	; 254
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <vListInsert>
     ed0:	17 c0       	rjmp	.+46     	; 0xf00 <prvAddCurrentTaskToDelayedList+0x7e>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     ed2:	80 91 a6 01 	lds	r24, 0x01A6
     ed6:	90 91 a7 01 	lds	r25, 0x01A7
     eda:	60 91 5f 01 	lds	r22, 0x015F
     ede:	70 91 60 01 	lds	r23, 0x0160
     ee2:	6e 5f       	subi	r22, 0xFE	; 254
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
     eea:	80 91 66 01 	lds	r24, 0x0166
     eee:	90 91 67 01 	lds	r25, 0x0167
     ef2:	c8 17       	cp	r28, r24
     ef4:	d9 07       	cpc	r29, r25
     ef6:	20 f4       	brcc	.+8      	; 0xf00 <prvAddCurrentTaskToDelayedList+0x7e>
			{
				xNextTaskUnblockTime = xTimeToWake;
     ef8:	d0 93 67 01 	sts	0x0167, r29
     efc:	c0 93 66 01 	sts	0x0166, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
     f0a:	6f 92       	push	r6
     f0c:	7f 92       	push	r7
     f0e:	8f 92       	push	r8
     f10:	9f 92       	push	r9
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	5b 01       	movw	r10, r22
     f28:	6c 01       	movw	r12, r24
     f2a:	39 01       	movw	r6, r18
     f2c:	4a 01       	movw	r8, r20
     f2e:	e8 01       	movw	r28, r16
	BaseType_t xReturn;

		taskENTER_CRITICAL();
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
     f36:	e0 91 5f 01 	lds	r30, 0x015F
     f3a:	f0 91 60 01 	lds	r31, 0x0160
     f3e:	85 a1       	ldd	r24, Z+37	; 0x25
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	19 f1       	breq	.+70     	; 0xf8a <xTaskNotifyWait+0x80>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
     f44:	e0 91 5f 01 	lds	r30, 0x015F
     f48:	f0 91 60 01 	lds	r31, 0x0160
     f4c:	81 a1       	ldd	r24, Z+33	; 0x21
     f4e:	92 a1       	ldd	r25, Z+34	; 0x22
     f50:	a3 a1       	ldd	r26, Z+35	; 0x23
     f52:	b4 a1       	ldd	r27, Z+36	; 0x24
     f54:	a0 94       	com	r10
     f56:	b0 94       	com	r11
     f58:	c0 94       	com	r12
     f5a:	d0 94       	com	r13
     f5c:	8a 21       	and	r24, r10
     f5e:	9b 21       	and	r25, r11
     f60:	ac 21       	and	r26, r12
     f62:	bd 21       	and	r27, r13
     f64:	81 a3       	std	Z+33, r24	; 0x21
     f66:	92 a3       	std	Z+34, r25	; 0x22
     f68:	a3 a3       	std	Z+35, r26	; 0x23
     f6a:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
     f6c:	e0 91 5f 01 	lds	r30, 0x015F
     f70:	f0 91 60 01 	lds	r31, 0x0160
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
     f78:	e1 14       	cp	r14, r1
     f7a:	f1 04       	cpc	r15, r1
     f7c:	31 f0       	breq	.+12     	; 0xf8a <xTaskNotifyWait+0x80>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
     f7e:	c7 01       	movw	r24, r14
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	0e 94 41 07 	call	0xe82	; 0xe82 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
     f86:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
     f94:	20 97       	sbiw	r28, 0x00	; 0
     f96:	61 f0       	breq	.+24     	; 0xfb0 <xTaskNotifyWait+0xa6>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
     f98:	e0 91 5f 01 	lds	r30, 0x015F
     f9c:	f0 91 60 01 	lds	r31, 0x0160
     fa0:	81 a1       	ldd	r24, Z+33	; 0x21
     fa2:	92 a1       	ldd	r25, Z+34	; 0x22
     fa4:	a3 a1       	ldd	r26, Z+35	; 0x23
     fa6:	b4 a1       	ldd	r27, Z+36	; 0x24
     fa8:	88 83       	st	Y, r24
     faa:	99 83       	std	Y+1, r25	; 0x01
     fac:	aa 83       	std	Y+2, r26	; 0x02
     fae:	bb 83       	std	Y+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
     fb0:	e0 91 5f 01 	lds	r30, 0x015F
     fb4:	f0 91 60 01 	lds	r31, 0x0160
     fb8:	85 a1       	ldd	r24, Z+37	; 0x25
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <xTaskNotifyWait+0xb8>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	15 c0       	rjmp	.+42     	; 0xfec <xTaskNotifyWait+0xe2>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
     fc2:	e0 91 5f 01 	lds	r30, 0x015F
     fc6:	f0 91 60 01 	lds	r31, 0x0160
     fca:	81 a1       	ldd	r24, Z+33	; 0x21
     fcc:	92 a1       	ldd	r25, Z+34	; 0x22
     fce:	a3 a1       	ldd	r26, Z+35	; 0x23
     fd0:	b4 a1       	ldd	r27, Z+36	; 0x24
     fd2:	60 94       	com	r6
     fd4:	70 94       	com	r7
     fd6:	80 94       	com	r8
     fd8:	90 94       	com	r9
     fda:	86 21       	and	r24, r6
     fdc:	97 21       	and	r25, r7
     fde:	a8 21       	and	r26, r8
     fe0:	b9 21       	and	r27, r9
     fe2:	81 a3       	std	Z+33, r24	; 0x21
     fe4:	92 a3       	std	Z+34, r25	; 0x22
     fe6:	a3 a3       	std	Z+35, r26	; 0x23
     fe8:	b4 a3       	std	Z+36, r27	; 0x24
     fea:	81 e0       	ldi	r24, 0x01	; 1
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     fec:	e0 91 5f 01 	lds	r30, 0x015F
     ff0:	f0 91 60 01 	lds	r31, 0x0160
     ff4:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	9f 90       	pop	r9
    1010:	8f 90       	pop	r8
    1012:	7f 90       	pop	r7
    1014:	6f 90       	pop	r6
    1016:	08 95       	ret

00001018 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    1018:	1f 93       	push	r17
    101a:	18 2f       	mov	r17, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    1022:	e0 91 5f 01 	lds	r30, 0x015F
    1026:	f0 91 60 01 	lds	r31, 0x0160
    102a:	81 a1       	ldd	r24, Z+33	; 0x21
    102c:	92 a1       	ldd	r25, Z+34	; 0x22
    102e:	a3 a1       	ldd	r26, Z+35	; 0x23
    1030:	b4 a1       	ldd	r27, Z+36	; 0x24
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	a1 05       	cpc	r26, r1
    1036:	b1 05       	cpc	r27, r1
    1038:	79 f4       	brne	.+30     	; 0x1058 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    103a:	e0 91 5f 01 	lds	r30, 0x015F
    103e:	f0 91 60 01 	lds	r31, 0x0160
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    1046:	61 15       	cp	r22, r1
    1048:	71 05       	cpc	r23, r1
    104a:	31 f0       	breq	.+12     	; 0x1058 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    104c:	cb 01       	movw	r24, r22
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	0e 94 41 07 	call	0xe82	; 0xe82 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    1054:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    1062:	e0 91 5f 01 	lds	r30, 0x015F
    1066:	f0 91 60 01 	lds	r31, 0x0160
    106a:	21 a1       	ldd	r18, Z+33	; 0x21
    106c:	32 a1       	ldd	r19, Z+34	; 0x22
    106e:	43 a1       	ldd	r20, Z+35	; 0x23
    1070:	54 a1       	ldd	r21, Z+36	; 0x24

			if( ulReturn != 0UL )
    1072:	21 15       	cp	r18, r1
    1074:	31 05       	cpc	r19, r1
    1076:	41 05       	cpc	r20, r1
    1078:	51 05       	cpc	r21, r1
    107a:	d9 f0       	breq	.+54     	; 0x10b2 <ulTaskNotifyTake+0x9a>
			{
				if( xClearCountOnExit != pdFALSE )
    107c:	11 23       	and	r17, r17
    107e:	49 f0       	breq	.+18     	; 0x1092 <ulTaskNotifyTake+0x7a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    1080:	e0 91 5f 01 	lds	r30, 0x015F
    1084:	f0 91 60 01 	lds	r31, 0x0160
    1088:	11 a2       	std	Z+33, r1	; 0x21
    108a:	12 a2       	std	Z+34, r1	; 0x22
    108c:	13 a2       	std	Z+35, r1	; 0x23
    108e:	14 a2       	std	Z+36, r1	; 0x24
    1090:	10 c0       	rjmp	.+32     	; 0x10b2 <ulTaskNotifyTake+0x9a>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    1092:	e0 91 5f 01 	lds	r30, 0x015F
    1096:	f0 91 60 01 	lds	r31, 0x0160
    109a:	21 50       	subi	r18, 0x01	; 1
    109c:	30 40       	sbci	r19, 0x00	; 0
    109e:	40 40       	sbci	r20, 0x00	; 0
    10a0:	50 40       	sbci	r21, 0x00	; 0
    10a2:	21 a3       	std	Z+33, r18	; 0x21
    10a4:	32 a3       	std	Z+34, r19	; 0x22
    10a6:	43 a3       	std	Z+35, r20	; 0x23
    10a8:	54 a3       	std	Z+36, r21	; 0x24
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	4f 4f       	sbci	r20, 0xFF	; 255
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    10b2:	e0 91 5f 01 	lds	r30, 0x015F
    10b6:	f0 91 60 01 	lds	r31, 0x0160
    10ba:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    10c0:	b9 01       	movw	r22, r18
    10c2:	ca 01       	movw	r24, r20
    10c4:	1f 91       	pop	r17
    10c6:	08 95       	ret

000010c8 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	8a 01       	movw	r16, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    10ce:	e0 91 5f 01 	lds	r30, 0x015F
    10d2:	f0 91 60 01 	lds	r31, 0x0160
    10d6:	70 68       	ori	r23, 0x80	; 128
    10d8:	75 87       	std	Z+13, r23	; 0x0d
    10da:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    10dc:	60 91 5f 01 	lds	r22, 0x015F
    10e0:	70 91 60 01 	lds	r23, 0x0160
    10e4:	64 5f       	subi	r22, 0xF4	; 244
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    10ec:	c8 01       	movw	r24, r16
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	0e 94 41 07 	call	0xe82	; 0xe82 <prvAddCurrentTaskToDelayedList>
}
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    10fa:	9c 01       	movw	r18, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	69 f0       	breq	.+26     	; 0x111a <vTaskDelay+0x20>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1100:	80 91 61 01 	lds	r24, 0x0161
    1104:	8f 5f       	subi	r24, 0xFF	; 255
    1106:	80 93 61 01 	sts	0x0161, r24
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    110a:	c9 01       	movw	r24, r18
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	0e 94 41 07 	call	0xe82	; 0xe82 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1112:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1116:	88 23       	and	r24, r24
    1118:	11 f4       	brne	.+4      	; 0x111e <vTaskDelay+0x24>
		{
			portYIELD_WITHIN_API();
    111a:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
    111e:	08 95       	ret

00001120 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    1120:	fc 01       	movw	r30, r24
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1122:	80 91 61 01 	lds	r24, 0x0161
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 93 61 01 	sts	0x0161, r24

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    112c:	40 91 64 01 	lds	r20, 0x0164
    1130:	50 91 65 01 	lds	r21, 0x0165

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1134:	20 81       	ld	r18, Z
    1136:	31 81       	ldd	r19, Z+1	; 0x01
    1138:	62 0f       	add	r22, r18
    113a:	73 1f       	adc	r23, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    113c:	42 17       	cp	r20, r18
    113e:	53 07       	cpc	r21, r19
    1140:	28 f4       	brcc	.+10     	; 0x114c <vTaskDelayUntil+0x2c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    1142:	62 17       	cp	r22, r18
    1144:	73 07       	cpc	r23, r19
    1146:	28 f0       	brcs	.+10     	; 0x1152 <vTaskDelayUntil+0x32>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 c0       	rjmp	.+16     	; 0x115c <vTaskDelayUntil+0x3c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    114c:	62 17       	cp	r22, r18
    114e:	73 07       	cpc	r23, r19
    1150:	20 f0       	brcs	.+8      	; 0x115a <vTaskDelayUntil+0x3a>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	46 17       	cp	r20, r22
    1156:	57 07       	cpc	r21, r23
    1158:	08 f4       	brcc	.+2      	; 0x115c <vTaskDelayUntil+0x3c>
    115a:	81 e0       	ldi	r24, 0x01	; 1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    115c:	71 83       	std	Z+1, r23	; 0x01
    115e:	60 83       	st	Z, r22

			if( xShouldDelay != pdFALSE )
    1160:	88 23       	and	r24, r24
    1162:	31 f0       	breq	.+12     	; 0x1170 <vTaskDelayUntil+0x50>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    1164:	cb 01       	movw	r24, r22
    1166:	84 1b       	sub	r24, r20
    1168:	95 0b       	sbc	r25, r21
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	0e 94 41 07 	call	0xe82	; 0xe82 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1170:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1174:	88 23       	and	r24, r24
    1176:	11 f4       	brne	.+4      	; 0x117c <vTaskDelayUntil+0x5c>
		{
			portYIELD_WITHIN_API();
    1178:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
    117c:	08 95       	ret

0000117e <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	8b 01       	movw	r16, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1184:	60 91 5f 01 	lds	r22, 0x015F
    1188:	70 91 60 01 	lds	r23, 0x0160
    118c:	64 5f       	subi	r22, 0xF4	; 244
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1194:	c8 01       	movw	r24, r16
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	0e 94 41 07 	call	0xe82	; 0xe82 <prvAddCurrentTaskToDelayedList>
}
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	08 95       	ret

000011a2 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    11a2:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    11a4:	10 92 6b 01 	sts	0x016B, r1
	vPortEndScheduler();
    11a8:	0e 94 c0 11 	call	0x2380	; 0x2380 <vPortEndScheduler>
}
    11ac:	08 95       	ret

000011ae <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	2c c0       	rjmp	.+88     	; 0x120c <prvIdleTask+0x5e>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    11b4:	80 91 61 01 	lds	r24, 0x0161
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	80 93 61 01 	sts	0x0161, r24
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    11be:	10 91 b3 01 	lds	r17, 0x01B3
			}
			( void ) xTaskResumeAll();
    11c2:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    11c6:	11 23       	and	r17, r17
    11c8:	09 f1       	breq	.+66     	; 0x120c <prvIdleTask+0x5e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    11d0:	e0 91 b8 01 	lds	r30, 0x01B8
    11d4:	f0 91 b9 01 	lds	r31, 0x01B9
    11d8:	06 81       	ldd	r16, Z+6	; 0x06
    11da:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    11dc:	c8 01       	movw	r24, r16
    11de:	02 96       	adiw	r24, 0x02	; 2
    11e0:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
					--uxCurrentNumberOfTasks;
    11e4:	80 91 6a 01 	lds	r24, 0x016A
    11e8:	81 50       	subi	r24, 0x01	; 1
    11ea:	80 93 6a 01 	sts	0x016A, r24
					--uxDeletedTasksWaitingCleanUp;
    11ee:	80 91 6e 01 	lds	r24, 0x016E
    11f2:	81 50       	subi	r24, 0x01	; 1
    11f4:	80 93 6e 01 	sts	0x016E, r24
				}
				taskEXIT_CRITICAL();
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    11fc:	f8 01       	movw	r30, r16
    11fe:	87 89       	ldd	r24, Z+23	; 0x17
    1200:	90 8d       	ldd	r25, Z+24	; 0x18
    1202:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vPortFree>
			vPortFree( pxTCB );
    1206:	c8 01       	movw	r24, r16
    1208:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    120c:	80 91 6e 01 	lds	r24, 0x016E
    1210:	88 23       	and	r24, r24
    1212:	81 f6       	brne	.-96     	; 0x11b4 <prvIdleTask+0x6>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1214:	80 91 70 01 	lds	r24, 0x0170
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	10 f0       	brcs	.+4      	; 0x1220 <prvIdleTask+0x72>
			{
				taskYIELD();
    121c:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    1220:	0e 94 53 00 	call	0xa6	; 0xa6 <vApplicationIdleHook>
    1224:	f3 cf       	rjmp	.-26     	; 0x120c <prvIdleTask+0x5e>

00001226 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	29 f4       	brne	.+10     	; 0x1242 <vTaskDelete+0x1c>
    1238:	c0 91 5f 01 	lds	r28, 0x015F
    123c:	d0 91 60 01 	lds	r29, 0x0160
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <vTaskDelete+0x1e>
    1242:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1244:	8e 01       	movw	r16, r28
    1246:	0e 5f       	subi	r16, 0xFE	; 254
    1248:	1f 4f       	sbci	r17, 0xFF	; 255
    124a:	c8 01       	movw	r24, r16
    124c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1250:	8c 89       	ldd	r24, Y+20	; 0x14
    1252:	9d 89       	ldd	r25, Y+21	; 0x15
    1254:	89 2b       	or	r24, r25
    1256:	21 f0       	breq	.+8      	; 0x1260 <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1258:	ce 01       	movw	r24, r28
    125a:	0c 96       	adiw	r24, 0x0c	; 12
    125c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    1260:	80 91 6f 01 	lds	r24, 0x016F
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	80 93 6f 01 	sts	0x016F, r24

			if( pxTCB == pxCurrentTCB )
    126a:	80 91 5f 01 	lds	r24, 0x015F
    126e:	90 91 60 01 	lds	r25, 0x0160
    1272:	c8 17       	cp	r28, r24
    1274:	d9 07       	cpc	r29, r25
    1276:	59 f4       	brne	.+22     	; 0x128e <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    1278:	83 eb       	ldi	r24, 0xB3	; 179
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	b8 01       	movw	r22, r16
    127e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    1282:	80 91 6e 01 	lds	r24, 0x016E
    1286:	8f 5f       	subi	r24, 0xFF	; 255
    1288:	80 93 6e 01 	sts	0x016E, r24
    128c:	26 c0       	rjmp	.+76     	; 0x12da <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    128e:	80 91 6a 01 	lds	r24, 0x016A
    1292:	81 50       	subi	r24, 0x01	; 1
    1294:	80 93 6a 01 	sts	0x016A, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    1298:	8f 89       	ldd	r24, Y+23	; 0x17
    129a:	98 8d       	ldd	r25, Y+24	; 0x18
    129c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vPortFree>
			vPortFree( pxTCB );
    12a0:	ce 01       	movw	r24, r28
    12a2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vPortFree>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    12a6:	e0 91 a6 01 	lds	r30, 0x01A6
    12aa:	f0 91 a7 01 	lds	r31, 0x01A7
    12ae:	80 81       	ld	r24, Z
    12b0:	88 23       	and	r24, r24
    12b2:	19 f4       	brne	.+6      	; 0x12ba <vTaskDelete+0x94>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	9f ef       	ldi	r25, 0xFF	; 255
    12b8:	0c c0       	rjmp	.+24     	; 0x12d2 <vTaskDelete+0xac>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    12ba:	e0 91 a6 01 	lds	r30, 0x01A6
    12be:	f0 91 a7 01 	lds	r31, 0x01A7
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    12c2:	05 80       	ldd	r0, Z+5	; 0x05
    12c4:	f6 81       	ldd	r31, Z+6	; 0x06
    12c6:	e0 2d       	mov	r30, r0
    12c8:	06 80       	ldd	r0, Z+6	; 0x06
    12ca:	f7 81       	ldd	r31, Z+7	; 0x07
    12cc:	e0 2d       	mov	r30, r0
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	90 93 67 01 	sts	0x0167, r25
    12d6:	80 93 66 01 	sts	0x0166, r24
				prvResetNextTaskUnblockTime();
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    12de:	80 91 6b 01 	lds	r24, 0x016B
    12e2:	88 23       	and	r24, r24
    12e4:	49 f0       	breq	.+18     	; 0x12f8 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    12e6:	80 91 5f 01 	lds	r24, 0x015F
    12ea:	90 91 60 01 	lds	r25, 0x0160
    12ee:	c8 17       	cp	r28, r24
    12f0:	d9 07       	cpc	r29, r25
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    12f4:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1302:	4f 92       	push	r4
    1304:	5f 92       	push	r5
    1306:	6f 92       	push	r6
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	2c 01       	movw	r4, r24
    1324:	16 2f       	mov	r17, r22
    1326:	97 2e       	mov	r9, r23
    1328:	6a 01       	movw	r12, r20
    132a:	39 01       	movw	r6, r18
    132c:	57 01       	movw	r10, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    132e:	ca 01       	movw	r24, r20
    1330:	0e 94 0c 11 	call	0x2218	; 0x2218 <pvPortMalloc>
    1334:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	99 f0       	breq	.+38     	; 0x1360 <xTaskCreate+0x5e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    133a:	86 e2       	ldi	r24, 0x26	; 38
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 0c 11 	call	0x2218	; 0x2218 <pvPortMalloc>
    1342:	ec 01       	movw	r28, r24

				if( pxNewTCB != NULL )
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	49 f0       	breq	.+18     	; 0x135a <xTaskCreate+0x58>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1348:	f8 8e       	std	Y+24, r15	; 0x18
    134a:	ef 8a       	std	Y+23, r14	; 0x17
    134c:	81 2f       	mov	r24, r17
    134e:	99 2d       	mov	r25, r9
    1350:	9c 01       	movw	r18, r24
    1352:	f9 01       	movw	r30, r18
    1354:	de 01       	movw	r26, r28
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <xTaskCreate+0x62>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    135a:	c7 01       	movw	r24, r14
    135c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vPortFree>
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	b7 c0       	rjmp	.+366    	; 0x14d2 <xTaskCreate+0x1d0>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1364:	80 81       	ld	r24, Z
    1366:	59 96       	adiw	r26, 0x19	; 25
    1368:	8c 93       	st	X, r24
    136a:	59 97       	sbiw	r26, 0x19	; 25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    136c:	80 81       	ld	r24, Z
    136e:	88 23       	and	r24, r24
    1370:	29 f0       	breq	.+10     	; 0x137c <xTaskCreate+0x7a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1372:	9f 5f       	subi	r25, 0xFF	; 255
    1374:	31 96       	adiw	r30, 0x01	; 1
    1376:	11 96       	adiw	r26, 0x01	; 1
    1378:	98 30       	cpi	r25, 0x08	; 8
    137a:	a1 f7       	brne	.-24     	; 0x1364 <xTaskCreate+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    137c:	18 a2       	std	Y+32, r1	; 0x20
    137e:	04 30       	cpi	r16, 0x04	; 4
    1380:	08 f0       	brcs	.+2      	; 0x1384 <xTaskCreate+0x82>
    1382:	03 e0       	ldi	r16, 0x03	; 3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    1384:	0e 8b       	std	Y+22, r16	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1386:	72 e0       	ldi	r23, 0x02	; 2
    1388:	87 2e       	mov	r8, r23
    138a:	91 2c       	mov	r9, r1
    138c:	8c 0e       	add	r8, r28
    138e:	9d 1e       	adc	r9, r29
    1390:	c4 01       	movw	r24, r8
    1392:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    1396:	ce 01       	movw	r24, r28
    1398:	0c 96       	adiw	r24, 0x0c	; 12
    139a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    139e:	d9 87       	std	Y+9, r29	; 0x09
    13a0:	c8 87       	std	Y+8, r28	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    13a2:	84 e0       	ldi	r24, 0x04	; 4
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	80 1b       	sub	r24, r16
    13a8:	91 09       	sbc	r25, r1
    13aa:	9d 87       	std	Y+13, r25	; 0x0d
    13ac:	8c 87       	std	Y+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    13ae:	db 8b       	std	Y+19, r29	; 0x13
    13b0:	ca 8b       	std	Y+18, r28	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    13b2:	19 a2       	std	Y+33, r1	; 0x21
    13b4:	1a a2       	std	Y+34, r1	; 0x22
    13b6:	1b a2       	std	Y+35, r1	; 0x23
    13b8:	1c a2       	std	Y+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    13ba:	1d a2       	std	Y+37, r1	; 0x25
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    13bc:	08 94       	sec
    13be:	c1 08       	sbc	r12, r1
    13c0:	d1 08       	sbc	r13, r1
    13c2:	c7 01       	movw	r24, r14
    13c4:	8c 0d       	add	r24, r12
    13c6:	9d 1d       	adc	r25, r13
    13c8:	b2 01       	movw	r22, r4
    13ca:	a3 01       	movw	r20, r6
    13cc:	0e 94 3e 11 	call	0x227c	; 0x227c <pxPortInitialiseStack>
    13d0:	99 83       	std	Y+1, r25	; 0x01
    13d2:	88 83       	st	Y, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    13d4:	a1 14       	cp	r10, r1
    13d6:	b1 04       	cpc	r11, r1
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <xTaskCreate+0xde>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    13da:	f5 01       	movw	r30, r10
    13dc:	d1 83       	std	Z+1, r29	; 0x01
    13de:	c0 83       	st	Z, r28

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    13e6:	80 91 6a 01 	lds	r24, 0x016A
    13ea:	8f 5f       	subi	r24, 0xFF	; 255
    13ec:	80 93 6a 01 	sts	0x016A, r24
		if( pxCurrentTCB == NULL )
    13f0:	80 91 5f 01 	lds	r24, 0x015F
    13f4:	90 91 60 01 	lds	r25, 0x0160
    13f8:	89 2b       	or	r24, r25
    13fa:	a9 f5       	brne	.+106    	; 0x1466 <xTaskCreate+0x164>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    13fc:	d0 93 60 01 	sts	0x0160, r29
    1400:	c0 93 5f 01 	sts	0x015F, r28

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1404:	80 91 6a 01 	lds	r24, 0x016A
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	e9 f5       	brne	.+122    	; 0x1486 <xTaskCreate+0x184>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    140c:	80 e7       	ldi	r24, 0x70	; 112
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
    1414:	89 e7       	ldi	r24, 0x79	; 121
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
    141c:	82 e8       	ldi	r24, 0x82	; 130
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
    1424:	8b e8       	ldi	r24, 0x8B	; 139
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
    142c:	64 e9       	ldi	r22, 0x94	; 148
    142e:	e6 2e       	mov	r14, r22
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	f6 2e       	mov	r15, r22
    1434:	c7 01       	movw	r24, r14
    1436:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    143a:	0d e9       	ldi	r16, 0x9D	; 157
    143c:	11 e0       	ldi	r17, 0x01	; 1
    143e:	c8 01       	movw	r24, r16
    1440:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
    1444:	8a ea       	ldi	r24, 0xAA	; 170
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    144c:	83 eb       	ldi	r24, 0xB3	; 179
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1454:	f0 92 a7 01 	sts	0x01A7, r15
    1458:	e0 92 a6 01 	sts	0x01A6, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    145c:	10 93 a9 01 	sts	0x01A9, r17
    1460:	00 93 a8 01 	sts	0x01A8, r16
    1464:	10 c0       	rjmp	.+32     	; 0x1486 <xTaskCreate+0x184>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    1466:	80 91 6b 01 	lds	r24, 0x016B
    146a:	88 23       	and	r24, r24
    146c:	61 f4       	brne	.+24     	; 0x1486 <xTaskCreate+0x184>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    146e:	e0 91 5f 01 	lds	r30, 0x015F
    1472:	f0 91 60 01 	lds	r31, 0x0160
    1476:	96 89       	ldd	r25, Z+22	; 0x16
    1478:	8e 89       	ldd	r24, Y+22	; 0x16
    147a:	89 17       	cp	r24, r25
    147c:	20 f0       	brcs	.+8      	; 0x1486 <xTaskCreate+0x184>
				{
					pxCurrentTCB = pxNewTCB;
    147e:	d0 93 60 01 	sts	0x0160, r29
    1482:	c0 93 5f 01 	sts	0x015F, r28
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    1486:	80 91 6f 01 	lds	r24, 0x016F
    148a:	8f 5f       	subi	r24, 0xFF	; 255
    148c:	80 93 6f 01 	sts	0x016F, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    1490:	9e 89       	ldd	r25, Y+22	; 0x16
    1492:	80 91 62 01 	lds	r24, 0x0162
    1496:	89 17       	cp	r24, r25
    1498:	10 f4       	brcc	.+4      	; 0x149e <xTaskCreate+0x19c>
    149a:	90 93 62 01 	sts	0x0162, r25
    149e:	89 e0       	ldi	r24, 0x09	; 9
    14a0:	98 9f       	mul	r25, r24
    14a2:	c0 01       	movw	r24, r0
    14a4:	11 24       	eor	r1, r1
    14a6:	80 59       	subi	r24, 0x90	; 144
    14a8:	9e 4f       	sbci	r25, 0xFE	; 254
    14aa:	b4 01       	movw	r22, r8
    14ac:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    14b4:	80 91 6b 01 	lds	r24, 0x016B
    14b8:	88 23       	and	r24, r24
    14ba:	51 f0       	breq	.+20     	; 0x14d0 <xTaskCreate+0x1ce>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    14bc:	e0 91 5f 01 	lds	r30, 0x015F
    14c0:	f0 91 60 01 	lds	r31, 0x0160
    14c4:	96 89       	ldd	r25, Z+22	; 0x16
    14c6:	8e 89       	ldd	r24, Y+22	; 0x16
    14c8:	98 17       	cp	r25, r24
    14ca:	10 f4       	brcc	.+4      	; 0x14d0 <xTaskCreate+0x1ce>
		{
			taskYIELD_IF_USING_PREEMPTION();
    14cc:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
    14d0:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	8f 90       	pop	r8
    14ea:	7f 90       	pop	r7
    14ec:	6f 90       	pop	r6
    14ee:	5f 90       	pop	r5
    14f0:	4f 90       	pop	r4
    14f2:	08 95       	ret

000014f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    14fa:	87 ed       	ldi	r24, 0xD7	; 215
    14fc:	98 e0       	ldi	r25, 0x08	; 8
    14fe:	6f e1       	ldi	r22, 0x1F	; 31
    1500:	71 e0       	ldi	r23, 0x01	; 1
    1502:	45 e5       	ldi	r20, 0x55	; 85
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	00 e0       	ldi	r16, 0x00	; 0
    150c:	ec e6       	ldi	r30, 0x6C	; 108
    150e:	ee 2e       	mov	r14, r30
    1510:	e1 e0       	ldi	r30, 0x01	; 1
    1512:	fe 2e       	mov	r15, r30
    1514:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	81 f4       	brne	.+32     	; 0x153c <vTaskStartScheduler+0x48>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    151c:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	9f ef       	ldi	r25, 0xFF	; 255
    1522:	90 93 67 01 	sts	0x0167, r25
    1526:	80 93 66 01 	sts	0x0166, r24
		xSchedulerRunning = pdTRUE;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	80 93 6b 01 	sts	0x016B, r24
		xTickCount = ( TickType_t ) 0U;
    1530:	10 92 65 01 	sts	0x0165, r1
    1534:	10 92 64 01 	sts	0x0164, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1538:	0e 94 86 11 	call	0x230c	; 0x230c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	08 95       	ret

00001544 <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    154a:	fc 01       	movw	r30, r24
    154c:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1552:	08 95       	ret

00001554 <uxQueueSpacesAvailable>:
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    1554:	fc 01       	movw	r30, r24
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    155c:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	83 8d       	ldd	r24, Z+27	; 0x1b

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1564:	89 1b       	sub	r24, r25
    1566:	08 95       	ret

00001568 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1568:	fc 01       	movw	r30, r24
    156a:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    156c:	08 95       	ret

0000156e <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    156e:	fc 01       	movw	r30, r24
    1570:	82 8d       	ldd	r24, Z+26	; 0x1a
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 23       	and	r24, r24
    1576:	09 f4       	brne	.+2      	; 0x157a <xQueueIsQueueEmptyFromISR+0xc>
    1578:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    157a:	89 2f       	mov	r24, r25
    157c:	08 95       	ret

0000157e <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    157e:	fc 01       	movw	r30, r24
    1580:	92 8d       	ldd	r25, Z+26	; 0x1a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	83 8d       	ldd	r24, Z+27	; 0x1b
    1586:	98 17       	cp	r25, r24
    1588:	09 f4       	brne	.+2      	; 0x158c <xQueueIsQueueFullFromISR+0xe>
    158a:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    158c:	82 2f       	mov	r24, r18
    158e:	08 95       	ret

00001590 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	ec 01       	movw	r28, r24
    159a:	04 2f       	mov	r16, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    159c:	1a 8d       	ldd	r17, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    159e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    15a0:	44 23       	and	r20, r20
    15a2:	c1 f1       	breq	.+112    	; 0x1614 <prvCopyDataToQueue+0x84>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    15a4:	00 23       	and	r16, r16
    15a6:	b1 f4       	brne	.+44     	; 0x15d4 <prvCopyDataToQueue+0x44>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	0e 94 89 15 	call	0x2b12	; 0x2b12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    15b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15b4:	2c 81       	ldd	r18, Y+4	; 0x04
    15b6:	3d 81       	ldd	r19, Y+5	; 0x05
    15b8:	28 0f       	add	r18, r24
    15ba:	31 1d       	adc	r19, r1
    15bc:	3d 83       	std	Y+5, r19	; 0x05
    15be:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	28 17       	cp	r18, r24
    15c6:	39 07       	cpc	r19, r25
    15c8:	28 f1       	brcs	.+74     	; 0x1614 <prvCopyDataToQueue+0x84>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    15ca:	88 81       	ld	r24, Y
    15cc:	99 81       	ldd	r25, Y+1	; 0x01
    15ce:	9d 83       	std	Y+5, r25	; 0x05
    15d0:	8c 83       	std	Y+4, r24	; 0x04
    15d2:	20 c0       	rjmp	.+64     	; 0x1614 <prvCopyDataToQueue+0x84>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15d4:	8e 81       	ldd	r24, Y+6	; 0x06
    15d6:	9f 81       	ldd	r25, Y+7	; 0x07
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	0e 94 89 15 	call	0x2b12	; 0x2b12 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    15de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	44 27       	eor	r20, r20
    15e4:	55 27       	eor	r21, r21
    15e6:	48 1b       	sub	r20, r24
    15e8:	59 0b       	sbc	r21, r25
    15ea:	8e 81       	ldd	r24, Y+6	; 0x06
    15ec:	9f 81       	ldd	r25, Y+7	; 0x07
    15ee:	84 0f       	add	r24, r20
    15f0:	95 1f       	adc	r25, r21
    15f2:	9f 83       	std	Y+7, r25	; 0x07
    15f4:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15f6:	28 81       	ld	r18, Y
    15f8:	39 81       	ldd	r19, Y+1	; 0x01
    15fa:	82 17       	cp	r24, r18
    15fc:	93 07       	cpc	r25, r19
    15fe:	30 f4       	brcc	.+12     	; 0x160c <prvCopyDataToQueue+0x7c>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	9b 81       	ldd	r25, Y+3	; 0x03
    1604:	84 0f       	add	r24, r20
    1606:	95 1f       	adc	r25, r21
    1608:	9f 83       	std	Y+7, r25	; 0x07
    160a:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    160c:	02 30       	cpi	r16, 0x02	; 2
    160e:	11 f4       	brne	.+4      	; 0x1614 <prvCopyDataToQueue+0x84>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1610:	11 11       	cpse	r17, r1
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    1612:	11 50       	subi	r17, 0x01	; 1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    1614:	1f 5f       	subi	r17, 0xFF	; 255
    1616:	1a 8f       	std	Y+26, r17	; 0x1a

	return xReturn;
}
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret

00001624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1624:	fc 01       	movw	r30, r24
    1626:	56 2f       	mov	r21, r22
    1628:	a7 2f       	mov	r26, r23
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    162a:	24 8d       	ldd	r18, Z+28	; 0x1c
    162c:	22 23       	and	r18, r18
    162e:	b9 f0       	breq	.+46     	; 0x165e <prvCopyDataFromQueue+0x3a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1630:	86 81       	ldd	r24, Z+6	; 0x06
    1632:	97 81       	ldd	r25, Z+7	; 0x07
    1634:	82 0f       	add	r24, r18
    1636:	91 1d       	adc	r25, r1
    1638:	97 83       	std	Z+7, r25	; 0x07
    163a:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    163c:	22 81       	ldd	r18, Z+2	; 0x02
    163e:	33 81       	ldd	r19, Z+3	; 0x03
    1640:	82 17       	cp	r24, r18
    1642:	93 07       	cpc	r25, r19
    1644:	20 f0       	brcs	.+8      	; 0x164e <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1646:	80 81       	ld	r24, Z
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	97 83       	std	Z+7, r25	; 0x07
    164c:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    164e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1650:	66 81       	ldd	r22, Z+6	; 0x06
    1652:	77 81       	ldd	r23, Z+7	; 0x07
    1654:	85 2f       	mov	r24, r21
    1656:	9a 2f       	mov	r25, r26
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <memcpy>
    165e:	08 95       	ret

00001660 <xQueuePeekFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1668:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    166a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    166c:	88 23       	and	r24, r24
    166e:	41 f0       	breq	.+16     	; 0x1680 <xQueuePeekFromISR+0x20>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1670:	0e 81       	ldd	r16, Y+6	; 0x06
    1672:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1674:	ce 01       	movw	r24, r28
    1676:	0e 94 12 0b 	call	0x1624	; 0x1624 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    167a:	1f 83       	std	Y+7, r17	; 0x07
    167c:	0e 83       	std	Y+6, r16	; 0x06
    167e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	08 95       	ret

0000168a <xQueueCRReceiveFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )
	{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	fb 01       	movw	r30, r22
    1694:	8a 01       	movw	r16, r20
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1696:	ec 01       	movw	r28, r24

		/* We cannot block from an ISR, so check there is data available. If
		not then just leave without doing anything. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1698:	8a 8d       	ldd	r24, Y+26	; 0x1a
    169a:	88 23       	and	r24, r24
    169c:	61 f1       	breq	.+88     	; 0x16f6 <xQueueCRReceiveFromISR+0x6c>
		{
			/* Copy the data from the queue. */
			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    169e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16a0:	2e 81       	ldd	r18, Y+6	; 0x06
    16a2:	3f 81       	ldd	r19, Y+7	; 0x07
    16a4:	28 0f       	add	r18, r24
    16a6:	31 1d       	adc	r19, r1
    16a8:	3f 83       	std	Y+7, r19	; 0x07
    16aa:	2e 83       	std	Y+6, r18	; 0x06
			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	9b 81       	ldd	r25, Y+3	; 0x03
    16b0:	28 17       	cp	r18, r24
    16b2:	39 07       	cpc	r19, r25
    16b4:	20 f0       	brcs	.+8      	; 0x16be <xQueueCRReceiveFromISR+0x34>
			{
				pxQueue->u.pcReadFrom = pxQueue->pcHead;
    16b6:	88 81       	ld	r24, Y
    16b8:	99 81       	ldd	r25, Y+1	; 0x01
    16ba:	9f 83       	std	Y+7, r25	; 0x07
    16bc:	8e 83       	std	Y+6, r24	; 0x06
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			--( pxQueue->uxMessagesWaiting );
    16be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	8a 8f       	std	Y+26, r24	; 0x1a
			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    16c4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    16c6:	6e 81       	ldd	r22, Y+6	; 0x06
    16c8:	7f 81       	ldd	r23, Y+7	; 0x07
    16ca:	cf 01       	movw	r24, r30
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	0e 94 89 15 	call	0x2b12	; 0x2b12 <memcpy>

			if( ( *pxCoRoutineWoken ) == pdFALSE )
    16d2:	f8 01       	movw	r30, r16
    16d4:	80 81       	ld	r24, Z
    16d6:	88 23       	and	r24, r24
    16d8:	69 f4       	brne	.+26     	; 0x16f4 <xQueueCRReceiveFromISR+0x6a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16da:	88 85       	ldd	r24, Y+8	; 0x08
    16dc:	88 23       	and	r24, r24
    16de:	51 f0       	breq	.+20     	; 0x16f4 <xQueueCRReceiveFromISR+0x6a>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    16e0:	ce 01       	movw	r24, r28
    16e2:	08 96       	adiw	r24, 0x08	; 8
    16e4:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <xCoRoutineRemoveFromEventList>
    16e8:	88 23       	and	r24, r24
    16ea:	21 f0       	breq	.+8      	; 0x16f4 <xQueueCRReceiveFromISR+0x6a>
					{
						*pxCoRoutineWoken = pdTRUE;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	f8 01       	movw	r30, r16
    16f0:	80 83       	st	Z, r24
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <xQueueCRReceiveFromISR+0x6c>
    16f4:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	08 95       	ret

00001700 <xQueueCRSendFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )
	{
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	14 2f       	mov	r17, r20
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1708:	ec 01       	movw	r28, r24

		/* Cannot block within an ISR so if there is no space on the queue then
		exit without doing anything. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    170a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    170c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170e:	98 17       	cp	r25, r24
    1710:	88 f4       	brcc	.+34     	; 0x1734 <xQueueCRSendFromISR+0x34>
		{
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    1712:	ce 01       	movw	r24, r28
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	0e 94 c8 0a 	call	0x1590	; 0x1590 <prvCopyDataToQueue>

			/* We only want to wake one co-routine per ISR, so check that a
			co-routine has not already been woken. */
			if( xCoRoutinePreviouslyWoken == pdFALSE )
    171a:	11 23       	and	r17, r17
    171c:	59 f4       	brne	.+22     	; 0x1734 <xQueueCRSendFromISR+0x34>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    171e:	89 89       	ldd	r24, Y+17	; 0x11
    1720:	88 23       	and	r24, r24
    1722:	41 f0       	breq	.+16     	; 0x1734 <xQueueCRSendFromISR+0x34>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1724:	ce 01       	movw	r24, r28
    1726:	41 96       	adiw	r24, 0x11	; 17
    1728:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <xCoRoutineRemoveFromEventList>
    172c:	48 2f       	mov	r20, r24
    172e:	81 11       	cpse	r24, r1
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	14 2f       	mov	r17, r20
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xCoRoutinePreviouslyWoken;
	}
    1734:	81 2f       	mov	r24, r17
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	08 95       	ret

0000173e <xQueueCRReceive>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
	{
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	fb 01       	movw	r30, r22
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1744:	ec 01       	movw	r28, r24

		/* If the queue is already empty we may have to block.  A critical section
		is required to prevent an interrupt adding something to the queue
		between the check to see if the queue is empty and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    1746:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1748:	8a 8d       	ldd	r24, Y+26	; 0x1a
    174a:	88 23       	and	r24, r24
    174c:	71 f4       	brne	.+28     	; 0x176a <xQueueCRReceive+0x2c>
			{
				/* There are no messages in the queue, do we want to block or just
				leave with nothing? */
				if( xTicksToWait > ( TickType_t ) 0 )
    174e:	41 15       	cp	r20, r1
    1750:	51 05       	cpc	r21, r1
    1752:	41 f0       	breq	.+16     	; 0x1764 <xQueueCRReceive+0x26>
				{
					/* As this is a co-routine we cannot block directly, but return
					indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    1754:	61 96       	adiw	r28, 0x11	; 17
    1756:	ca 01       	movw	r24, r20
    1758:	be 01       	movw	r22, r28
    175a:	0e 94 45 10 	call	0x208a	; 0x208a <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    175e:	78 94       	sei
    1760:	8c ef       	ldi	r24, 0xFC	; 252
    1762:	2f c0       	rjmp	.+94     	; 0x17c2 <xQueueCRReceive+0x84>
					return errQUEUE_BLOCKED;
				}
				else
				{
					portENABLE_INTERRUPTS();
    1764:	78 94       	sei
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	2c c0       	rjmp	.+88     	; 0x17c2 <xQueueCRReceive+0x84>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portENABLE_INTERRUPTS();
    176a:	78 94       	sei

		portDISABLE_INTERRUPTS();
    176c:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    176e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1770:	88 23       	and	r24, r24
    1772:	31 f1       	breq	.+76     	; 0x17c0 <xQueueCRReceive+0x82>
			{
				/* Data is available from the queue. */
				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1774:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1776:	2e 81       	ldd	r18, Y+6	; 0x06
    1778:	3f 81       	ldd	r19, Y+7	; 0x07
    177a:	28 0f       	add	r18, r24
    177c:	31 1d       	adc	r19, r1
    177e:	3f 83       	std	Y+7, r19	; 0x07
    1780:	2e 83       	std	Y+6, r18	; 0x06
				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	28 17       	cp	r18, r24
    1788:	39 07       	cpc	r19, r25
    178a:	20 f0       	brcs	.+8      	; 0x1794 <xQueueCRReceive+0x56>
				{
					pxQueue->u.pcReadFrom = pxQueue->pcHead;
    178c:	88 81       	ld	r24, Y
    178e:	99 81       	ldd	r25, Y+1	; 0x01
    1790:	9f 83       	std	Y+7, r25	; 0x07
    1792:	8e 83       	std	Y+6, r24	; 0x06
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
    1794:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1796:	81 50       	subi	r24, 0x01	; 1
    1798:	8a 8f       	std	Y+26, r24	; 0x1a
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    179a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    179c:	6e 81       	ldd	r22, Y+6	; 0x06
    179e:	7f 81       	ldd	r23, Y+7	; 0x07
    17a0:	cf 01       	movw	r24, r30
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	0e 94 89 15 	call	0x2b12	; 0x2b12 <memcpy>

				xReturn = pdPASS;

				/* Were any co-routines waiting for space to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    17a8:	88 85       	ldd	r24, Y+8	; 0x08
    17aa:	88 23       	and	r24, r24
    17ac:	41 f0       	breq	.+16     	; 0x17be <xQueueCRReceive+0x80>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    17ae:	ce 01       	movw	r24, r28
    17b0:	08 96       	adiw	r24, 0x08	; 8
    17b2:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <xCoRoutineRemoveFromEventList>
    17b6:	88 23       	and	r24, r24
    17b8:	11 f0       	breq	.+4      	; 0x17be <xQueueCRReceive+0x80>
    17ba:	8b ef       	ldi	r24, 0xFB	; 251
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <xQueueCRReceive+0x82>
    17be:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		portENABLE_INTERRUPTS();
    17c0:	78 94       	sei

		return xReturn;
	}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <xQueueCRSend>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )
	{
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    17cc:	ec 01       	movw	r28, r24

		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    17ce:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    17d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    17de:	89 17       	cp	r24, r25
    17e0:	71 f4       	brne	.+28     	; 0x17fe <xQueueCRSend+0x36>
			{
				/* The queue is full - do we want to block or just leave without
				posting? */
				if( xTicksToWait > ( TickType_t ) 0 )
    17e2:	41 15       	cp	r20, r1
    17e4:	51 05       	cpc	r21, r1
    17e6:	41 f0       	breq	.+16     	; 0x17f8 <xQueueCRSend+0x30>
				{
					/* As this is called from a coroutine we cannot block directly, but
					return indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    17e8:	28 96       	adiw	r28, 0x08	; 8
    17ea:	ca 01       	movw	r24, r20
    17ec:	be 01       	movw	r22, r28
    17ee:	0e 94 45 10 	call	0x208a	; 0x208a <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    17f2:	78 94       	sei
    17f4:	8c ef       	ldi	r24, 0xFC	; 252
    17f6:	1b c0       	rjmp	.+54     	; 0x182e <xQueueCRSend+0x66>
					return errQUEUE_BLOCKED;
				}
				else
				{
					portENABLE_INTERRUPTS();
    17f8:	78 94       	sei
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	18 c0       	rjmp	.+48     	; 0x182e <xQueueCRSend+0x66>
					return errQUEUE_FULL;
				}
			}
		}
		portENABLE_INTERRUPTS();
    17fe:	78 94       	sei

		portDISABLE_INTERRUPTS();
    1800:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1802:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1804:	89 17       	cp	r24, r25
    1806:	10 f0       	brcs	.+4      	; 0x180c <xQueueCRSend+0x44>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	10 c0       	rjmp	.+32     	; 0x182c <xQueueCRSend+0x64>
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    180c:	ce 01       	movw	r24, r28
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	0e 94 c8 0a 	call	0x1590	; 0x1590 <prvCopyDataToQueue>
				xReturn = pdPASS;

				/* Were any co-routines waiting for data to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1814:	89 89       	ldd	r24, Y+17	; 0x11
    1816:	88 23       	and	r24, r24
    1818:	41 f0       	breq	.+16     	; 0x182a <xQueueCRSend+0x62>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    181a:	ce 01       	movw	r24, r28
    181c:	41 96       	adiw	r24, 0x11	; 17
    181e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <xCoRoutineRemoveFromEventList>
    1822:	88 23       	and	r24, r24
    1824:	11 f0       	breq	.+4      	; 0x182a <xQueueCRSend+0x62>
    1826:	8b ef       	ldi	r24, 0xFB	; 251
    1828:	01 c0       	rjmp	.+2      	; 0x182c <xQueueCRSend+0x64>
    182a:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = errQUEUE_FULL;
			}
		}
		portENABLE_INTERRUPTS();
    182c:	78 94       	sei

		return xReturn;
	}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret

00001834 <vQueueDelete>:

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    1834:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    1838:	08 95       	ret

0000183a <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	7a 01       	movw	r14, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1848:	ec 01       	movw	r28, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    184a:	1a 8d       	ldd	r17, Y+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    184c:	11 23       	and	r17, r17
    184e:	11 f4       	brne	.+4      	; 0x1854 <xQueueReceiveFromISR+0x1a>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	1a c0       	rjmp	.+52     	; 0x1888 <xQueueReceiveFromISR+0x4e>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    1854:	0d 8d       	ldd	r16, Y+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1856:	0e 94 12 0b 	call	0x1624	; 0x1624 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    185a:	11 50       	subi	r17, 0x01	; 1
    185c:	1a 8f       	std	Y+26, r17	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    185e:	0f 3f       	cpi	r16, 0xFF	; 255
    1860:	81 f4       	brne	.+32     	; 0x1882 <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1862:	88 85       	ldd	r24, Y+8	; 0x08
    1864:	88 23       	and	r24, r24
    1866:	79 f0       	breq	.+30     	; 0x1886 <xQueueReceiveFromISR+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1868:	ce 01       	movw	r24, r28
    186a:	08 96       	adiw	r24, 0x08	; 8
    186c:	0e 94 45 05 	call	0xa8a	; 0xa8a <xTaskRemoveFromEventList>
    1870:	88 23       	and	r24, r24
    1872:	49 f0       	breq	.+18     	; 0x1886 <xQueueReceiveFromISR+0x4c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1874:	e1 14       	cp	r14, r1
    1876:	f1 04       	cpc	r15, r1
    1878:	31 f0       	breq	.+12     	; 0x1886 <xQueueReceiveFromISR+0x4c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	f7 01       	movw	r30, r14
    187e:	80 83       	st	Z, r24
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <xQueueReceiveFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    1882:	0f 5f       	subi	r16, 0xFF	; 255
    1884:	0d 8f       	std	Y+29, r16	; 0x1d
    1886:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	08 95       	ret

00001896 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	eb 01       	movw	r28, r22
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    189c:	fc 01       	movw	r30, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    189e:	92 8d       	ldd	r25, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    18a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    18a2:	98 17       	cp	r25, r24
    18a4:	10 f0       	brcs	.+4      	; 0x18aa <xQueueGiveFromISR+0x14>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	16 c0       	rjmp	.+44     	; 0x18d6 <xQueueGiveFromISR+0x40>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    18aa:	86 8d       	ldd	r24, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    18ac:	9f 5f       	subi	r25, 0xFF	; 255
    18ae:	92 8f       	std	Z+26, r25	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    18b0:	8f 3f       	cpi	r24, 0xFF	; 255
    18b2:	71 f4       	brne	.+28     	; 0x18d0 <xQueueGiveFromISR+0x3a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18b4:	81 89       	ldd	r24, Z+17	; 0x11
    18b6:	88 23       	and	r24, r24
    18b8:	69 f0       	breq	.+26     	; 0x18d4 <xQueueGiveFromISR+0x3e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18ba:	cf 01       	movw	r24, r30
    18bc:	41 96       	adiw	r24, 0x11	; 17
    18be:	0e 94 45 05 	call	0xa8a	; 0xa8a <xTaskRemoveFromEventList>
    18c2:	88 23       	and	r24, r24
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <xQueueGiveFromISR+0x3e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    18c6:	20 97       	sbiw	r28, 0x00	; 0
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <xQueueGiveFromISR+0x3e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	88 83       	st	Y, r24
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <xQueueGiveFromISR+0x40>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    18d0:	8f 5f       	subi	r24, 0xFF	; 255
    18d2:	86 8f       	std	Z+30, r24	; 0x1e
    18d4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	7a 01       	movw	r14, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    18e8:	ec 01       	movw	r28, r24
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    18ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	98 17       	cp	r25, r24
    18f0:	20 f0       	brcs	.+8      	; 0x18fa <xQueueGenericSendFromISR+0x1e>
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	11 f0       	breq	.+4      	; 0x18fa <xQueueGenericSendFromISR+0x1e>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	1a c0       	rjmp	.+52     	; 0x192e <xQueueGenericSendFromISR+0x52>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    18fa:	1e 8d       	ldd	r17, Y+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    18fc:	ce 01       	movw	r24, r28
    18fe:	42 2f       	mov	r20, r18
    1900:	0e 94 c8 0a 	call	0x1590	; 0x1590 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1904:	1f 3f       	cpi	r17, 0xFF	; 255
    1906:	81 f4       	brne	.+32     	; 0x1928 <xQueueGenericSendFromISR+0x4c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1908:	89 89       	ldd	r24, Y+17	; 0x11
    190a:	88 23       	and	r24, r24
    190c:	79 f0       	breq	.+30     	; 0x192c <xQueueGenericSendFromISR+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    190e:	ce 01       	movw	r24, r28
    1910:	41 96       	adiw	r24, 0x11	; 17
    1912:	0e 94 45 05 	call	0xa8a	; 0xa8a <xTaskRemoveFromEventList>
    1916:	88 23       	and	r24, r24
    1918:	49 f0       	breq	.+18     	; 0x192c <xQueueGenericSendFromISR+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    191a:	e1 14       	cp	r14, r1
    191c:	f1 04       	cpc	r15, r1
    191e:	31 f0       	breq	.+12     	; 0x192c <xQueueGenericSendFromISR+0x50>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	f7 01       	movw	r30, r14
    1924:	80 83       	st	Z, r24
    1926:	03 c0       	rjmp	.+6      	; 0x192e <xQueueGenericSendFromISR+0x52>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1928:	1f 5f       	subi	r17, 0xFF	; 255
    192a:	1e 8f       	std	Y+30, r17	; 0x1e
    192c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	08 95       	ret

0000193a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    194c:	1e 8d       	ldd	r17, Y+30	; 0x1e
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    194e:	91 e1       	ldi	r25, 0x11	; 17
    1950:	e9 2e       	mov	r14, r25
    1952:	f1 2c       	mov	r15, r1
    1954:	ec 0e       	add	r14, r28
    1956:	fd 1e       	adc	r15, r29
    1958:	0b c0       	rjmp	.+22     	; 0x1970 <prvUnlockQueue+0x36>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    195a:	89 89       	ldd	r24, Y+17	; 0x11
    195c:	88 23       	and	r24, r24
    195e:	51 f0       	breq	.+20     	; 0x1974 <prvUnlockQueue+0x3a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1960:	c7 01       	movw	r24, r14
    1962:	0e 94 45 05 	call	0xa8a	; 0xa8a <xTaskRemoveFromEventList>
    1966:	88 23       	and	r24, r24
    1968:	11 f0       	breq	.+4      	; 0x196e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    196a:	0e 94 13 04 	call	0x826	; 0x826 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    196e:	11 50       	subi	r17, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1970:	11 16       	cp	r1, r17
    1972:	9c f3       	brlt	.-26     	; 0x195a <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    1982:	1d 8d       	ldd	r17, Y+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1984:	88 e0       	ldi	r24, 0x08	; 8
    1986:	e8 2e       	mov	r14, r24
    1988:	f1 2c       	mov	r15, r1
    198a:	ec 0e       	add	r14, r28
    198c:	fd 1e       	adc	r15, r29
    198e:	0b c0       	rjmp	.+22     	; 0x19a6 <prvUnlockQueue+0x6c>
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1990:	88 85       	ldd	r24, Y+8	; 0x08
    1992:	88 23       	and	r24, r24
    1994:	51 f0       	breq	.+20     	; 0x19aa <prvUnlockQueue+0x70>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1996:	c7 01       	movw	r24, r14
    1998:	0e 94 45 05 	call	0xa8a	; 0xa8a <xTaskRemoveFromEventList>
    199c:	88 23       	and	r24, r24
    199e:	11 f0       	breq	.+4      	; 0x19a4 <prvUnlockQueue+0x6a>
				{
					vTaskMissedYield();
    19a0:	0e 94 13 04 	call	0x826	; 0x826 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    19a4:	11 50       	subi	r17, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    19a6:	11 16       	cp	r1, r17
    19a8:	9c f3       	brlt	.-26     	; 0x1990 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
}
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	ff 90       	pop	r15
    19ba:	ef 90       	pop	r14
    19bc:	08 95       	ret

000019be <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    19be:	6f 92       	push	r6
    19c0:	7f 92       	push	r7
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	00 d0       	rcall	.+0      	; 0x19dc <xQueueGenericReceive+0x1e>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <xQueueGenericReceive+0x20>
    19de:	0f 92       	push	r0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	4b 01       	movw	r8, r22
    19e6:	5d 83       	std	Y+5, r21	; 0x05
    19e8:	4c 83       	std	Y+4, r20	; 0x04
    19ea:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    19ec:	8c 01       	movw	r16, r24
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    19ee:	41 e1       	ldi	r20, 0x11	; 17
    19f0:	a4 2e       	mov	r10, r20
    19f2:	b1 2c       	mov	r11, r1
    19f4:	a8 0e       	add	r10, r24
    19f6:	b9 1e       	adc	r11, r25
    19f8:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    19fa:	6e 01       	movw	r12, r28
    19fc:	08 94       	sec
    19fe:	c1 1c       	adc	r12, r1
    1a00:	d1 1c       	adc	r13, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a02:	34 e0       	ldi	r19, 0x04	; 4
    1a04:	63 2e       	mov	r6, r19
    1a06:	71 2c       	mov	r7, r1
    1a08:	6c 0e       	add	r6, r28
    1a0a:	7d 1e       	adc	r7, r29
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <xQueueGenericReceive+0x52>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a0e:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1a16:	f8 01       	movw	r30, r16
    1a18:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1a1a:	ff 20       	and	r15, r15
    1a1c:	11 f1       	breq	.+68     	; 0x1a62 <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1a1e:	c6 80       	ldd	r12, Z+6	; 0x06
    1a20:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1a22:	c8 01       	movw	r24, r16
    1a24:	b4 01       	movw	r22, r8
    1a26:	0e 94 12 0b 	call	0x1624	; 0x1624 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1a2a:	ee 20       	and	r14, r14
    1a2c:	49 f4       	brne	.+18     	; 0x1a40 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1a2e:	fa 94       	dec	r15
    1a30:	f8 01       	movw	r30, r16
    1a32:	f2 8e       	std	Z+26, r15	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a34:	80 85       	ldd	r24, Z+8	; 0x08
    1a36:	88 23       	and	r24, r24
    1a38:	81 f0       	breq	.+32     	; 0x1a5a <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	08 96       	adiw	r24, 0x08	; 8
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <xQueueGenericReceive+0x90>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1a40:	f8 01       	movw	r30, r16
    1a42:	d7 82       	std	Z+7, r13	; 0x07
    1a44:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a46:	81 89       	ldd	r24, Z+17	; 0x11
    1a48:	88 23       	and	r24, r24
    1a4a:	39 f0       	breq	.+14     	; 0x1a5a <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a4c:	c5 01       	movw	r24, r10
    1a4e:	0e 94 45 05 	call	0xa8a	; 0xa8a <xTaskRemoveFromEventList>
    1a52:	88 23       	and	r24, r24
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1a56:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	54 c0       	rjmp	.+168    	; 0x1b0a <xQueueGenericReceive+0x14c>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	89 2b       	or	r24, r25
    1a68:	21 f4       	brne	.+8      	; 0x1a72 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	4c c0       	rjmp	.+152    	; 0x1b0a <xQueueGenericReceive+0x14c>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    1a72:	22 23       	and	r18, r18
    1a74:	19 f4       	brne	.+6      	; 0x1a7c <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a76:	c6 01       	movw	r24, r12
    1a78:	0e 94 d5 03 	call	0x7aa	; 0x7aa <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1a80:	0e 94 76 03 	call	0x6ec	; 0x6ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	0f 92       	push	r0
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <xQueueGenericReceive+0xd6>
    1a92:	15 8e       	std	Z+29, r1	; 0x1d
    1a94:	f8 01       	movw	r30, r16
    1a96:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a98:	8f 3f       	cpi	r24, 0xFF	; 255
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <xQueueGenericReceive+0xe0>
    1a9c:	16 8e       	std	Z+30, r1	; 0x1e
    1a9e:	0f 90       	pop	r0
    1aa0:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1aa2:	c6 01       	movw	r24, r12
    1aa4:	b3 01       	movw	r22, r6
    1aa6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <xTaskCheckForTimeOut>
    1aaa:	88 23       	and	r24, r24
    1aac:	f9 f4       	brne	.+62     	; 0x1aec <xQueueGenericReceive+0x12e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1abc:	88 23       	and	r24, r24
    1abe:	81 f4       	brne	.+32     	; 0x1ae0 <xQueueGenericReceive+0x122>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1ac0:	6c 81       	ldd	r22, Y+4	; 0x04
    1ac2:	7d 81       	ldd	r23, Y+5	; 0x05
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	0e 94 bf 08 	call	0x117e	; 0x117e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1aca:	c8 01       	movw	r24, r16
    1acc:	0e 94 9d 0c 	call	0x193a	; 0x193a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1ad0:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
    1ad4:	88 23       	and	r24, r24
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <xQueueGenericReceive+0x11c>
    1ad8:	9a cf       	rjmp	.-204    	; 0x1a0e <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    1ada:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
    1ade:	97 cf       	rjmp	.-210    	; 0x1a0e <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 9d 0c 	call	0x193a	; 0x193a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1ae6:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
    1aea:	91 cf       	rjmp	.-222    	; 0x1a0e <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1aec:	c8 01       	movw	r24, r16
    1aee:	0e 94 9d 0c 	call	0x193a	; 0x193a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1af2:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1afc:	f8 01       	movw	r30, r16
    1afe:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b04:	88 23       	and	r24, r24
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <xQueueGenericReceive+0x14c>
    1b08:	82 cf       	rjmp	.-252    	; 0x1a0e <xQueueGenericReceive+0x50>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	bf 90       	pop	r11
    1b26:	af 90       	pop	r10
    1b28:	9f 90       	pop	r9
    1b2a:	8f 90       	pop	r8
    1b2c:	7f 90       	pop	r7
    1b2e:	6f 90       	pop	r6
    1b30:	08 95       	ret

00001b32 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1b32:	6f 92       	push	r6
    1b34:	7f 92       	push	r7
    1b36:	9f 92       	push	r9
    1b38:	af 92       	push	r10
    1b3a:	bf 92       	push	r11
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <xQueueGenericSend+0x1c>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <xQueueGenericSend+0x1e>
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	6b 01       	movw	r12, r22
    1b58:	5d 83       	std	Y+5, r21	; 0x05
    1b5a:	4c 83       	std	Y+4, r20	; 0x04
    1b5c:	92 2e       	mov	r9, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1b5e:	8c 01       	movw	r16, r24
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1b60:	68 e0       	ldi	r22, 0x08	; 8
    1b62:	e6 2e       	mov	r14, r22
    1b64:	f1 2c       	mov	r15, r1
    1b66:	e8 0e       	add	r14, r24
    1b68:	f9 1e       	adc	r15, r25
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1b6c:	5e 01       	movw	r10, r28
    1b6e:	08 94       	sec
    1b70:	a1 1c       	adc	r10, r1
    1b72:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1b74:	54 e0       	ldi	r21, 0x04	; 4
    1b76:	65 2e       	mov	r6, r21
    1b78:	71 2c       	mov	r7, r1
    1b7a:	6c 0e       	add	r6, r28
    1b7c:	7d 1e       	adc	r7, r29
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1b80:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1b88:	f8 01       	movw	r30, r16
    1b8a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b8c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b8e:	98 17       	cp	r25, r24
    1b90:	18 f0       	brcs	.+6      	; 0x1b98 <xQueueGenericSend+0x66>
    1b92:	f2 e0       	ldi	r31, 0x02	; 2
    1b94:	9f 16       	cp	r9, r31
    1b96:	c9 f4       	brne	.+50     	; 0x1bca <xQueueGenericSend+0x98>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1b98:	c8 01       	movw	r24, r16
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	49 2d       	mov	r20, r9
    1b9e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <prvCopyDataToQueue>
    1ba2:	98 2f       	mov	r25, r24
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	81 89       	ldd	r24, Z+17	; 0x11
    1ba8:	88 23       	and	r24, r24
    1baa:	39 f0       	breq	.+14     	; 0x1bba <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1bac:	c8 01       	movw	r24, r16
    1bae:	41 96       	adiw	r24, 0x11	; 17
    1bb0:	0e 94 45 05 	call	0xa8a	; 0xa8a <xTaskRemoveFromEventList>
    1bb4:	88 23       	and	r24, r24
    1bb6:	29 f0       	breq	.+10     	; 0x1bc2 <xQueueGenericSend+0x90>
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <xQueueGenericSend+0x8c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1bba:	99 23       	and	r25, r25
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <xQueueGenericSend+0x90>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1bbe:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	4c c0       	rjmp	.+152    	; 0x1c62 <xQueueGenericSend+0x130>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	89 2b       	or	r24, r25
    1bd0:	19 f4       	brne	.+6      	; 0x1bd8 <xQueueGenericSend+0xa6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	44 c0       	rjmp	.+136    	; 0x1c60 <xQueueGenericSend+0x12e>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    1bd8:	22 23       	and	r18, r18
    1bda:	19 f4       	brne	.+6      	; 0x1be2 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1bdc:	c5 01       	movw	r24, r10
    1bde:	0e 94 d5 03 	call	0x7aa	; 0x7aa <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1be6:	0e 94 76 03 	call	0x6ec	; 0x6ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	0f 92       	push	r0
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <xQueueGenericSend+0xc8>
    1bf8:	15 8e       	std	Z+29, r1	; 0x1d
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	86 8d       	ldd	r24, Z+30	; 0x1e
    1bfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <xQueueGenericSend+0xd2>
    1c02:	16 8e       	std	Z+30, r1	; 0x1e
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c08:	c5 01       	movw	r24, r10
    1c0a:	b3 01       	movw	r22, r6
    1c0c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <xTaskCheckForTimeOut>
    1c10:	88 23       	and	r24, r24
    1c12:	09 f5       	brne	.+66     	; 0x1c56 <xQueueGenericSend+0x124>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1c22:	f8 01       	movw	r30, r16
    1c24:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c26:	98 17       	cp	r25, r24
    1c28:	81 f4       	brne	.+32     	; 0x1c4a <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1c2a:	6c 81       	ldd	r22, Y+4	; 0x04
    1c2c:	7d 81       	ldd	r23, Y+5	; 0x05
    1c2e:	c7 01       	movw	r24, r14
    1c30:	0e 94 bf 08 	call	0x117e	; 0x117e <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1c34:	c8 01       	movw	r24, r16
    1c36:	0e 94 9d 0c 	call	0x193a	; 0x193a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1c3a:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
    1c3e:	88 23       	and	r24, r24
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <xQueueGenericSend+0x112>
    1c42:	9e cf       	rjmp	.-196    	; 0x1b80 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    1c44:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
    1c48:	9b cf       	rjmp	.-202    	; 0x1b80 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	0e 94 9d 0c 	call	0x193a	; 0x193a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1c50:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
    1c54:	95 cf       	rjmp	.-214    	; 0x1b80 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1c56:	c8 01       	movw	r24, r16
    1c58:	0e 94 9d 0c 	call	0x193a	; 0x193a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1c5c:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
    1c60:	80 e0       	ldi	r24, 0x00	; 0

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	bf 90       	pop	r11
    1c7e:	af 90       	pop	r10
    1c80:	9f 90       	pop	r9
    1c82:	7f 90       	pop	r7
    1c84:	6f 90       	pop	r6
    1c86:	08 95       	ret

00001c88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1c8c:	ec 01       	movw	r28, r24

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1c94:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1c96:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1c98:	e2 9f       	mul	r30, r18
    1c9a:	c0 01       	movw	r24, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	48 81       	ld	r20, Y
    1ca0:	59 81       	ldd	r21, Y+1	; 0x01
    1ca2:	84 0f       	add	r24, r20
    1ca4:	95 1f       	adc	r25, r21
    1ca6:	9b 83       	std	Y+3, r25	; 0x03
    1ca8:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1caa:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1cac:	5d 83       	std	Y+5, r21	; 0x05
    1cae:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	21 50       	subi	r18, 0x01	; 1
    1cb4:	30 40       	sbci	r19, 0x00	; 0
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	2e 9f       	mul	r18, r30
    1cba:	c0 01       	movw	r24, r0
    1cbc:	2f 9f       	mul	r18, r31
    1cbe:	90 0d       	add	r25, r0
    1cc0:	3e 9f       	mul	r19, r30
    1cc2:	90 0d       	add	r25, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	48 0f       	add	r20, r24
    1cc8:	59 1f       	adc	r21, r25
    1cca:	5f 83       	std	Y+7, r21	; 0x07
    1ccc:	4e 83       	std	Y+6, r20	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    1cd2:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1cd4:	66 23       	and	r22, r22
    1cd6:	61 f4       	brne	.+24     	; 0x1cf0 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1cd8:	88 85       	ldd	r24, Y+8	; 0x08
    1cda:	88 23       	and	r24, r24
    1cdc:	89 f0       	breq	.+34     	; 0x1d00 <xQueueGenericReset+0x78>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1cde:	ce 01       	movw	r24, r28
    1ce0:	08 96       	adiw	r24, 0x08	; 8
    1ce2:	0e 94 45 05 	call	0xa8a	; 0xa8a <xTaskRemoveFromEventList>
    1ce6:	88 23       	and	r24, r24
    1ce8:	59 f0       	breq	.+22     	; 0x1d00 <xQueueGenericReset+0x78>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1cea:	0e 94 21 12 	call	0x2442	; 0x2442 <vPortYield>
    1cee:	08 c0       	rjmp	.+16     	; 0x1d00 <xQueueGenericReset+0x78>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	08 96       	adiw	r24, 0x08	; 8
    1cf4:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	41 96       	adiw	r24, 0x11	; 17
    1cfc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	08 2f       	mov	r16, r24
    1d16:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    1d18:	66 23       	and	r22, r22
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <xQueueGenericCreate+0x16>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <xQueueGenericCreate+0x1c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d22:	68 9f       	mul	r22, r24
    1d24:	c0 01       	movw	r24, r0
    1d26:	11 24       	eor	r1, r1
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1d28:	4f 96       	adiw	r24, 0x1f	; 31
    1d2a:	0e 94 0c 11 	call	0x2218	; 0x2218 <pvPortMalloc>
    1d2e:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	71 f0       	breq	.+28     	; 0x1d50 <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1d34:	11 23       	and	r17, r17
    1d36:	19 f4       	brne	.+6      	; 0x1d3e <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1d38:	99 83       	std	Y+1, r25	; 0x01
    1d3a:	88 83       	st	Y, r24
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <xQueueGenericCreate+0x38>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1d3e:	4f 96       	adiw	r24, 0x1f	; 31
    1d40:	99 83       	std	Y+1, r25	; 0x01
    1d42:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    1d44:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    1d46:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1d48:	ce 01       	movw	r24, r28
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
    1d50:	ce 01       	movw	r24, r28
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	08 95       	ret

00001d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1d5c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d5e:	9c 01       	movw	r18, r24
    1d60:	2d 5f       	subi	r18, 0xFD	; 253
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	32 83       	std	Z+2, r19	; 0x02
    1d66:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	9f ef       	ldi	r25, 0xFF	; 255
    1d6c:	94 83       	std	Z+4, r25	; 0x04
    1d6e:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d70:	36 83       	std	Z+6, r19	; 0x06
    1d72:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d74:	30 87       	std	Z+8, r19	; 0x08
    1d76:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1d78:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1d7a:	08 95       	ret

00001d7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	11 86       	std	Z+9, r1	; 0x09
    1d80:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1d82:	08 95       	ret

00001d84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1d84:	ac 01       	movw	r20, r24
ListItem_t * const pxIndex = pxList->pxIndex;
    1d86:	fc 01       	movw	r30, r24
    1d88:	a1 81       	ldd	r26, Z+1	; 0x01
    1d8a:	b2 81       	ldd	r27, Z+2	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1d8c:	fb 01       	movw	r30, r22
    1d8e:	b3 83       	std	Z+3, r27	; 0x03
    1d90:	a2 83       	std	Z+2, r26	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1d92:	14 96       	adiw	r26, 0x04	; 4
    1d94:	8d 91       	ld	r24, X+
    1d96:	9c 91       	ld	r25, X
    1d98:	15 97       	sbiw	r26, 0x05	; 5
    1d9a:	95 83       	std	Z+5, r25	; 0x05
    1d9c:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1d9e:	14 96       	adiw	r26, 0x04	; 4
    1da0:	ed 91       	ld	r30, X+
    1da2:	fc 91       	ld	r31, X
    1da4:	15 97       	sbiw	r26, 0x05	; 5
    1da6:	73 83       	std	Z+3, r23	; 0x03
    1da8:	62 83       	std	Z+2, r22	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1daa:	15 96       	adiw	r26, 0x05	; 5
    1dac:	7c 93       	st	X, r23
    1dae:	6e 93       	st	-X, r22
    1db0:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1db2:	fb 01       	movw	r30, r22
    1db4:	51 87       	std	Z+9, r21	; 0x09
    1db6:	40 87       	std	Z+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
    1db8:	fa 01       	movw	r30, r20
    1dba:	80 81       	ld	r24, Z
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	80 83       	st	Z, r24
}
    1dc0:	08 95       	ret

00001dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	9c 01       	movw	r18, r24
    1dc8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1dca:	48 81       	ld	r20, Y
    1dcc:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	4f 3f       	cpi	r20, 0xFF	; 255
    1dd2:	58 07       	cpc	r21, r24
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1dd6:	f9 01       	movw	r30, r18
    1dd8:	a7 81       	ldd	r26, Z+7	; 0x07
    1dda:	b0 85       	ldd	r27, Z+8	; 0x08
    1ddc:	0d c0       	rjmp	.+26     	; 0x1df8 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1dde:	d9 01       	movw	r26, r18
    1de0:	13 96       	adiw	r26, 0x03	; 3
    1de2:	12 96       	adiw	r26, 0x02	; 2
    1de4:	ed 91       	ld	r30, X+
    1de6:	fc 91       	ld	r31, X
    1de8:	13 97       	sbiw	r26, 0x03	; 3
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	48 17       	cp	r20, r24
    1df0:	59 07       	cpc	r21, r25
    1df2:	10 f0       	brcs	.+4      	; 0x1df8 <vListInsert+0x36>
    1df4:	df 01       	movw	r26, r30
    1df6:	f5 cf       	rjmp	.-22     	; 0x1de2 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	ed 91       	ld	r30, X+
    1dfc:	fc 91       	ld	r31, X
    1dfe:	13 97       	sbiw	r26, 0x03	; 3
    1e00:	fb 83       	std	Y+3, r31	; 0x03
    1e02:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1e04:	d5 83       	std	Z+5, r29	; 0x05
    1e06:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1e08:	bd 83       	std	Y+5, r27	; 0x05
    1e0a:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1e0c:	13 96       	adiw	r26, 0x03	; 3
    1e0e:	dc 93       	st	X, r29
    1e10:	ce 93       	st	-X, r28
    1e12:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1e14:	39 87       	std	Y+9, r19	; 0x09
    1e16:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1e18:	f9 01       	movw	r30, r18
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	80 83       	st	Z, r24
}
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret

00001e26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	dc 01       	movw	r26, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1e2c:	18 96       	adiw	r26, 0x08	; 8
    1e2e:	cd 91       	ld	r28, X+
    1e30:	dc 91       	ld	r29, X
    1e32:	19 97       	sbiw	r26, 0x09	; 9

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1e34:	12 96       	adiw	r26, 0x02	; 2
    1e36:	4d 91       	ld	r20, X+
    1e38:	5c 91       	ld	r21, X
    1e3a:	13 97       	sbiw	r26, 0x03	; 3
    1e3c:	14 96       	adiw	r26, 0x04	; 4
    1e3e:	8d 91       	ld	r24, X+
    1e40:	9c 91       	ld	r25, X
    1e42:	15 97       	sbiw	r26, 0x05	; 5
    1e44:	fa 01       	movw	r30, r20
    1e46:	95 83       	std	Z+5, r25	; 0x05
    1e48:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1e4a:	14 96       	adiw	r26, 0x04	; 4
    1e4c:	2d 91       	ld	r18, X+
    1e4e:	3c 91       	ld	r19, X
    1e50:	15 97       	sbiw	r26, 0x05	; 5
    1e52:	f9 01       	movw	r30, r18
    1e54:	53 83       	std	Z+3, r21	; 0x03
    1e56:	42 83       	std	Z+2, r20	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	8a 17       	cp	r24, r26
    1e5e:	9b 07       	cpc	r25, r27
    1e60:	11 f4       	brne	.+4      	; 0x1e66 <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1e62:	3a 83       	std	Y+2, r19	; 0x02
    1e64:	29 83       	std	Y+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1e66:	19 96       	adiw	r26, 0x09	; 9
    1e68:	1c 92       	st	X, r1
    1e6a:	1e 92       	st	-X, r1
    1e6c:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    1e6e:	88 81       	ld	r24, Y
    1e70:	81 50       	subi	r24, 0x01	; 1
    1e72:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	08 95       	ret

00001e7a <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
    1e7a:	ef 92       	push	r14
    1e7c:	ff 92       	push	r15
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1e82:	dc 01       	movw	r26, r24
    1e84:	15 96       	adiw	r26, 0x05	; 5
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	16 97       	sbiw	r26, 0x06	; 6
    1e8c:	e6 80       	ldd	r14, Z+6	; 0x06
    1e8e:	f7 80       	ldd	r15, Z+7	; 0x07
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1e90:	87 01       	movw	r16, r14
    1e92:	04 5f       	subi	r16, 0xF4	; 244
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	c8 01       	movw	r24, r16
    1e98:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1e9c:	8d ee       	ldi	r24, 0xED	; 237
    1e9e:	91 e0       	ldi	r25, 0x01	; 1
    1ea0:	b8 01       	movw	r22, r16
    1ea2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	e0 91 bc 01 	lds	r30, 0x01BC
    1eac:	f0 91 bd 01 	lds	r31, 0x01BD
    1eb0:	d7 01       	movw	r26, r14
    1eb2:	56 96       	adiw	r26, 0x16	; 22
    1eb4:	9c 91       	ld	r25, X
    1eb6:	86 89       	ldd	r24, Z+22	; 0x16
    1eb8:	98 17       	cp	r25, r24
    1eba:	08 f0       	brcs	.+2      	; 0x1ebe <xCoRoutineRemoveFromEventList+0x44>
    1ebc:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1ebe:	82 2f       	mov	r24, r18
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	08 95       	ret

00001eca <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    1eca:	ff 92       	push	r15
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    1ed4:	99 e0       	ldi	r25, 0x09	; 9
    1ed6:	f9 2e       	mov	r15, r25
    1ed8:	21 c0       	rjmp	.+66     	; 0x1f1c <vCoRoutineSchedule+0x52>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    1eda:	f8 94       	cli
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
    1edc:	e0 91 f2 01 	lds	r30, 0x01F2
    1ee0:	f0 91 f3 01 	lds	r31, 0x01F3
    1ee4:	06 81       	ldd	r16, Z+6	; 0x06
    1ee6:	17 81       	ldd	r17, Z+7	; 0x07
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1ee8:	c8 01       	movw	r24, r16
    1eea:	0c 96       	adiw	r24, 0x0c	; 12
    1eec:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    1ef0:	78 94       	sei

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1ef2:	e8 01       	movw	r28, r16
    1ef4:	22 96       	adiw	r28, 0x02	; 2
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    1efc:	f8 01       	movw	r30, r16
    1efe:	96 89       	ldd	r25, Z+22	; 0x16
    1f00:	80 91 be 01 	lds	r24, 0x01BE
    1f04:	89 17       	cp	r24, r25
    1f06:	10 f4       	brcc	.+4      	; 0x1f0c <vCoRoutineSchedule+0x42>
    1f08:	90 93 be 01 	sts	0x01BE, r25
    1f0c:	9f 9d       	mul	r25, r15
    1f0e:	c0 01       	movw	r24, r0
    1f10:	11 24       	eor	r1, r1
    1f12:	8b 53       	subi	r24, 0x3B	; 59
    1f14:	9e 4f       	sbci	r25, 0xFE	; 254
    1f16:	be 01       	movw	r22, r28
    1f18:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    1f1c:	80 91 ed 01 	lds	r24, 0x01ED
    1f20:	88 23       	and	r24, r24
    1f22:	d9 f6       	brne	.-74     	; 0x1eda <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    1f24:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <xTaskGetTickCount>
    1f28:	20 91 bf 01 	lds	r18, 0x01BF
    1f2c:	30 91 c0 01 	lds	r19, 0x01C0
    1f30:	82 1b       	sub	r24, r18
    1f32:	93 0b       	sbc	r25, r19
    1f34:	90 93 c2 01 	sts	0x01C2, r25
    1f38:	80 93 c1 01 	sts	0x01C1, r24
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
    1f3c:	89 e0       	ldi	r24, 0x09	; 9
    1f3e:	f8 2e       	mov	r15, r24
    1f40:	53 c0       	rjmp	.+166    	; 0x1fe8 <vCoRoutineSchedule+0x11e>
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	90 93 c4 01 	sts	0x01C4, r25
    1f48:	80 93 c3 01 	sts	0x01C3, r24
		xPassedTicks--;
    1f4c:	21 50       	subi	r18, 0x01	; 1
    1f4e:	30 40       	sbci	r19, 0x00	; 0
    1f50:	30 93 c2 01 	sts	0x01C2, r19
    1f54:	20 93 c1 01 	sts	0x01C1, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    1f58:	89 2b       	or	r24, r25
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <vCoRoutineSchedule+0x94>
    1f5c:	3e c0       	rjmp	.+124    	; 0x1fda <vCoRoutineSchedule+0x110>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1f5e:	20 91 e9 01 	lds	r18, 0x01E9
    1f62:	30 91 ea 01 	lds	r19, 0x01EA
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1f66:	80 91 eb 01 	lds	r24, 0x01EB
    1f6a:	90 91 ec 01 	lds	r25, 0x01EC
    1f6e:	90 93 ea 01 	sts	0x01EA, r25
    1f72:	80 93 e9 01 	sts	0x01E9, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1f76:	30 93 ec 01 	sts	0x01EC, r19
    1f7a:	20 93 eb 01 	sts	0x01EB, r18
    1f7e:	2d c0       	rjmp	.+90     	; 0x1fda <vCoRoutineSchedule+0x110>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    1f80:	05 80       	ldd	r0, Z+5	; 0x05
    1f82:	f6 81       	ldd	r31, Z+6	; 0x06
    1f84:	e0 2d       	mov	r30, r0
    1f86:	c6 81       	ldd	r28, Z+6	; 0x06
    1f88:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    1f8a:	20 91 c3 01 	lds	r18, 0x01C3
    1f8e:	30 91 c4 01 	lds	r19, 0x01C4
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	28 17       	cp	r18, r24
    1f98:	39 07       	cpc	r19, r25
    1f9a:	30 f1       	brcs	.+76     	; 0x1fe8 <vCoRoutineSchedule+0x11e>
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
    1f9c:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    1f9e:	8e 01       	movw	r16, r28
    1fa0:	0e 5f       	subi	r16, 0xFE	; 254
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
    1faa:	8c 89       	ldd	r24, Y+20	; 0x14
    1fac:	9d 89       	ldd	r25, Y+21	; 0x15
    1fae:	89 2b       	or	r24, r25
    1fb0:	21 f0       	breq	.+8      	; 0x1fba <vCoRoutineSchedule+0xf0>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	0c 96       	adiw	r24, 0x0c	; 12
    1fb6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    1fba:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );
    1fbc:	9e 89       	ldd	r25, Y+22	; 0x16
    1fbe:	80 91 be 01 	lds	r24, 0x01BE
    1fc2:	89 17       	cp	r24, r25
    1fc4:	10 f4       	brcc	.+4      	; 0x1fca <vCoRoutineSchedule+0x100>
    1fc6:	90 93 be 01 	sts	0x01BE, r25
    1fca:	9f 9d       	mul	r25, r15
    1fcc:	c0 01       	movw	r24, r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	8b 53       	subi	r24, 0x3B	; 59
    1fd2:	9e 4f       	sbci	r25, 0xFE	; 254
    1fd4:	b8 01       	movw	r22, r16
    1fd6:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    1fda:	e0 91 e9 01 	lds	r30, 0x01E9
    1fde:	f0 91 ea 01 	lds	r31, 0x01EA
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	61 f6       	brne	.-104    	; 0x1f80 <vCoRoutineSchedule+0xb6>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    1fe8:	20 91 c1 01 	lds	r18, 0x01C1
    1fec:	30 91 c2 01 	lds	r19, 0x01C2
    1ff0:	80 91 c3 01 	lds	r24, 0x01C3
    1ff4:	90 91 c4 01 	lds	r25, 0x01C4
    1ff8:	21 15       	cp	r18, r1
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <vCoRoutineSchedule+0x136>
    1ffe:	a1 cf       	rjmp	.-190    	; 0x1f42 <vCoRoutineSchedule+0x78>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
    2000:	90 93 c0 01 	sts	0x01C0, r25
    2004:	80 93 bf 01 	sts	0x01BF, r24
    2008:	90 91 be 01 	lds	r25, 0x01BE

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    200c:	29 e0       	ldi	r18, 0x09	; 9
    200e:	06 c0       	rjmp	.+12     	; 0x201c <vCoRoutineSchedule+0x152>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2010:	99 23       	and	r25, r25
    2012:	19 f4       	brne	.+6      	; 0x201a <vCoRoutineSchedule+0x150>
    2014:	10 92 be 01 	sts	0x01BE, r1
    2018:	32 c0       	rjmp	.+100    	; 0x207e <vCoRoutineSchedule+0x1b4>
    201a:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    201c:	92 9f       	mul	r25, r18
    201e:	d0 01       	movw	r26, r0
    2020:	11 24       	eor	r1, r1
    2022:	ab 53       	subi	r26, 0x3B	; 59
    2024:	be 4f       	sbci	r27, 0xFE	; 254
    2026:	8c 91       	ld	r24, X
    2028:	88 23       	and	r24, r24
    202a:	91 f3       	breq	.-28     	; 0x2010 <vCoRoutineSchedule+0x146>
    202c:	90 93 be 01 	sts	0x01BE, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2030:	11 96       	adiw	r26, 0x01	; 1
    2032:	ed 91       	ld	r30, X+
    2034:	fc 91       	ld	r31, X
    2036:	12 97       	sbiw	r26, 0x02	; 2
    2038:	02 80       	ldd	r0, Z+2	; 0x02
    203a:	f3 81       	ldd	r31, Z+3	; 0x03
    203c:	e0 2d       	mov	r30, r0
    203e:	12 96       	adiw	r26, 0x02	; 2
    2040:	fc 93       	st	X, r31
    2042:	ee 93       	st	-X, r30
    2044:	11 97       	sbiw	r26, 0x01	; 1
    2046:	cd 01       	movw	r24, r26
    2048:	03 96       	adiw	r24, 0x03	; 3
    204a:	e8 17       	cp	r30, r24
    204c:	f9 07       	cpc	r31, r25
    204e:	31 f4       	brne	.+12     	; 0x205c <vCoRoutineSchedule+0x192>
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	12 96       	adiw	r26, 0x02	; 2
    2056:	9c 93       	st	X, r25
    2058:	8e 93       	st	-X, r24
    205a:	11 97       	sbiw	r26, 0x01	; 1
    205c:	11 96       	adiw	r26, 0x01	; 1
    205e:	ed 91       	ld	r30, X+
    2060:	fc 91       	ld	r31, X
    2062:	12 97       	sbiw	r26, 0x02	; 2
    2064:	06 80       	ldd	r0, Z+6	; 0x06
    2066:	f7 81       	ldd	r31, Z+7	; 0x07
    2068:	e0 2d       	mov	r30, r0
    206a:	f0 93 bd 01 	sts	0x01BD, r31
    206e:	e0 93 bc 01 	sts	0x01BC, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2072:	20 81       	ld	r18, Z
    2074:	31 81       	ldd	r19, Z+1	; 0x01
    2076:	cf 01       	movw	r24, r30
    2078:	67 89       	ldd	r22, Z+23	; 0x17
    207a:	f9 01       	movw	r30, r18
    207c:	09 95       	icall

	return;
}
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	08 95       	ret

0000208a <vCoRoutineAddToDelayedList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	eb 01       	movw	r28, r22
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    2094:	00 91 c3 01 	lds	r16, 0x01C3
    2098:	10 91 c4 01 	lds	r17, 0x01C4
    209c:	08 0f       	add	r16, r24
    209e:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    20a0:	80 91 bc 01 	lds	r24, 0x01BC
    20a4:	90 91 bd 01 	lds	r25, 0x01BD
    20a8:	02 96       	adiw	r24, 0x02	; 2
    20aa:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    20ae:	e0 91 bc 01 	lds	r30, 0x01BC
    20b2:	f0 91 bd 01 	lds	r31, 0x01BD
    20b6:	13 83       	std	Z+3, r17	; 0x03
    20b8:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    20ba:	80 91 c3 01 	lds	r24, 0x01C3
    20be:	90 91 c4 01 	lds	r25, 0x01C4
    20c2:	bf 01       	movw	r22, r30
    20c4:	6e 5f       	subi	r22, 0xFE	; 254
    20c6:	7f 4f       	sbci	r23, 0xFF	; 255
    20c8:	08 17       	cp	r16, r24
    20ca:	19 07       	cpc	r17, r25
    20cc:	28 f4       	brcc	.+10     	; 0x20d8 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    20ce:	80 91 eb 01 	lds	r24, 0x01EB
    20d2:	90 91 ec 01 	lds	r25, 0x01EC
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    20d8:	80 91 e9 01 	lds	r24, 0x01E9
    20dc:	90 91 ea 01 	lds	r25, 0x01EA
    20e0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <vListInsert>
	}

	if( pxEventList )
    20e4:	20 97       	sbiw	r28, 0x00	; 0
    20e6:	49 f0       	breq	.+18     	; 0x20fa <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    20e8:	60 91 bc 01 	lds	r22, 0x01BC
    20ec:	70 91 bd 01 	lds	r23, 0x01BD
    20f0:	64 5f       	subi	r22, 0xF4	; 244
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	ce 01       	movw	r24, r28
    20f6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <vListInsert>
	}
}
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	08 95       	ret

00002104 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
    2104:	af 92       	push	r10
    2106:	bf 92       	push	r11
    2108:	cf 92       	push	r12
    210a:	df 92       	push	r13
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	6c 01       	movw	r12, r24
    211a:	b6 2e       	mov	r11, r22
    211c:	a4 2e       	mov	r10, r20
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
    211e:	8a e1       	ldi	r24, 0x1A	; 26
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 0c 11 	call	0x2218	; 0x2218 <pvPortMalloc>
    2126:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	11 f4       	brne	.+4      	; 0x2130 <xCoRoutineCreate+0x2c>
    212c:	8f ef       	ldi	r24, 0xFF	; 255
    212e:	59 c0       	rjmp	.+178    	; 0x21e2 <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2130:	80 91 bc 01 	lds	r24, 0x01BC
    2134:	90 91 bd 01 	lds	r25, 0x01BD
    2138:	89 2b       	or	r24, r25
    213a:	21 f5       	brne	.+72     	; 0x2184 <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    213c:	d0 93 bd 01 	sts	0x01BD, r29
    2140:	c0 93 bc 01 	sts	0x01BC, r28
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2144:	85 ec       	ldi	r24, 0xC5	; 197
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
    214c:	8e ec       	ldi	r24, 0xCE	; 206
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    2154:	27 ed       	ldi	r18, 0xD7	; 215
    2156:	e2 2e       	mov	r14, r18
    2158:	21 e0       	ldi	r18, 0x01	; 1
    215a:	f2 2e       	mov	r15, r18
    215c:	c7 01       	movw	r24, r14
    215e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    2162:	00 ee       	ldi	r16, 0xE0	; 224
    2164:	11 e0       	ldi	r17, 0x01	; 1
    2166:	c8 01       	movw	r24, r16
    2168:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    216c:	8d ee       	ldi	r24, 0xED	; 237
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2174:	f0 92 ea 01 	sts	0x01EA, r15
    2178:	e0 92 e9 01 	sts	0x01E9, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    217c:	10 93 ec 01 	sts	0x01EC, r17
    2180:	00 93 eb 01 	sts	0x01EB, r16
    2184:	eb 2c       	mov	r14, r11
    2186:	bb 20       	and	r11, r11
    2188:	11 f0       	breq	.+4      	; 0x218e <xCoRoutineCreate+0x8a>
    218a:	ee 24       	eor	r14, r14
    218c:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    218e:	19 8e       	std	Y+25, r1	; 0x19
    2190:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    2192:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    2194:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2196:	fe 01       	movw	r30, r28
    2198:	c1 92       	st	Z+, r12
    219a:	d1 92       	st	Z+, r13
    219c:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    219e:	cf 01       	movw	r24, r30
    21a0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    21a4:	ce 01       	movw	r24, r28
    21a6:	0c 96       	adiw	r24, 0x0c	; 12
    21a8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    21ac:	d9 87       	std	Y+9, r29	; 0x09
    21ae:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    21b0:	db 8b       	std	Y+19, r29	; 0x13
    21b2:	ca 8b       	std	Y+18, r28	; 0x12

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	8e 19       	sub	r24, r14
    21ba:	91 09       	sbc	r25, r1
    21bc:	9d 87       	std	Y+13, r25	; 0x0d
    21be:	8c 87       	std	Y+12, r24	; 0x0c

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    21c0:	9e 89       	ldd	r25, Y+22	; 0x16
    21c2:	80 91 be 01 	lds	r24, 0x01BE
    21c6:	89 17       	cp	r24, r25
    21c8:	10 f4       	brcc	.+4      	; 0x21ce <xCoRoutineCreate+0xca>
    21ca:	90 93 be 01 	sts	0x01BE, r25
    21ce:	89 e0       	ldi	r24, 0x09	; 9
    21d0:	98 9f       	mul	r25, r24
    21d2:	c0 01       	movw	r24, r0
    21d4:	11 24       	eor	r1, r1
    21d6:	8b 53       	subi	r24, 0x3B	; 59
    21d8:	9e 4f       	sbci	r25, 0xFE	; 254
    21da:	b8 01       	movw	r22, r16
    21dc:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vListInsertEnd>
    21e0:	81 e0       	ldi	r24, 0x01	; 1
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}

	return xReturn;
}
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	df 90       	pop	r13
    21f0:	cf 90       	pop	r12
    21f2:	bf 90       	pop	r11
    21f4:	af 90       	pop	r10
    21f6:	08 95       	ret

000021f8 <vPortFree>:
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    21f8:	08 95       	ret

000021fa <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    21fa:	10 92 f7 01 	sts	0x01F7, r1
    21fe:	10 92 f6 01 	sts	0x01F6, r1
}
    2202:	08 95       	ret

00002204 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2204:	2b ed       	ldi	r18, 0xDB	; 219
    2206:	35 e0       	ldi	r19, 0x05	; 5
    2208:	80 91 f6 01 	lds	r24, 0x01F6
    220c:	90 91 f7 01 	lds	r25, 0x01F7
    2210:	28 1b       	sub	r18, r24
    2212:	39 0b       	sbc	r19, r25
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
}
    2214:	c9 01       	movw	r24, r18
    2216:	08 95       	ret

00002218 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    221e:	0e 94 76 03 	call	0x6ec	; 0x6ec <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    2222:	80 91 f8 01 	lds	r24, 0x01F8
    2226:	90 91 f9 01 	lds	r25, 0x01F9
    222a:	89 2b       	or	r24, r25
    222c:	31 f4       	brne	.+12     	; 0x223a <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    222e:	8b ef       	ldi	r24, 0xFB	; 251
    2230:	91 e0       	ldi	r25, 0x01	; 1
    2232:	90 93 f9 01 	sts	0x01F9, r25
    2236:	80 93 f8 01 	sts	0x01F8, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    223a:	20 91 f6 01 	lds	r18, 0x01F6
    223e:	30 91 f7 01 	lds	r19, 0x01F7
    2242:	ce 01       	movw	r24, r28
    2244:	82 0f       	add	r24, r18
    2246:	93 1f       	adc	r25, r19
    2248:	45 e0       	ldi	r20, 0x05	; 5
    224a:	8b 3d       	cpi	r24, 0xDB	; 219
    224c:	94 07       	cpc	r25, r20
    224e:	70 f4       	brcc	.+28     	; 0x226c <pvPortMalloc+0x54>
    2250:	28 17       	cp	r18, r24
    2252:	39 07       	cpc	r19, r25
    2254:	58 f4       	brcc	.+22     	; 0x226c <pvPortMalloc+0x54>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2256:	c0 91 f8 01 	lds	r28, 0x01F8
    225a:	d0 91 f9 01 	lds	r29, 0x01F9
    225e:	c2 0f       	add	r28, r18
    2260:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    2262:	90 93 f7 01 	sts	0x01F7, r25
    2266:	80 93 f6 01 	sts	0x01F6, r24
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <pvPortMalloc+0x58>
    226c:	c0 e0       	ldi	r28, 0x00	; 0
    226e:	d0 e0       	ldi	r29, 0x00	; 0
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2270:	0e 94 b8 06 	call	0xd70	; 0xd70 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    2274:	ce 01       	movw	r24, r28
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	08 95       	ret

0000227c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    227c:	fc 01       	movw	r30, r24
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    227e:	91 e1       	ldi	r25, 0x11	; 17
    2280:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    2282:	22 e2       	ldi	r18, 0x22	; 34
    2284:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    2286:	83 e3       	ldi	r24, 0x33	; 51
    2288:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    228a:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    228c:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    228e:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2290:	80 e8       	ldi	r24, 0x80	; 128
    2292:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    2294:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    229a:	83 e0       	ldi	r24, 0x03	; 3
    229c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    229e:	84 e0       	ldi	r24, 0x04	; 4
    22a0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    22a2:	85 e0       	ldi	r24, 0x05	; 5
    22a4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    22a6:	86 e0       	ldi	r24, 0x06	; 6
    22a8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    22aa:	87 e0       	ldi	r24, 0x07	; 7
    22ac:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    22ae:	88 e0       	ldi	r24, 0x08	; 8
    22b0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    22b2:	89 e0       	ldi	r24, 0x09	; 9
    22b4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    22b6:	80 e1       	ldi	r24, 0x10	; 16
    22b8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    22ba:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    22bc:	82 e1       	ldi	r24, 0x12	; 18
    22be:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    22c0:	83 e1       	ldi	r24, 0x13	; 19
    22c2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    22c4:	84 e1       	ldi	r24, 0x14	; 20
    22c6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    22c8:	85 e1       	ldi	r24, 0x15	; 21
    22ca:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    22cc:	86 e1       	ldi	r24, 0x16	; 22
    22ce:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    22d0:	87 e1       	ldi	r24, 0x17	; 23
    22d2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    22d4:	88 e1       	ldi	r24, 0x18	; 24
    22d6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    22d8:	89 e1       	ldi	r24, 0x19	; 25
    22da:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    22dc:	80 e2       	ldi	r24, 0x20	; 32
    22de:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    22e0:	81 e2       	ldi	r24, 0x21	; 33
    22e2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    22e4:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    22e6:	83 e2       	ldi	r24, 0x23	; 35
    22e8:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22ea:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22ec:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    22ee:	86 e2       	ldi	r24, 0x26	; 38
    22f0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    22f2:	87 e2       	ldi	r24, 0x27	; 39
    22f4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    22f6:	88 e2       	ldi	r24, 0x28	; 40
    22f8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    22fa:	89 e2       	ldi	r24, 0x29	; 41
    22fc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    22fe:	80 e3       	ldi	r24, 0x30	; 48
    2300:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    2302:	81 e3       	ldi	r24, 0x31	; 49
    2304:	82 93       	st	-Z, r24
    2306:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    2308:	cf 01       	movw	r24, r30
    230a:	08 95       	ret

0000230c <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    230c:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = ucLowByte;
    2310:	8c e7       	ldi	r24, 0x7C	; 124
    2312:	80 93 88 00 	sts	0x0088, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    2316:	8b e0       	ldi	r24, 0x0B	; 11
    2318:	80 93 81 00 	sts	0x0081, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    231c:	ef e6       	ldi	r30, 0x6F	; 111
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2322:	82 60       	ori	r24, 0x02	; 2
	TIMSK1 = ucLowByte;
    2324:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2326:	a0 91 5f 01 	lds	r26, 0x015F
    232a:	b0 91 60 01 	lds	r27, 0x0160
    232e:	cd 91       	ld	r28, X+
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	dd 91       	ld	r29, X+
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	ff 91       	pop	r31
    2338:	ef 91       	pop	r30
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	bf 91       	pop	r27
    2340:	af 91       	pop	r26
    2342:	9f 91       	pop	r25
    2344:	8f 91       	pop	r24
    2346:	7f 91       	pop	r23
    2348:	6f 91       	pop	r22
    234a:	5f 91       	pop	r21
    234c:	4f 91       	pop	r20
    234e:	3f 91       	pop	r19
    2350:	2f 91       	pop	r18
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	bf 90       	pop	r11
    2360:	af 90       	pop	r10
    2362:	9f 90       	pop	r9
    2364:	8f 90       	pop	r8
    2366:	7f 90       	pop	r7
    2368:	6f 90       	pop	r6
    236a:	5f 90       	pop	r5
    236c:	4f 90       	pop	r4
    236e:	3f 90       	pop	r3
    2370:	2f 90       	pop	r2
    2372:	1f 90       	pop	r1
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    237a:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	08 95       	ret

00002380 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2380:	08 95       	ret

00002382 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	0f 92       	push	r0
    238a:	1f 92       	push	r1
    238c:	11 24       	eor	r1, r1
    238e:	2f 92       	push	r2
    2390:	3f 92       	push	r3
    2392:	4f 92       	push	r4
    2394:	5f 92       	push	r5
    2396:	6f 92       	push	r6
    2398:	7f 92       	push	r7
    239a:	8f 92       	push	r8
    239c:	9f 92       	push	r9
    239e:	af 92       	push	r10
    23a0:	bf 92       	push	r11
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	2f 93       	push	r18
    23b0:	3f 93       	push	r19
    23b2:	4f 93       	push	r20
    23b4:	5f 93       	push	r21
    23b6:	6f 93       	push	r22
    23b8:	7f 93       	push	r23
    23ba:	8f 93       	push	r24
    23bc:	9f 93       	push	r25
    23be:	af 93       	push	r26
    23c0:	bf 93       	push	r27
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	ef 93       	push	r30
    23c8:	ff 93       	push	r31
    23ca:	a0 91 5f 01 	lds	r26, 0x015F
    23ce:	b0 91 60 01 	lds	r27, 0x0160
    23d2:	0d b6       	in	r0, 0x3d	; 61
    23d4:	0d 92       	st	X+, r0
    23d6:	0e b6       	in	r0, 0x3e	; 62
    23d8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    23da:	0e 94 85 05 	call	0xb0a	; 0xb0a <xTaskIncrementTick>
    23de:	88 23       	and	r24, r24
    23e0:	11 f0       	breq	.+4      	; 0x23e6 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    23e2:	0e 94 9b 03 	call	0x736	; 0x736 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    23e6:	a0 91 5f 01 	lds	r26, 0x015F
    23ea:	b0 91 60 01 	lds	r27, 0x0160
    23ee:	cd 91       	ld	r28, X+
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	dd 91       	ld	r29, X+
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	ff 91       	pop	r31
    23f8:	ef 91       	pop	r30
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	9f 90       	pop	r9
    2424:	8f 90       	pop	r8
    2426:	7f 90       	pop	r7
    2428:	6f 90       	pop	r6
    242a:	5f 90       	pop	r5
    242c:	4f 90       	pop	r4
    242e:	3f 90       	pop	r3
    2430:	2f 90       	pop	r2
    2432:	1f 90       	pop	r1
    2434:	0f 90       	pop	r0
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	0f 90       	pop	r0

	asm volatile ( "ret" );
    243a:	08 95       	ret

0000243c <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    243c:	0e 94 c1 11 	call	0x2382	; 0x2382 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2440:	18 95       	reti

00002442 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2442:	0f 92       	push	r0
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	0f 92       	push	r0
    244a:	1f 92       	push	r1
    244c:	11 24       	eor	r1, r1
    244e:	2f 92       	push	r2
    2450:	3f 92       	push	r3
    2452:	4f 92       	push	r4
    2454:	5f 92       	push	r5
    2456:	6f 92       	push	r6
    2458:	7f 92       	push	r7
    245a:	8f 92       	push	r8
    245c:	9f 92       	push	r9
    245e:	af 92       	push	r10
    2460:	bf 92       	push	r11
    2462:	cf 92       	push	r12
    2464:	df 92       	push	r13
    2466:	ef 92       	push	r14
    2468:	ff 92       	push	r15
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	2f 93       	push	r18
    2470:	3f 93       	push	r19
    2472:	4f 93       	push	r20
    2474:	5f 93       	push	r21
    2476:	6f 93       	push	r22
    2478:	7f 93       	push	r23
    247a:	8f 93       	push	r24
    247c:	9f 93       	push	r25
    247e:	af 93       	push	r26
    2480:	bf 93       	push	r27
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	ef 93       	push	r30
    2488:	ff 93       	push	r31
    248a:	a0 91 5f 01 	lds	r26, 0x015F
    248e:	b0 91 60 01 	lds	r27, 0x0160
    2492:	0d b6       	in	r0, 0x3d	; 61
    2494:	0d 92       	st	X+, r0
    2496:	0e b6       	in	r0, 0x3e	; 62
    2498:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    249a:	0e 94 9b 03 	call	0x736	; 0x736 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    249e:	a0 91 5f 01 	lds	r26, 0x015F
    24a2:	b0 91 60 01 	lds	r27, 0x0160
    24a6:	cd 91       	ld	r28, X+
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	dd 91       	ld	r29, X+
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	bf 91       	pop	r27
    24b8:	af 91       	pop	r26
    24ba:	9f 91       	pop	r25
    24bc:	8f 91       	pop	r24
    24be:	7f 91       	pop	r23
    24c0:	6f 91       	pop	r22
    24c2:	5f 91       	pop	r21
    24c4:	4f 91       	pop	r20
    24c6:	3f 91       	pop	r19
    24c8:	2f 91       	pop	r18
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	bf 90       	pop	r11
    24d8:	af 90       	pop	r10
    24da:	9f 90       	pop	r9
    24dc:	8f 90       	pop	r8
    24de:	7f 90       	pop	r7
    24e0:	6f 90       	pop	r6
    24e2:	5f 90       	pop	r5
    24e4:	4f 90       	pop	r4
    24e6:	3f 90       	pop	r3
    24e8:	2f 90       	pop	r2
    24ea:	1f 90       	pop	r1
    24ec:	0f 90       	pop	r0
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	0f 90       	pop	r0

	asm volatile ( "ret" );
    24f2:	08 95       	ret

000024f4 <xAreFlashCoRoutinesStillRunning>:
BaseType_t xAreFlashCoRoutinesStillRunning( void )
{
	/* Return pdPASS or pdFAIL depending on whether an error has been detected
	or not. */
	return xCoRoutineFlashStatus;
}
    24f4:	80 91 24 01 	lds	r24, 0x0124
    24f8:	08 95       	ret

000024fa <vStartFlashCoRoutines>:

/*
 * See the header file for details.
 */
void vStartFlashCoRoutines( UBaseType_t uxNumberToCreate )
{
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	08 2f       	mov	r16, r24
    2500:	89 30       	cpi	r24, 0x09	; 9
    2502:	08 f0       	brcs	.+2      	; 0x2506 <vStartFlashCoRoutines+0xc>
    2504:	08 e0       	ldi	r16, 0x08	; 8
	{
		uxNumberToCreate = crfMAX_FLASH_TASKS;
	}

	/* Create the queue used to pass data between the co-routines. */
	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( UBaseType_t ) );
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <xQueueGenericCreate>
    2510:	90 93 d7 07 	sts	0x07D7, r25
    2514:	80 93 d6 07 	sts	0x07D6, r24

	if( xFlashQueue )
    2518:	89 2b       	or	r24, r25
    251a:	89 f0       	breq	.+34     	; 0x253e <vStartFlashCoRoutines+0x44>
    251c:	10 e0       	ldi	r17, 0x00	; 0
    251e:	07 c0       	rjmp	.+14     	; 0x252e <vStartFlashCoRoutines+0x34>
	{
		/* Create uxNumberToCreate 'fixed delay' co-routines. */
		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
		{
			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
    2520:	89 ee       	ldi	r24, 0xE9	; 233
    2522:	92 e1       	ldi	r25, 0x12	; 18
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	41 2f       	mov	r20, r17
    2528:	0e 94 82 10 	call	0x2104	; 0x2104 <xCoRoutineCreate>
	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( UBaseType_t ) );

	if( xFlashQueue )
	{
		/* Create uxNumberToCreate 'fixed delay' co-routines. */
		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
    252c:	1f 5f       	subi	r17, 0xFF	; 255
    252e:	10 17       	cp	r17, r16
    2530:	b8 f3       	brcs	.-18     	; 0x2520 <vStartFlashCoRoutines+0x26>
		{
			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
		}

		/* Create the 'flash' co-routine. */
		xCoRoutineCreate( prvFlashCoRoutine, crfFLASH_PRIORITY, crfFLASH_INDEX );
    2532:	82 ea       	ldi	r24, 0xA2	; 162
    2534:	92 e1       	ldi	r25, 0x12	; 18
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	0e 94 82 10 	call	0x2104	; 0x2104 <xCoRoutineCreate>
	}
}
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	08 95       	ret

00002544 <prvFlashCoRoutine>:
	crEND();
}
/*-----------------------------------------------------------*/

static void prvFlashCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	0f 92       	push	r0
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
static as we do not need it to maintain their state between blocks. */
BaseType_t xResult;
UBaseType_t uxLEDToFlash;

	/* Co-routines MUST start with a call to crSTART. */
	crSTART( xHandle );
    2552:	8c 01       	movw	r16, r24
    2554:	fc 01       	movw	r30, r24
    2556:	80 8d       	ldd	r24, Z+24	; 0x18
    2558:	91 8d       	ldd	r25, Z+25	; 0x19
    255a:	f1 e0       	ldi	r31, 0x01	; 1
    255c:	82 3c       	cpi	r24, 0xC2	; 194
    255e:	9f 07       	cpc	r25, r31
    2560:	b1 f0       	breq	.+44     	; 0x258e <prvFlashCoRoutine+0x4a>
    2562:	21 e0       	ldi	r18, 0x01	; 1
    2564:	83 3c       	cpi	r24, 0xC3	; 195
    2566:	92 07       	cpc	r25, r18
    2568:	51 f1       	breq	.+84     	; 0x25be <prvFlashCoRoutine+0x7a>
    256a:	89 2b       	or	r24, r25
    256c:	61 f5       	brne	.+88     	; 0x25c6 <prvFlashCoRoutine+0x82>
	( void ) uxIndex;
	
	for( ;; )
	{
		/* Block to wait for the number of the LED to flash. */
		crQUEUE_RECEIVE( xHandle, xFlashQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );		
    256e:	80 91 d6 07 	lds	r24, 0x07D6
    2572:	90 91 d7 07 	lds	r25, 0x07D7
    2576:	be 01       	movw	r22, r28
    2578:	6f 5f       	subi	r22, 0xFF	; 255
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	4f ef       	ldi	r20, 0xFF	; 255
    257e:	5f ef       	ldi	r21, 0xFF	; 255
    2580:	0e 94 9f 0b 	call	0x173e	; 0x173e <xQueueCRReceive>
    2584:	8c 3f       	cpi	r24, 0xFC	; 252
    2586:	71 f4       	brne	.+28     	; 0x25a4 <prvFlashCoRoutine+0x60>
    2588:	82 ec       	ldi	r24, 0xC2	; 194
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <prvFlashCoRoutine+0x68>
    258e:	80 91 d6 07 	lds	r24, 0x07D6
    2592:	90 91 d7 07 	lds	r25, 0x07D7
    2596:	be 01       	movw	r22, r28
    2598:	6f 5f       	subi	r22, 0xFF	; 255
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	0e 94 9f 0b 	call	0x173e	; 0x173e <xQueueCRReceive>
    25a4:	8b 3f       	cpi	r24, 0xFB	; 251
    25a6:	31 f4       	brne	.+12     	; 0x25b4 <prvFlashCoRoutine+0x70>
    25a8:	83 ec       	ldi	r24, 0xC3	; 195
    25aa:	91 e0       	ldi	r25, 0x01	; 1
    25ac:	f8 01       	movw	r30, r16
    25ae:	91 8f       	std	Z+25, r25	; 0x19
    25b0:	80 8f       	std	Z+24, r24	; 0x18
    25b2:	09 c0       	rjmp	.+18     	; 0x25c6 <prvFlashCoRoutine+0x82>

		if( xResult != pdPASS )
    25b4:	81 30       	cpi	r24, 0x01	; 1
    25b6:	19 f0       	breq	.+6      	; 0x25be <prvFlashCoRoutine+0x7a>
		{
			/* We would not expect to wake unless we received something. */
			xCoRoutineFlashStatus = pdFAIL;
    25b8:	10 92 24 01 	sts	0x0124, r1
    25bc:	d8 cf       	rjmp	.-80     	; 0x256e <prvFlashCoRoutine+0x2a>
		}
		else
		{
			/* We received the number of an LED to flash - flash it! */
			vParTestToggleLED( uxLEDToFlash );
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	0e 94 c4 00 	call	0x188	; 0x188 <vParTestToggleLED>
    25c4:	d4 cf       	rjmp	.-88     	; 0x256e <prvFlashCoRoutine+0x2a>
		}
	}

	/* Co-routines MUST end with a call to crEND. */
	crEND();
}
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <prvFixedDelayCoRoutine>:
	}
}
/*-----------------------------------------------------------*/

static void prvFixedDelayCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	69 83       	std	Y+1, r22	; 0x01
																400 / portTICK_PERIOD_MS,
																450 / portTICK_PERIOD_MS,
																500  / portTICK_PERIOD_MS };

	/* Co-routines MUST start with a call to crSTART. */
	crSTART( xHandle );
    25e2:	8c 01       	movw	r16, r24
    25e4:	fc 01       	movw	r30, r24
    25e6:	80 8d       	ldd	r24, Z+24	; 0x18
    25e8:	91 8d       	ldd	r25, Z+25	; 0x19
    25ea:	f1 e0       	ldi	r31, 0x01	; 1
    25ec:	82 38       	cpi	r24, 0x82	; 130
    25ee:	9f 07       	cpc	r25, r31
    25f0:	f1 f0       	breq	.+60     	; 0x262e <prvFixedDelayCoRoutine+0x5c>
    25f2:	21 e0       	ldi	r18, 0x01	; 1
    25f4:	83 38       	cpi	r24, 0x83	; 131
    25f6:	92 07       	cpc	r25, r18
    25f8:	18 f4       	brcc	.+6      	; 0x2600 <prvFixedDelayCoRoutine+0x2e>
    25fa:	89 2b       	or	r24, r25
    25fc:	41 f0       	breq	.+16     	; 0x260e <prvFixedDelayCoRoutine+0x3c>
    25fe:	3e c0       	rjmp	.+124    	; 0x267c <prvFixedDelayCoRoutine+0xaa>
    2600:	e1 e0       	ldi	r30, 0x01	; 1
    2602:	83 38       	cpi	r24, 0x83	; 131
    2604:	9e 07       	cpc	r25, r30
    2606:	39 f1       	breq	.+78     	; 0x2656 <prvFixedDelayCoRoutine+0x84>
    2608:	86 59       	subi	r24, 0x96	; 150
    260a:	91 40       	sbci	r25, 0x01	; 1
    260c:	b9 f5       	brne	.+110    	; 0x267c <prvFixedDelayCoRoutine+0xaa>

	for( ;; )
	{
		/* Post our uxIndex value onto the queue.  This is used as the LED to
		flash. */
		crQUEUE_SEND( xHandle, xFlashQueue, ( void * ) &uxIndex, crfPOSTING_BLOCK_TIME, &xResult );
    260e:	80 91 d6 07 	lds	r24, 0x07D6
    2612:	90 91 d7 07 	lds	r25, 0x07D7
    2616:	be 01       	movw	r22, r28
    2618:	6f 5f       	subi	r22, 0xFF	; 255
    261a:	7f 4f       	sbci	r23, 0xFF	; 255
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xQueueCRSend>
    2624:	8c 3f       	cpi	r24, 0xFC	; 252
    2626:	71 f4       	brne	.+28     	; 0x2644 <prvFixedDelayCoRoutine+0x72>
    2628:	82 e8       	ldi	r24, 0x82	; 130
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	24 c0       	rjmp	.+72     	; 0x2676 <prvFixedDelayCoRoutine+0xa4>
    262e:	80 91 d6 07 	lds	r24, 0x07D6
    2632:	90 91 d7 07 	lds	r25, 0x07D7
    2636:	be 01       	movw	r22, r28
    2638:	6f 5f       	subi	r22, 0xFF	; 255
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	40 e0       	ldi	r20, 0x00	; 0
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xQueueCRSend>
    2644:	8b 3f       	cpi	r24, 0xFB	; 251
    2646:	19 f4       	brne	.+6      	; 0x264e <prvFixedDelayCoRoutine+0x7c>
    2648:	83 e8       	ldi	r24, 0x83	; 131
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <prvFixedDelayCoRoutine+0xa4>

		if( xResult != pdPASS )
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	11 f0       	breq	.+4      	; 0x2656 <prvFixedDelayCoRoutine+0x84>
		{
			/* For the reasons stated at the top of the file we should always
			find that we can post to the queue.  If we could not then an error
			has occurred. */
			xCoRoutineFlashStatus = pdFAIL;
    2652:	10 92 24 01 	sts	0x0124, r1
		}

		crDELAY( xHandle, xFlashRates[ uxIndex ] );
    2656:	e9 81       	ldd	r30, Y+1	; 0x01
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	ee 0f       	add	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	eb 5d       	subi	r30, 0xDB	; 219
    2660:	fe 4f       	sbci	r31, 0xFE	; 254
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	21 f0       	breq	.+8      	; 0x2672 <prvFixedDelayCoRoutine+0xa0>
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	0e 94 45 10 	call	0x208a	; 0x208a <vCoRoutineAddToDelayedList>
    2672:	86 e9       	ldi	r24, 0x96	; 150
    2674:	91 e0       	ldi	r25, 0x01	; 1
    2676:	f8 01       	movw	r30, r16
    2678:	91 8f       	std	Z+25, r25	; 0x19
    267a:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Co-routines MUST end with a call to crEND. */
	crEND();
}
    267c:	0f 90       	pop	r0
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	08 95       	ret

00002688 <vCompeteingIntMathTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    2688:	9f 92       	push	r9
    268a:	af 92       	push	r10
    268c:	bf 92       	push	r11
    268e:	cf 92       	push	r12
    2690:	df 92       	push	r13
    2692:	ef 92       	push	r14
    2694:	ff 92       	push	r15
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <vCompeteingIntMathTask+0x18>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <vCompeteingIntMathTask+0x1a>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
    26a6:	8c 01       	movw	r16, r24
    26a8:	ee 24       	eor	r14, r14
    26aa:	ff 24       	eor	r15, r15
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    26ac:	9b e7       	ldi	r25, 0x7B	; 123
    26ae:	a9 2e       	mov	r10, r25
    26b0:	b1 2c       	mov	r11, r1
    26b2:	c1 2c       	mov	r12, r1
    26b4:	d1 2c       	mov	r13, r1
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
				*pxTaskHasExecuted = pdTRUE;
    26b6:	99 24       	eor	r9, r9
    26b8:	93 94       	inc	r9
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <vCompeteingIntMathTask+0x3a>
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	e8 2e       	mov	r14, r24
    26c0:	f1 2c       	mov	r15, r1
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    26c2:	a9 82       	std	Y+1, r10	; 0x01
    26c4:	ba 82       	std	Y+2, r11	; 0x02
    26c6:	cb 82       	std	Y+3, r12	; 0x03
    26c8:	dc 82       	std	Y+4, r13	; 0x04
		lValue += intgCONST2;
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	ab 81       	ldd	r26, Y+3	; 0x03
    26d0:	bc 81       	ldd	r27, Y+4	; 0x04
    26d2:	89 5b       	subi	r24, 0xB9	; 185
    26d4:	9b 46       	sbci	r25, 0x6B	; 107
    26d6:	ac 4f       	sbci	r26, 0xFC	; 252
    26d8:	bf 4f       	sbci	r27, 0xFF	; 255
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	9a 83       	std	Y+2, r25	; 0x02
    26de:	ab 83       	std	Y+3, r26	; 0x03
    26e0:	bc 83       	std	Y+4, r27	; 0x04
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
    26e2:	69 81       	ldd	r22, Y+1	; 0x01
    26e4:	7a 81       	ldd	r23, Y+2	; 0x02
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	2d ef       	ldi	r18, 0xFD	; 253
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f ef       	ldi	r20, 0xFF	; 255
    26f0:	5f ef       	ldi	r21, 0xFF	; 255
    26f2:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__mulsi3>
    26f6:	69 83       	std	Y+1, r22	; 0x01
    26f8:	7a 83       	std	Y+2, r23	; 0x02
    26fa:	8b 83       	std	Y+3, r24	; 0x03
    26fc:	9c 83       	std	Y+4, r25	; 0x04
		lValue /= intgCONST4;
    26fe:	69 81       	ldd	r22, Y+1	; 0x01
    2700:	7a 81       	ldd	r23, Y+2	; 0x02
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	27 e0       	ldi	r18, 0x07	; 7
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__divmodsi4>
    2712:	c9 01       	movw	r24, r18
    2714:	da 01       	movw	r26, r20
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	ab 83       	std	Y+3, r26	; 0x03
    271c:	bc 83       	std	Y+4, r27	; 0x04

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	ab 81       	ldd	r26, Y+3	; 0x03
    2724:	bc 81       	ldd	r27, Y+4	; 0x04
    2726:	8b 51       	subi	r24, 0x1B	; 27
    2728:	97 47       	sbci	r25, 0x77	; 119
    272a:	ae 4f       	sbci	r26, 0xFE	; 254
    272c:	bf 4f       	sbci	r27, 0xFF	; 255
    272e:	31 f6       	brne	.-116    	; 0x26bc <vCompeteingIntMathTask+0x34>
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    2730:	e1 14       	cp	r14, r1
    2732:	f1 04       	cpc	r15, r1
    2734:	09 f0       	breq	.+2      	; 0x2738 <vCompeteingIntMathTask+0xb0>
    2736:	c2 cf       	rjmp	.-124    	; 0x26bc <vCompeteingIntMathTask+0x34>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	0f 92       	push	r0
				*pxTaskHasExecuted = pdTRUE;
    273e:	f8 01       	movw	r30, r16
    2740:	90 82       	st	Z, r9
			portEXIT_CRITICAL();
    2742:	0f 90       	pop	r0
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	bd cf       	rjmp	.-134    	; 0x26c2 <vCompeteingIntMathTask+0x3a>

00002748 <xAreIntegerMathsTaskStillRunning>:

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
    2748:	80 91 d8 07 	lds	r24, 0x07D8
			xReturn = pdFALSE;
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
    274c:	10 92 d8 07 	sts	0x07D8, r1
    2750:	81 11       	cpse	r24, r1
    2752:	81 e0       	ldi	r24, 0x01	; 1
	}

	return xReturn;
}
    2754:	08 95       	ret

00002756 <vStartIntegerMathTasks>:
static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	08 2f       	mov	r16, r24
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
    275e:	84 e4       	ldi	r24, 0x44	; 68
    2760:	93 e1       	ldi	r25, 0x13	; 19
    2762:	65 e3       	ldi	r22, 0x35	; 53
    2764:	71 e0       	ldi	r23, 0x01	; 1
    2766:	45 e5       	ldi	r20, 0x55	; 85
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	28 ed       	ldi	r18, 0xD8	; 216
    276c:	37 e0       	ldi	r19, 0x07	; 7
    276e:	ee 24       	eor	r14, r14
    2770:	ff 24       	eor	r15, r15
    2772:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
	}
}
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	ef 90       	pop	r14
    277c:	08 95       	ret

0000277e <xArePollingQueuesStillRunning>:

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
    277e:	80 91 d9 07 	lds	r24, 0x07D9
    2782:	88 23       	and	r24, r24
    2784:	21 f0       	breq	.+8      	; 0x278e <xArePollingQueuesStillRunning+0x10>
    2786:	80 91 da 07 	lds	r24, 0x07DA
    278a:	81 11       	cpse	r24, r1
    278c:	81 e0       	ldi	r24, 0x01	; 1
		xReturn = pdTRUE;
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
    278e:	10 92 d9 07 	sts	0x07D9, r1
	xPollingProducerCount = pollqINITIAL_VALUE;
    2792:	10 92 da 07 	sts	0x07DA, r1

	return xReturn;
}
    2796:	08 95       	ret

00002798 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
    2798:	ef 92       	push	r14
    279a:	ff 92       	push	r15
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	18 2f       	mov	r17, r24
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
    27a2:	8a e0       	ldi	r24, 0x0A	; 10
    27a4:	62 e0       	ldi	r22, 0x02	; 2
    27a6:	40 e0       	ldi	r20, 0x00	; 0
    27a8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <xQueueGenericCreate>
    27ac:	90 93 dc 07 	sts	0x07DC, r25
    27b0:	80 93 db 07 	sts	0x07DB, r24

	if( xPolledQueue != NULL )
    27b4:	89 2b       	or	r24, r25
    27b6:	b9 f0       	breq	.+46     	; 0x27e6 <vStartPolledQueueTasks+0x4e>
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

		/* Spawn the producer and consumer. */
		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
    27b8:	84 e3       	ldi	r24, 0x34	; 52
    27ba:	94 e1       	ldi	r25, 0x14	; 20
    27bc:	6d e3       	ldi	r22, 0x3D	; 61
    27be:	71 e0       	ldi	r23, 0x01	; 1
    27c0:	45 e5       	ldi	r20, 0x55	; 85
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	2b ed       	ldi	r18, 0xDB	; 219
    27c6:	37 e0       	ldi	r19, 0x07	; 7
    27c8:	01 2f       	mov	r16, r17
    27ca:	ee 24       	eor	r14, r14
    27cc:	ff 24       	eor	r15, r15
    27ce:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
    27d2:	88 ef       	ldi	r24, 0xF8	; 248
    27d4:	93 e1       	ldi	r25, 0x13	; 19
    27d6:	65 e4       	ldi	r22, 0x45	; 69
    27d8:	71 e0       	ldi	r23, 0x01	; 1
    27da:	45 e5       	ldi	r20, 0x55	; 85
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	2b ed       	ldi	r18, 0xDB	; 219
    27e0:	37 e0       	ldi	r19, 0x07	; 7
    27e2:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
	}
}
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	ff 90       	pop	r15
    27ec:	ef 90       	pop	r14
    27ee:	08 95       	ret

000027f0 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
    27f0:	cf 92       	push	r12
    27f2:	df 92       	push	r13
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <vPolledQueueProducer+0x12>
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	7c 01       	movw	r14, r24
uint16_t usValue = ( uint16_t ) 0;
    2808:	1a 82       	std	Y+2, r1	; 0x02
    280a:	19 82       	std	Y+1, r1	; 0x01
    280c:	00 e0       	ldi	r16, 0x00	; 0
    280e:	10 e0       	ldi	r17, 0x00	; 0
	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
    2810:	6e 01       	movw	r12, r28
    2812:	08 94       	sec
    2814:	c1 1c       	adc	r12, r1
    2816:	d1 1c       	adc	r13, r1
    2818:	1f c0       	rjmp	.+62     	; 0x2858 <vPolledQueueProducer+0x68>
    281a:	f7 01       	movw	r30, r14
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	b6 01       	movw	r22, r12
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <xQueueGenericSend>
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	11 f0       	breq	.+4      	; 0x2834 <vPolledQueueProducer+0x44>
    2830:	01 e0       	ldi	r16, 0x01	; 1
    2832:	11 c0       	rjmp	.+34     	; 0x2856 <vPolledQueueProducer+0x66>
				has been an error. */
				xError = pdTRUE;
			}
			else
			{
				if( xError == pdFALSE )
    2834:	00 23       	and	r16, r16
    2836:	51 f4       	brne	.+20     	; 0x284c <vPolledQueueProducer+0x5c>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	0f 92       	push	r0
						xPollingProducerCount++;
    283e:	80 91 da 07 	lds	r24, 0x07DA
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	80 93 da 07 	sts	0x07DA, r24
					portEXIT_CRITICAL();
    2848:	0f 90       	pop	r0
    284a:	0f be       	out	0x3f, r0	; 63
				}

				/* Update the value we are going to post next time around. */
				usValue++;
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
    2856:	1f 5f       	subi	r17, 0xFF	; 255
    2858:	13 30       	cpi	r17, 0x03	; 3
    285a:	fc f2       	brlt	.-66     	; 0x281a <vPolledQueueProducer+0x2a>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
    285c:	83 e0       	ldi	r24, 0x03	; 3
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 7d 08 	call	0x10fa	; 0x10fa <vTaskDelay>
    2864:	10 e0       	ldi	r17, 0x00	; 0
    2866:	d9 cf       	rjmp	.-78     	; 0x281a <vPolledQueueProducer+0x2a>

00002868 <vPolledQueueConsumer>:
	}
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
    2868:	9f 92       	push	r9
    286a:	af 92       	push	r10
    286c:	bf 92       	push	r11
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	ff 92       	push	r15
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	00 d0       	rcall	.+0      	; 0x2880 <vPolledQueueConsumer+0x18>
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	98 2e       	mov	r9, r24
    2886:	c9 2e       	mov	r12, r25
    2888:	dd 24       	eor	r13, r13
    288a:	ee 24       	eor	r14, r14
    288c:	ff 24       	eor	r15, r15
	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
    288e:	5e 01       	movw	r10, r28
    2890:	08 94       	sec
    2892:	a1 1c       	adc	r10, r1
    2894:	b1 1c       	adc	r11, r1
    2896:	23 c0       	rjmp	.+70     	; 0x28de <vPolledQueueConsumer+0x76>
    2898:	f8 01       	movw	r30, r16
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	b5 01       	movw	r22, r10
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	0e 94 df 0c 	call	0x19be	; 0x19be <xQueueGenericReceive>
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	c1 f4       	brne	.+48     	; 0x28de <vPolledQueueConsumer+0x76>
			{
				if( usData != usExpectedValue )
    28ae:	29 81       	ldd	r18, Y+1	; 0x01
    28b0:	3a 81       	ldd	r19, Y+2	; 0x02
    28b2:	2e 15       	cp	r18, r14
    28b4:	3f 05       	cpc	r19, r15
    28b6:	19 f0       	breq	.+6      	; 0x28be <vPolledQueueConsumer+0x56>
    28b8:	dd 24       	eor	r13, r13
    28ba:	d3 94       	inc	r13
    28bc:	0c c0       	rjmp	.+24     	; 0x28d6 <vPolledQueueConsumer+0x6e>
					value should again be correct. */
					usExpectedValue = usData;
				}
				else
				{
					if( xError == pdFALSE )
    28be:	dd 20       	and	r13, r13
    28c0:	51 f4       	brne	.+20     	; 0x28d6 <vPolledQueueConsumer+0x6e>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	0f 92       	push	r0
							xPollingConsumerCount++;
    28c8:	80 91 d9 07 	lds	r24, 0x07D9
    28cc:	8f 5f       	subi	r24, 0xFF	; 255
    28ce:	80 93 d9 07 	sts	0x07D9, r24
						portEXIT_CRITICAL();
    28d2:	0f 90       	pop	r0
    28d4:	0f be       	out	0x3f, r0	; 63
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
    28d6:	79 01       	movw	r14, r18
    28d8:	08 94       	sec
    28da:	e1 1c       	adc	r14, r1
    28dc:	f1 1c       	adc	r15, r1
BaseType_t xError = pdFALSE;

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
    28de:	09 2d       	mov	r16, r9
    28e0:	1c 2d       	mov	r17, r12
    28e2:	f8 01       	movw	r30, r16
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <uxQueueMessagesWaiting>
    28ec:	88 23       	and	r24, r24
    28ee:	a1 f6       	brne	.-88     	; 0x2898 <vPolledQueueConsumer+0x30>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
    28f0:	8f ee       	ldi	r24, 0xEF	; 239
    28f2:	9f ef       	ldi	r25, 0xFF	; 255
    28f4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <vTaskDelay>
    28f8:	f2 cf       	rjmp	.-28     	; 0x28de <vPolledQueueConsumer+0x76>

000028fa <xAreComTestTasksStillRunning>:
BaseType_t xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
    28fa:	80 91 dd 07 	lds	r24, 0x07DD
		xReturn = pdTRUE;
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
    28fe:	10 92 dd 07 	sts	0x07DD, r1
    2902:	81 11       	cpse	r24, r1
    2904:	81 e0       	ldi	r24, 0x01	; 1

	return xReturn;
}
    2906:	08 95       	ret

00002908 <vAltStartComTestTasks>:
static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;

/*-----------------------------------------------------------*/

void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
{
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	18 2f       	mov	r17, r24
	/* Initialise the com port then spawn the Rx and Tx tasks. */
	uxBaseLED = uxLED;
    2912:	20 93 de 07 	sts	0x07DE, r18
	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
    2916:	cb 01       	movw	r24, r22
    2918:	ba 01       	movw	r22, r20
    291a:	48 e1       	ldi	r20, 0x18	; 24
    291c:	0e 94 c4 01 	call	0x388	; 0x388 <xSerialPortInitMinimal>

	/* The Tx task is spawned with a lower priority than the Rx task. */
	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
    2920:	01 2f       	mov	r16, r17
    2922:	01 50       	subi	r16, 0x01	; 1
    2924:	81 ef       	ldi	r24, 0xF1	; 241
    2926:	94 e1       	ldi	r25, 0x14	; 20
    2928:	6d e4       	ldi	r22, 0x4D	; 77
    292a:	71 e0       	ldi	r23, 0x01	; 1
    292c:	45 e5       	ldi	r20, 0x55	; 85
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	ee 24       	eor	r14, r14
    2936:	ff 24       	eor	r15, r15
    2938:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
    293c:	8e ea       	ldi	r24, 0xAE	; 174
    293e:	94 e1       	ldi	r25, 0x14	; 20
    2940:	63 e5       	ldi	r22, 0x53	; 83
    2942:	71 e0       	ldi	r23, 0x01	; 1
    2944:	45 e5       	ldi	r20, 0x55	; 85
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	01 2f       	mov	r16, r17
    294e:	0e 94 81 09 	call	0x1302	; 0x1302 <xTaskCreate>
}
    2952:	1f 91       	pop	r17
    2954:	0f 91       	pop	r16
    2956:	ff 90       	pop	r15
    2958:	ef 90       	pop	r14
    295a:	08 95       	ret

0000295c <vComRxTask>:
	}
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	0f 92       	push	r0
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	00 e0       	ldi	r16, 0x00	; 0
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
    2970:	7e 01       	movw	r14, r28
    2972:	08 94       	sec
    2974:	e1 1c       	adc	r14, r1
    2976:	f1 1c       	adc	r15, r1
	}
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
    2978:	11 e4       	ldi	r17, 0x41	; 65
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	b7 01       	movw	r22, r14
    2980:	4f ef       	ldi	r20, 0xFF	; 255
    2982:	5f ef       	ldi	r21, 0xFF	; 255
    2984:	0e 94 ba 01 	call	0x374	; 0x374 <xSerialGetChar>
    2988:	88 23       	and	r24, r24
    298a:	51 f0       	breq	.+20     	; 0x29a0 <vComRxTask+0x44>
			{
				/* Was this the byte we were expecting?  If so, toggle the LED,
				otherwise we are out on sync and should break out of the loop
				until the expected character sequence is about to restart. */
				if( cByteRxed == cExpectedByte )
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	81 17       	cp	r24, r17
    2990:	11 f0       	breq	.+4      	; 0x2996 <vComRxTask+0x3a>
    2992:	11 e0       	ldi	r17, 0x01	; 1
    2994:	09 c0       	rjmp	.+18     	; 0x29a8 <vComRxTask+0x4c>
				{
					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
    2996:	80 91 de 07 	lds	r24, 0x07DE
    299a:	8f 5f       	subi	r24, 0xFF	; 255
    299c:	0e 94 c4 00 	call	0x188	; 0x188 <vParTestToggleLED>

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
    29a0:	1f 5f       	subi	r17, 0xFF	; 255
    29a2:	19 35       	cpi	r17, 0x59	; 89
    29a4:	51 f7       	brne	.-44     	; 0x297a <vComRxTask+0x1e>
    29a6:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
    29a8:	80 91 de 07 	lds	r24, 0x07DE
    29ac:	8f 5f       	subi	r24, 0xFF	; 255
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <vParTestSetLED>

		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
    29b4:	11 30       	cpi	r17, 0x01	; 1
    29b6:	69 f4       	brne	.+26     	; 0x29d2 <vComRxTask+0x76>
    29b8:	07 c0       	rjmp	.+14     	; 0x29c8 <vComRxTask+0x6c>
		{
			while( cByteRxed != comLAST_BYTE )
			{
				/* Block until the next char is available. */
				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	b7 01       	movw	r22, r14
    29c0:	4f ef       	ldi	r20, 0xFF	; 255
    29c2:	5f ef       	ldi	r21, 0xFF	; 255
    29c4:	0e 94 ba 01 	call	0x374	; 0x374 <xSerialGetChar>
		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
		{
			while( cByteRxed != comLAST_BYTE )
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	88 35       	cpi	r24, 0x58	; 88
    29cc:	b1 f7       	brne	.-20     	; 0x29ba <vComRxTask+0x5e>

			/* Note that an error occurred which caused us to have to resync.
			We use this to stop incrementing the loop counter so
			sAreComTestTasksStillRunning() will return false - indicating an
			error. */
			xErrorOccurred++;
    29ce:	0f 5f       	subi	r16, 0xFF	; 255
    29d0:	d3 cf       	rjmp	.-90     	; 0x2978 <vComRxTask+0x1c>
			/* We have now resynced with the Tx task and can continue. */
			xResyncRequired = pdFALSE;
		}
		else
		{
			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
    29d2:	02 30       	cpi	r16, 0x02	; 2
    29d4:	8c f6       	brge	.-94     	; 0x2978 <vComRxTask+0x1c>
				occurring (i.e. an unexpected character being received) will
				prevent this counter being incremented for the rest of the
				execution.   Don't worry about mutual exclusion on this
				variable - it doesn't really matter as we just want it
				to change. */
				uxRxLoops++;
    29d6:	80 91 dd 07 	lds	r24, 0x07DD
    29da:	8f 5f       	subi	r24, 0xFF	; 255
    29dc:	80 93 dd 07 	sts	0x07DD, r24
    29e0:	cb cf       	rjmp	.-106    	; 0x2978 <vComRxTask+0x1c>

000029e2 <vComTxTask>:
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComTxTask, pvParameters )
{
    29e2:	1f 93       	push	r17
    29e4:	11 e4       	ldi	r17, 0x41	; 65
    29e6:	0e c0       	rjmp	.+28     	; 0x2a04 <vComTxTask+0x22>
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
		{
			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	61 2f       	mov	r22, r17
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	0e 94 9c 01 	call	0x338	; 0x338 <xSerialPutChar>
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	21 f4       	brne	.+8      	; 0x2a02 <vComTxTask+0x20>
			{
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
    29fa:	80 91 de 07 	lds	r24, 0x07DE
    29fe:	0e 94 c4 00 	call	0x188	; 0x188 <vParTestToggleLED>

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
    2a02:	1f 5f       	subi	r17, 0xFF	; 255
    2a04:	19 35       	cpi	r17, 0x59	; 89
    2a06:	84 f3       	brlt	.-32     	; 0x29e8 <vComTxTask+0x6>
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
    2a08:	80 91 de 07 	lds	r24, 0x07DE
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <vParTestSetLED>

		/* We have posted all the characters in the string - wait before
		re-sending.  Wait a pseudo-random time as this will provide a better
		test. */
		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
    2a12:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <xTaskGetTickCount>

		/* Make sure we don't wait too long... */
		xTimeToWait %= comTX_MAX_BLOCK_TIME;
    2a16:	03 96       	adiw	r24, 0x03	; 3
    2a18:	66 e9       	ldi	r22, 0x96	; 150
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__udivmodhi4>

		/* ...but we do want to wait. */
		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
    2a20:	82 33       	cpi	r24, 0x32	; 50
    2a22:	91 05       	cpc	r25, r1
    2a24:	10 f4       	brcc	.+4      	; 0x2a2a <vComTxTask+0x48>
    2a26:	82 e3       	ldi	r24, 0x32	; 50
    2a28:	90 e0       	ldi	r25, 0x00	; 0
		{
			xTimeToWait = comTX_MIN_BLOCK_TIME;
		}

		vTaskDelay( xTimeToWait );
    2a2a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <vTaskDelay>
    2a2e:	11 e4       	ldi	r17, 0x41	; 65
    2a30:	db cf       	rjmp	.-74     	; 0x29e8 <vComTxTask+0x6>

00002a32 <__mulsi3>:
    2a32:	62 9f       	mul	r22, r18
    2a34:	d0 01       	movw	r26, r0
    2a36:	73 9f       	mul	r23, r19
    2a38:	f0 01       	movw	r30, r0
    2a3a:	82 9f       	mul	r24, r18
    2a3c:	e0 0d       	add	r30, r0
    2a3e:	f1 1d       	adc	r31, r1
    2a40:	64 9f       	mul	r22, r20
    2a42:	e0 0d       	add	r30, r0
    2a44:	f1 1d       	adc	r31, r1
    2a46:	92 9f       	mul	r25, r18
    2a48:	f0 0d       	add	r31, r0
    2a4a:	83 9f       	mul	r24, r19
    2a4c:	f0 0d       	add	r31, r0
    2a4e:	74 9f       	mul	r23, r20
    2a50:	f0 0d       	add	r31, r0
    2a52:	65 9f       	mul	r22, r21
    2a54:	f0 0d       	add	r31, r0
    2a56:	99 27       	eor	r25, r25
    2a58:	72 9f       	mul	r23, r18
    2a5a:	b0 0d       	add	r27, r0
    2a5c:	e1 1d       	adc	r30, r1
    2a5e:	f9 1f       	adc	r31, r25
    2a60:	63 9f       	mul	r22, r19
    2a62:	b0 0d       	add	r27, r0
    2a64:	e1 1d       	adc	r30, r1
    2a66:	f9 1f       	adc	r31, r25
    2a68:	bd 01       	movw	r22, r26
    2a6a:	cf 01       	movw	r24, r30
    2a6c:	11 24       	eor	r1, r1
    2a6e:	08 95       	ret

00002a70 <__udivmodhi4>:
    2a70:	aa 1b       	sub	r26, r26
    2a72:	bb 1b       	sub	r27, r27
    2a74:	51 e1       	ldi	r21, 0x11	; 17
    2a76:	07 c0       	rjmp	.+14     	; 0x2a86 <__udivmodhi4_ep>

00002a78 <__udivmodhi4_loop>:
    2a78:	aa 1f       	adc	r26, r26
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	a6 17       	cp	r26, r22
    2a7e:	b7 07       	cpc	r27, r23
    2a80:	10 f0       	brcs	.+4      	; 0x2a86 <__udivmodhi4_ep>
    2a82:	a6 1b       	sub	r26, r22
    2a84:	b7 0b       	sbc	r27, r23

00002a86 <__udivmodhi4_ep>:
    2a86:	88 1f       	adc	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	5a 95       	dec	r21
    2a8c:	a9 f7       	brne	.-22     	; 0x2a78 <__udivmodhi4_loop>
    2a8e:	80 95       	com	r24
    2a90:	90 95       	com	r25
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	08 95       	ret

00002a98 <__udivmodsi4>:
    2a98:	a1 e2       	ldi	r26, 0x21	; 33
    2a9a:	1a 2e       	mov	r1, r26
    2a9c:	aa 1b       	sub	r26, r26
    2a9e:	bb 1b       	sub	r27, r27
    2aa0:	fd 01       	movw	r30, r26
    2aa2:	0d c0       	rjmp	.+26     	; 0x2abe <__udivmodsi4_ep>

00002aa4 <__udivmodsi4_loop>:
    2aa4:	aa 1f       	adc	r26, r26
    2aa6:	bb 1f       	adc	r27, r27
    2aa8:	ee 1f       	adc	r30, r30
    2aaa:	ff 1f       	adc	r31, r31
    2aac:	a2 17       	cp	r26, r18
    2aae:	b3 07       	cpc	r27, r19
    2ab0:	e4 07       	cpc	r30, r20
    2ab2:	f5 07       	cpc	r31, r21
    2ab4:	20 f0       	brcs	.+8      	; 0x2abe <__udivmodsi4_ep>
    2ab6:	a2 1b       	sub	r26, r18
    2ab8:	b3 0b       	sbc	r27, r19
    2aba:	e4 0b       	sbc	r30, r20
    2abc:	f5 0b       	sbc	r31, r21

00002abe <__udivmodsi4_ep>:
    2abe:	66 1f       	adc	r22, r22
    2ac0:	77 1f       	adc	r23, r23
    2ac2:	88 1f       	adc	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	1a 94       	dec	r1
    2ac8:	69 f7       	brne	.-38     	; 0x2aa4 <__udivmodsi4_loop>
    2aca:	60 95       	com	r22
    2acc:	70 95       	com	r23
    2ace:	80 95       	com	r24
    2ad0:	90 95       	com	r25
    2ad2:	9b 01       	movw	r18, r22
    2ad4:	ac 01       	movw	r20, r24
    2ad6:	bd 01       	movw	r22, r26
    2ad8:	cf 01       	movw	r24, r30
    2ada:	08 95       	ret

00002adc <__divmodsi4>:
    2adc:	97 fb       	bst	r25, 7
    2ade:	09 2e       	mov	r0, r25
    2ae0:	05 26       	eor	r0, r21
    2ae2:	0e d0       	rcall	.+28     	; 0x2b00 <__divmodsi4_neg1>
    2ae4:	57 fd       	sbrc	r21, 7
    2ae6:	04 d0       	rcall	.+8      	; 0x2af0 <__divmodsi4_neg2>
    2ae8:	d7 df       	rcall	.-82     	; 0x2a98 <__udivmodsi4>
    2aea:	0a d0       	rcall	.+20     	; 0x2b00 <__divmodsi4_neg1>
    2aec:	00 1c       	adc	r0, r0
    2aee:	38 f4       	brcc	.+14     	; 0x2afe <__divmodsi4_exit>

00002af0 <__divmodsi4_neg2>:
    2af0:	50 95       	com	r21
    2af2:	40 95       	com	r20
    2af4:	30 95       	com	r19
    2af6:	21 95       	neg	r18
    2af8:	3f 4f       	sbci	r19, 0xFF	; 255
    2afa:	4f 4f       	sbci	r20, 0xFF	; 255
    2afc:	5f 4f       	sbci	r21, 0xFF	; 255

00002afe <__divmodsi4_exit>:
    2afe:	08 95       	ret

00002b00 <__divmodsi4_neg1>:
    2b00:	f6 f7       	brtc	.-4      	; 0x2afe <__divmodsi4_exit>
    2b02:	90 95       	com	r25
    2b04:	80 95       	com	r24
    2b06:	70 95       	com	r23
    2b08:	61 95       	neg	r22
    2b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	08 95       	ret

00002b12 <memcpy>:
    2b12:	fb 01       	movw	r30, r22
    2b14:	dc 01       	movw	r26, r24
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <memcpy+0xa>
    2b18:	01 90       	ld	r0, Z+
    2b1a:	0d 92       	st	X+, r0
    2b1c:	41 50       	subi	r20, 0x01	; 1
    2b1e:	50 40       	sbci	r21, 0x00	; 0
    2b20:	d8 f7       	brcc	.-10     	; 0x2b18 <memcpy+0x6>
    2b22:	08 95       	ret

00002b24 <__eerd_block_m328p>:
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22

00002b28 <__eerd_blraw_m328p>:
    2b28:	fc 01       	movw	r30, r24
    2b2a:	f9 99       	sbic	0x1f, 1	; 31
    2b2c:	fe cf       	rjmp	.-4      	; 0x2b2a <__eerd_blraw_m328p+0x2>
    2b2e:	06 c0       	rjmp	.+12     	; 0x2b3c <__eerd_blraw_m328p+0x14>
    2b30:	f2 bd       	out	0x22, r31	; 34
    2b32:	e1 bd       	out	0x21, r30	; 33
    2b34:	f8 9a       	sbi	0x1f, 0	; 31
    2b36:	31 96       	adiw	r30, 0x01	; 1
    2b38:	00 b4       	in	r0, 0x20	; 32
    2b3a:	0d 92       	st	X+, r0
    2b3c:	41 50       	subi	r20, 0x01	; 1
    2b3e:	50 40       	sbci	r21, 0x00	; 0
    2b40:	b8 f7       	brcc	.-18     	; 0x2b30 <__eerd_blraw_m328p+0x8>
    2b42:	08 95       	ret

00002b44 <__eewr_byte_m328p>:
    2b44:	26 2f       	mov	r18, r22

00002b46 <__eewr_r18_m328p>:
    2b46:	f9 99       	sbic	0x1f, 1	; 31
    2b48:	fe cf       	rjmp	.-4      	; 0x2b46 <__eewr_r18_m328p>
    2b4a:	1f ba       	out	0x1f, r1	; 31
    2b4c:	92 bd       	out	0x22, r25	; 34
    2b4e:	81 bd       	out	0x21, r24	; 33
    2b50:	20 bd       	out	0x20, r18	; 32
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	fa 9a       	sbi	0x1f, 2	; 31
    2b58:	f9 9a       	sbi	0x1f, 1	; 31
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	08 95       	ret

00002b60 <_exit>:
    2b60:	f8 94       	cli

00002b62 <__stop_program>:
    2b62:	ff cf       	rjmp	.-2      	; 0x2b62 <__stop_program>


rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00003284  00003318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006a9  00800164  00800164  0000337c  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000a48  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039f4  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001182  00000000  00000000  00007998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000038ae  00000000  00000000  00008b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007f0  00000000  00000000  0000c3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000182e  00000000  00000000  0000cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021ed  00000000  00000000  0000e3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000105d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_18>
      4c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e8       	ldi	r30, 0x84	; 132
      7c:	f2 e3       	ldi	r31, 0x32	; 50
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 36       	cpi	r26, 0x64	; 100
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	18 e0       	ldi	r17, 0x08	; 8
      8c:	a4 e6       	ldi	r26, 0x64	; 100
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 30       	cpi	r26, 0x0D	; 13
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 56 00 	call	0xac	; 0xac <main>
      9e:	0c 94 40 19 	jmp	0x3280	; 0x3280 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
	vCoRoutineSchedule();
      a6:	0e 94 0a 10 	call	0x2014	; 0x2014 <vCoRoutineSchedule>
}
      aa:	08 95       	ret

000000ac <main>:
		print(MsgBuff,strlen(MsgBuff));
	}

}
short main( void )
{
      ac:	ef 92       	push	r14
      ae:	ff 92       	push	r15
      b0:	0f 93       	push	r16
      b2:	df 93       	push	r29
      b4:	cf 93       	push	r28
      b6:	0f 92       	push	r0
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62

static void prvIncrementResetCount( void )
{
unsigned char ucCount;

	eeprom_read_block( &ucCount, mainRESET_COUNT_ADDRESS, sizeof( ucCount ) );
      bc:	ce 01       	movw	r24, r28
      be:	01 96       	adiw	r24, 0x01	; 1
      c0:	60 e5       	ldi	r22, 0x50	; 80
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	41 e0       	ldi	r20, 0x01	; 1
      c6:	50 e0       	ldi	r21, 0x00	; 0
      c8:	0e 94 4b 18 	call	0x3096	; 0x3096 <__eerd_block_m328p>
	ucCount++;
      cc:	69 81       	ldd	r22, Y+1	; 0x01
      ce:	6f 5f       	subi	r22, 0xFF	; 255
      d0:	69 83       	std	Y+1, r22	; 0x01
	eeprom_write_byte( mainRESET_COUNT_ADDRESS, ucCount );
      d2:	80 e5       	ldi	r24, 0x50	; 80
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__eewr_byte_m328p>
short main( void )
{
	prvIncrementResetCount();

	/* Setup the LED's for output. */
	vParTestInitialise();
      da:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <vParTestInitialise>

	xTaskCreate( DisplayTemp, "Display", configMINIMAL_STACK_SIZE, NULL, mainCOM_TEST_PRIORITY, NULL );
      de:	8a ea       	ldi	r24, 0xAA	; 170
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	71 e0       	ldi	r23, 0x01	; 1
      e6:	45 e5       	ldi	r20, 0x55	; 85
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	02 e0       	ldi	r16, 0x02	; 2
      f0:	ee 24       	eor	r14, r14
      f2:	ff 24       	eor	r15, r15
      f4:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
	
	
	/* Create the co-routines that flash the LED's. */
	vStartFlashCoRoutines( mainNUM_FLASH_COROUTINES ); 
      f8:	83 e0       	ldi	r24, 0x03	; 3
      fa:	0e 94 22 13 	call	0x2644	; 0x2644 <vStartFlashCoRoutines>

	/* In this port, to use preemptive scheduler define configUSE_PREEMPTION
	as 1 in portmacro.h.  To use the cooperative scheduler define
	configUSE_PREEMPTION as 0. */
	vTaskStartScheduler();
      fe:	0e 94 1f 0b 	call	0x163e	; 0x163e <vTaskStartScheduler>

	return 0;
}
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0f 90       	pop	r0
     108:	cf 91       	pop	r28
     10a:	df 91       	pop	r29
     10c:	0f 91       	pop	r16
     10e:	ff 90       	pop	r15
     110:	ef 90       	pop	r14
     112:	08 95       	ret

00000114 <print>:

/*-----------------------------------------------------------*/

void print(char *str,uint16_t len);
void print(char *str,uint16_t len)
{
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	7c 01       	movw	r14, r24
     122:	8b 01       	movw	r16, r22
     124:	c0 e0       	ldi	r28, 0x00	; 0
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	0b c0       	rjmp	.+22     	; 0x140 <print+0x2c>
	uint16_t i;
	for(i=0;i<len;i++)
		xSerialPutChar( 0, str[i], 0 );
     12a:	f7 01       	movw	r30, r14
     12c:	ec 0f       	add	r30, r28
     12e:	fd 1f       	adc	r31, r29
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	60 81       	ld	r22, Z
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <xSerialPutChar>

void print(char *str,uint16_t len);
void print(char *str,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
     13e:	21 96       	adiw	r28, 0x01	; 1
     140:	c0 17       	cp	r28, r16
     142:	d1 07       	cpc	r29, r17
     144:	90 f3       	brcs	.-28     	; 0x12a <print+0x16>
		xSerialPutChar( 0, str[i], 0 );
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	ff 90       	pop	r15
     150:	ef 90       	pop	r14
     152:	08 95       	ret

00000154 <DisplayTemp>:

void DisplayTemp(void *pvParameters);
void DisplayTemp(void *pvParameters)  // This is a task.
{
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	static int res;
	static char MsgBuff[32];
	(void) pvParameters;

	ADC_0_init();
     15c:	0e 94 40 02 	call	0x480	; 0x480 <ADC_0_init>
	xSerialPortInitMinimal( mainCOM_TEST_BAUD_RATE, 100 );
     160:	60 e8       	ldi	r22, 0x80	; 128
     162:	75 e2       	ldi	r23, 0x25	; 37
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	44 e6       	ldi	r20, 0x64	; 100
     16a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xSerialPortInitMinimal>
	for(;;)
	{
		vTaskDelay(500);              // wait for a second
		res = ADC_0_get_conversion(0);
		sprintf(MsgBuff,"Temperature = %d *C\r\n",res/2);
     16e:	c4 e6       	ldi	r28, 0x64	; 100
     170:	d1 e0       	ldi	r29, 0x01	; 1
     172:	08 e0       	ldi	r16, 0x08	; 8
     174:	11 e0       	ldi	r17, 0x01	; 1

	ADC_0_init();
	xSerialPortInitMinimal( mainCOM_TEST_BAUD_RATE, 100 );
	for(;;)
	{
		vTaskDelay(500);              // wait for a second
     176:	84 ef       	ldi	r24, 0xF4	; 244
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 22 09 	call	0x1244	; 0x1244 <vTaskDelay>
		res = ADC_0_get_conversion(0);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ADC_0_get_conversion>
     184:	80 93 84 01 	sts	0x0184, r24
     188:	90 93 85 01 	sts	0x0185, r25
		sprintf(MsgBuff,"Temperature = %d *C\r\n",res/2);
     18c:	00 d0       	rcall	.+0      	; 0x18e <DisplayTemp+0x3a>
     18e:	00 d0       	rcall	.+0      	; 0x190 <DisplayTemp+0x3c>
     190:	00 d0       	rcall	.+0      	; 0x192 <DisplayTemp+0x3e>
     192:	ed b7       	in	r30, 0x3d	; 61
     194:	fe b7       	in	r31, 0x3e	; 62
     196:	31 96       	adiw	r30, 0x01	; 1
     198:	ad b7       	in	r26, 0x3d	; 61
     19a:	be b7       	in	r27, 0x3e	; 62
     19c:	12 96       	adiw	r26, 0x02	; 2
     19e:	dc 93       	st	X, r29
     1a0:	ce 93       	st	-X, r28
     1a2:	11 97       	sbiw	r26, 0x01	; 1
     1a4:	13 83       	std	Z+3, r17	; 0x03
     1a6:	02 83       	std	Z+2, r16	; 0x02
     1a8:	62 e0       	ldi	r22, 0x02	; 2
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__divmodhi4>
     1b0:	75 83       	std	Z+5, r23	; 0x05
     1b2:	64 83       	std	Z+4, r22	; 0x04
     1b4:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <sprintf>
		print(MsgBuff,strlen(MsgBuff));
     1b8:	fe 01       	movw	r30, r28
     1ba:	01 90       	ld	r0, Z+
     1bc:	00 20       	and	r0, r0
     1be:	e9 f7       	brne	.-6      	; 0x1ba <DisplayTemp+0x66>
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	e4 56       	subi	r30, 0x64	; 100
     1c4:	f1 40       	sbci	r31, 0x01	; 1
     1c6:	8d b7       	in	r24, 0x3d	; 61
     1c8:	9e b7       	in	r25, 0x3e	; 62
     1ca:	06 96       	adiw	r24, 0x06	; 6
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	9e bf       	out	0x3e, r25	; 62
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	8d bf       	out	0x3d, r24	; 61
     1d6:	ce 01       	movw	r24, r28
     1d8:	bf 01       	movw	r22, r30
     1da:	0e 94 8a 00 	call	0x114	; 0x114 <print>
     1de:	cb cf       	rjmp	.-106    	; 0x176 <DisplayTemp+0x22>

000001e0 <vParTestInitialise>:

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
	ucCurrentOutputValue = partstALL_OUTPUTS_OFF;
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	80 93 1e 01 	sts	0x011E, r24

	/* Set port B direction to outputs.  Start with all output off. */
	DDRB = partstALL_BITS_OUTPUT;
     1e6:	84 b9       	out	0x04, r24	; 4
	PORTB = ucCurrentOutputValue;
     1e8:	80 91 1e 01 	lds	r24, 0x011E
     1ec:	85 b9       	out	0x05, r24	; 5
}
     1ee:	08 95       	ret

000001f0 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
     1f0:	1f 93       	push	r17
     1f2:	28 2f       	mov	r18, r24
unsigned char ucBit;

	if( uxLED <= partstMAX_OUTPUT_LED )
     1f4:	88 30       	cpi	r24, 0x08	; 8
     1f6:	e8 f4       	brcc	.+58     	; 0x232 <vParTestToggleLED+0x42>
	{
		ucBit = ( ( unsigned char ) 1 ) << uxLED;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <vParTestToggleLED+0x12>
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	2a 95       	dec	r18
     204:	e2 f7       	brpl	.-8      	; 0x1fe <vParTestToggleLED+0xe>
     206:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     208:	0e 94 1b 04 	call	0x836	; 0x836 <vTaskSuspendAll>
		{
			if( ucCurrentOutputValue & ucBit )
     20c:	80 91 1e 01 	lds	r24, 0x011E
     210:	81 23       	and	r24, r17
     212:	29 f0       	breq	.+10     	; 0x21e <vParTestToggleLED+0x2e>
			{
				ucCurrentOutputValue &= ~ucBit;
     214:	80 91 1e 01 	lds	r24, 0x011E
     218:	10 95       	com	r17
     21a:	18 23       	and	r17, r24
     21c:	03 c0       	rjmp	.+6      	; 0x224 <vParTestToggleLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     21e:	80 91 1e 01 	lds	r24, 0x011E
     222:	18 2b       	or	r17, r24
     224:	10 93 1e 01 	sts	0x011E, r17
			}

			PORTB = ucCurrentOutputValue;
     228:	80 91 1e 01 	lds	r24, 0x011E
     22c:	85 b9       	out	0x05, r24	; 5
		}
		xTaskResumeAll();			
     22e:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
	}
}
     232:	1f 91       	pop	r17
     234:	08 95       	ret

00000236 <vParTestSetLED>:
	PORTB = ucCurrentOutputValue;
}
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	28 2f       	mov	r18, r24
     23c:	06 2f       	mov	r16, r22
unsigned char ucBit = ( unsigned char ) 1;

	if( uxLED <= partstMAX_OUTPUT_LED )
     23e:	88 30       	cpi	r24, 0x08	; 8
     240:	d8 f4       	brcc	.+54     	; 0x278 <vParTestSetLED+0x42>
	{
		ucBit <<= uxLED;	
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	02 c0       	rjmp	.+4      	; 0x24c <vParTestSetLED+0x16>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	2a 95       	dec	r18
     24e:	e2 f7       	brpl	.-8      	; 0x248 <vParTestSetLED+0x12>
     250:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     252:	0e 94 1b 04 	call	0x836	; 0x836 <vTaskSuspendAll>
		{
			if( xValue == pdTRUE )
     256:	01 30       	cpi	r16, 0x01	; 1
     258:	29 f4       	brne	.+10     	; 0x264 <vParTestSetLED+0x2e>
			{
				ucBit ^= ( unsigned char ) 0xff;
				ucCurrentOutputValue &= ucBit;
     25a:	80 91 1e 01 	lds	r24, 0x011E
     25e:	10 95       	com	r17
     260:	18 23       	and	r17, r24
     262:	03 c0       	rjmp	.+6      	; 0x26a <vParTestSetLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     264:	80 91 1e 01 	lds	r24, 0x011E
     268:	18 2b       	or	r17, r24
     26a:	10 93 1e 01 	sts	0x011E, r17
			}

			PORTB = ucCurrentOutputValue;
     26e:	80 91 1e 01 	lds	r24, 0x011E
     272:	85 b9       	out	0x05, r24	; 5
		}
		xTaskResumeAll();
     274:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
	}
}
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	08 95       	ret

0000027e <vSerialClose>:
	( void ) xPort;

	/* Turn off the interrupts.  We may also want to delete the queues and/or
	re-install the original ISR. */

	portENTER_CRITICAL();
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	0f 92       	push	r0
	{
		vInterruptOff();
     284:	e1 ec       	ldi	r30, 0xC1	; 193
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	8f 7d       	andi	r24, 0xDF	; 223
     28c:	80 83       	st	Z, r24
		ucByte = UCSR0B;
     28e:	80 81       	ld	r24, Z
		ucByte &= ~serRX_INT_ENABLE;
     290:	8f 77       	andi	r24, 0x7F	; 127
		UCSR0B = ucByte;
     292:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
}
     298:	08 95       	ret

0000029a <__vector_19>:
	}
}
/*-----------------------------------------------------------*/

SIGNAL( USART_UDRE_vect )
{
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	6f 93       	push	r22
     2ae:	7f 93       	push	r23
     2b0:	8f 93       	push	r24
     2b2:	9f 93       	push	r25
     2b4:	af 93       	push	r26
     2b6:	bf 93       	push	r27
     2b8:	ef 93       	push	r30
     2ba:	ff 93       	push	r31
     2bc:	df 93       	push	r29
     2be:	cf 93       	push	r28
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <__vector_19+0x28>
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
signed char cChar, cTaskWoken;

	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &cTaskWoken ) == pdTRUE )
     2c6:	80 91 88 01 	lds	r24, 0x0188
     2ca:	90 91 89 01 	lds	r25, 0x0189
     2ce:	be 01       	movw	r22, r28
     2d0:	6f 5f       	subi	r22, 0xFF	; 255
     2d2:	7f 4f       	sbci	r23, 0xFF	; 255
     2d4:	ae 01       	movw	r20, r28
     2d6:	4e 5f       	subi	r20, 0xFE	; 254
     2d8:	5f 4f       	sbci	r21, 0xFF	; 255
     2da:	0e 94 c2 0c 	call	0x1984	; 0x1984 <xQueueReceiveFromISR>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	21 f4       	brne	.+8      	; 0x2ea <__vector_19+0x50>
	{
		/* Send the next character queued for Tx. */
		UDR0 = cChar;
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	80 93 c6 00 	sts	0x00C6, r24
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <__vector_19+0x5a>
	}
	else
	{
		/* Queue empty, nothing to send. */
		vInterruptOff();
     2ea:	80 91 c1 00 	lds	r24, 0x00C1
     2ee:	8f 7d       	andi	r24, 0xDF	; 223
     2f0:	80 93 c1 00 	sts	0x00C1, r24
	}
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	ff 91       	pop	r31
     2fe:	ef 91       	pop	r30
     300:	bf 91       	pop	r27
     302:	af 91       	pop	r26
     304:	9f 91       	pop	r25
     306:	8f 91       	pop	r24
     308:	7f 91       	pop	r23
     30a:	6f 91       	pop	r22
     30c:	5f 91       	pop	r21
     30e:	4f 91       	pop	r20
     310:	3f 91       	pop	r19
     312:	2f 91       	pop	r18
     314:	0f 90       	pop	r0
     316:	0f be       	out	0x3f, r0	; 63
     318:	0f 90       	pop	r0
     31a:	1f 90       	pop	r1
     31c:	18 95       	reti

0000031e <__vector_18>:
	portEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

SIGNAL( USART_RX_vect )
{
     31e:	1f 92       	push	r1
     320:	0f 92       	push	r0
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	0f 92       	push	r0
     326:	11 24       	eor	r1, r1
     328:	2f 93       	push	r18
     32a:	3f 93       	push	r19
     32c:	4f 93       	push	r20
     32e:	5f 93       	push	r21
     330:	6f 93       	push	r22
     332:	7f 93       	push	r23
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	af 93       	push	r26
     33a:	bf 93       	push	r27
     33c:	ef 93       	push	r30
     33e:	ff 93       	push	r31
     340:	df 93       	push	r29
     342:	cf 93       	push	r28
     344:	00 d0       	rcall	.+0      	; 0x346 <__vector_18+0x28>
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
signed char cChar;
signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
     34a:	1a 82       	std	Y+2, r1	; 0x02

	/* Get the character and post it on the queue of Rxed characters.
	If the post causes a task to wake force a context switch as the woken task
	may have a higher priority than the task we have interrupted. */
	cChar = UDR0;
     34c:	80 91 c6 00 	lds	r24, 0x00C6
     350:	89 83       	std	Y+1, r24	; 0x01

	xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
     352:	80 91 86 01 	lds	r24, 0x0186
     356:	90 91 87 01 	lds	r25, 0x0187
     35a:	be 01       	movw	r22, r28
     35c:	6f 5f       	subi	r22, 0xFF	; 255
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	ae 01       	movw	r20, r28
     362:	4e 5f       	subi	r20, 0xFE	; 254
     364:	5f 4f       	sbci	r21, 0xFF	; 255
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <xQueueGenericSendFromISR>

	if( xHigherPriorityTaskWoken != pdFALSE )
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	88 23       	and	r24, r24
     370:	11 f0       	breq	.+4      	; 0x376 <__vector_18+0x58>
	{
		taskYIELD();
     372:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
	}
}
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	ff 91       	pop	r31
     380:	ef 91       	pop	r30
     382:	bf 91       	pop	r27
     384:	af 91       	pop	r26
     386:	9f 91       	pop	r25
     388:	8f 91       	pop	r24
     38a:	7f 91       	pop	r23
     38c:	6f 91       	pop	r22
     38e:	5f 91       	pop	r21
     390:	4f 91       	pop	r20
     392:	3f 91       	pop	r19
     394:	2f 91       	pop	r18
     396:	0f 90       	pop	r0
     398:	0f be       	out	0x3f, r0	; 63
     39a:	0f 90       	pop	r0
     39c:	1f 90       	pop	r1
     39e:	18 95       	reti

000003a0 <xSerialPutChar>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	0f 92       	push	r0
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	69 83       	std	Y+1, r22	; 0x01
	/* Only one port is supported. */
	( void ) pxPort;

	/* Return false if after the block time there is no room on the Tx queue. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) != pdPASS )
     3ac:	80 91 88 01 	lds	r24, 0x0188
     3b0:	90 91 89 01 	lds	r25, 0x0189
     3b4:	be 01       	movw	r22, r28
     3b6:	6f 5f       	subi	r22, 0xFF	; 255
     3b8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <xQueueGenericSend>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	11 f0       	breq	.+4      	; 0x3c8 <xSerialPutChar+0x28>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <xSerialPutChar+0x34>
	{
		return pdFAIL;
	}

	vInterruptOn();
     3c8:	80 91 c1 00 	lds	r24, 0x00C1
     3cc:	80 62       	ori	r24, 0x20	; 32
     3ce:	80 93 c1 00 	sts	0x00C1, r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1

	return pdPASS;
}
     3d4:	0f 90       	pop	r0
     3d6:	cf 91       	pop	r28
     3d8:	df 91       	pop	r29
     3da:	08 95       	ret

000003dc <xSerialGetChar>:
	/* Only one port is supported. */
	( void ) pxPort;

	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
     3dc:	80 91 86 01 	lds	r24, 0x0186
     3e0:	90 91 87 01 	lds	r25, 0x0187
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <xQueueGenericReceive>
     3ea:	81 11       	cpse	r24, r1
     3ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return pdFALSE;
	}
}
     3ee:	08 95       	ret

000003f0 <xSerialPortInitMinimal>:
	UCSR0B = ucInByte;										\
}
/*-----------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	7b 01       	movw	r14, r22
     3fc:	8c 01       	movw	r16, r24
     3fe:	d4 2e       	mov	r13, r20
unsigned long ulBaudRateCounter;
unsigned char ucByte;

	portENTER_CRITICAL();
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	0f 92       	push	r0
	{
		/* Create the queues used by the com test task. */
		xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     406:	84 2f       	mov	r24, r20
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xQueueGenericCreate>
     410:	90 93 87 01 	sts	0x0187, r25
     414:	80 93 86 01 	sts	0x0186, r24
		xCharsForTx = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     418:	8d 2d       	mov	r24, r13
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xQueueGenericCreate>
     422:	90 93 89 01 	sts	0x0189, r25
     426:	80 93 88 01 	sts	0x0188, r24

		/* Calculate the baud rate register value from the equation in the
		data sheet. */
		ulBaudRateCounter = ( configCPU_CLOCK_HZ / ( serBAUD_DIV_CONSTANT * ulWantedBaud ) ) - ( unsigned long ) 1;
     42a:	94 e0       	ldi	r25, 0x04	; 4
     42c:	ee 0c       	add	r14, r14
     42e:	ff 1c       	adc	r15, r15
     430:	00 1f       	adc	r16, r16
     432:	11 1f       	adc	r17, r17
     434:	9a 95       	dec	r25
     436:	d1 f7       	brne	.-12     	; 0x42c <xSerialPortInitMinimal+0x3c>
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	72 e1       	ldi	r23, 0x12	; 18
     43c:	8a e7       	ldi	r24, 0x7A	; 122
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a8 01       	movw	r20, r16
     442:	97 01       	movw	r18, r14
     444:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__udivmodsi4>
     448:	21 50       	subi	r18, 0x01	; 1
     44a:	30 40       	sbci	r19, 0x00	; 0
     44c:	40 40       	sbci	r20, 0x00	; 0
     44e:	50 40       	sbci	r21, 0x00	; 0

		/* Set the baud rate. */	
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
		UBRR0L = ucByte;
     450:	20 93 c4 00 	sts	0x00C4, r18

		ulBaudRateCounter >>= ( unsigned long ) 8;
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
     454:	23 2f       	mov	r18, r19
     456:	34 2f       	mov	r19, r20
     458:	45 2f       	mov	r20, r21
     45a:	55 27       	eor	r21, r21
		UBRR0H = ucByte;	
     45c:	20 93 c5 00 	sts	0x00C5, r18

		/* Enable the Rx interrupt.  The Tx interrupt will get enabled
		later. Also enable the Rx and Tx. */
		UCSR0B = ( serRX_INT_ENABLE | serRX_ENABLE | serTX_ENABLE );
     460:	88 e9       	ldi	r24, 0x98	; 152
     462:	80 93 c1 00 	sts	0x00C1, r24

		/* Set the data bits to 8. */
		UCSR0C = ( serEIGHT_DATA_BITS );
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	80 93 c2 00 	sts	0x00C2, r24
		
		
	}
	portEXIT_CRITICAL();
     46c:	0f 90       	pop	r0
     46e:	0f be       	out	0x3f, r0	; 63
	
	/* Unlike other ports, this serial code does not allow for more than one
	com port.  We therefore don't return a pointer to a port structure and can
	instead just return NULL. */
	return NULL;
}
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	08 95       	ret

00000480 <ADC_0_init>:
 */
int8_t ADC_0_init()
{

	/* Enable clock to write ADC registers */
	PRR &= ~(1 << PRADC);
     480:	e4 e6       	ldi	r30, 0x64	; 100
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	8e 7f       	andi	r24, 0xFE	; 254
     488:	80 83       	st	Z, r24

	ADMUX = (0x00 << REFS0) /* AREF, Internal Vref turned off */
     48a:	10 92 7c 00 	sts	0x007C, r1
	        | (0 << ADLAR)  /* Left Adjust Result: disabled */
	        | (0x00 << MUX0) /* ADC Single Ended Input pin 0 */;

	ADCSRA = (1 << ADEN)    /* ADC: enabled */
     48e:	81 e8       	ldi	r24, 0x81	; 129
     490:	80 93 7a 00 	sts	0x007A, r24
	         | (0 << ADATE) /* Auto Trigger: disabled */
	         | (0 << ADIE)  /* ADC Interrupt: disabled */
	         | (0x01 << ADPS0) /* 2 */;

	ADCSRB = (0x00 << ADTS0) /* Free Running mode */
     494:	10 92 7b 00 	sts	0x007B, r1
	         | (0 << ACME) /* Analog Comparator Multiplexer: disabled */;

	DIDR0 = (0 << ADC0D)   /* Digital Input: enabled */
     498:	10 92 7e 00 	sts	0x007E, r1
	        | (0 << ADC3D) /* Digital Input: enabled */
	        | (0 << ADC4D) /* Digital Input: enabled */
	        | (0 << ADC5D) /* Digital Input: enabled */;

	return 0;
}
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	08 95       	ret

000004a0 <ADC_0_enable>:

void ADC_0_enable()
{
	ADCSRA |= (1 << ADEN);
     4a0:	ea e7       	ldi	r30, 0x7A	; 122
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	80 68       	ori	r24, 0x80	; 128
     4a8:	80 83       	st	Z, r24
}
     4aa:	08 95       	ret

000004ac <ADC_0_disable>:

void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
     4ac:	ea e7       	ldi	r30, 0x7A	; 122
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	8f 77       	andi	r24, 0x7F	; 127
     4b4:	80 83       	st	Z, r24
}
     4b6:	08 95       	ret

000004b8 <ADC_0_start_conversion>:

void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
     4b8:	ec e7       	ldi	r30, 0x7C	; 124
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	90 81       	ld	r25, Z
     4be:	90 7f       	andi	r25, 0xF0	; 240
     4c0:	90 83       	st	Z, r25
	ADMUX |= channel;
     4c2:	90 81       	ld	r25, Z
     4c4:	98 2b       	or	r25, r24
     4c6:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADSC);
     4c8:	ea e7       	ldi	r30, 0x7A	; 122
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	80 64       	ori	r24, 0x40	; 64
     4d0:	80 83       	st	Z, r24
}
     4d2:	08 95       	ret

000004d4 <ADC_0_is_conversion_done>:

bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
     4d4:	80 91 7a 00 	lds	r24, 0x007A
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	24 e0       	ldi	r18, 0x04	; 4
     4dc:	96 95       	lsr	r25
     4de:	87 95       	ror	r24
     4e0:	2a 95       	dec	r18
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <ADC_0_is_conversion_done+0x8>
}
     4e4:	81 70       	andi	r24, 0x01	; 1
     4e6:	08 95       	ret

000004e8 <ADC_0_get_conversion_result>:

adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
     4e8:	20 91 78 00 	lds	r18, 0x0078
     4ec:	40 91 79 00 	lds	r20, 0x0079
     4f0:	94 2f       	mov	r25, r20
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	28 2b       	or	r18, r24
     4f8:	39 2b       	or	r19, r25
}
     4fa:	c9 01       	movw	r24, r18
     4fc:	08 95       	ret

000004fe <ADC_0_get_conversion>:
	ADCSRA &= ~(1 << ADEN);
}

void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
     4fe:	90 91 7c 00 	lds	r25, 0x007C
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= channel;
     508:	90 91 7c 00 	lds	r25, 0x007C
     50c:	98 2b       	or	r25, r24
     50e:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= (1 << ADSC);
     512:	80 91 7a 00 	lds	r24, 0x007A
     516:	80 64       	ori	r24, 0x40	; 64
     518:	80 93 7a 00 	sts	0x007A, r24
}

bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
     51c:	80 91 7a 00 	lds	r24, 0x007A
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
	while (!ADC_0_is_conversion_done())
     520:	84 ff       	sbrs	r24, 4
     522:	fc cf       	rjmp	.-8      	; 0x51c <ADC_0_get_conversion+0x1e>
	return ((ADCSRA & (1 << ADIF)));
}

adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
     524:	20 91 78 00 	lds	r18, 0x0078
     528:	40 91 79 00 	lds	r20, 0x0079

	ADC_0_start_conversion(channel);
	while (!ADC_0_is_conversion_done())
		;
	res = ADC_0_get_conversion_result();
	ADCSRA |= (1 << ADIF);
     52c:	80 91 7a 00 	lds	r24, 0x007A
     530:	80 61       	ori	r24, 0x10	; 16
     532:	80 93 7a 00 	sts	0x007A, r24
     536:	94 2f       	mov	r25, r20
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	28 2b       	or	r18, r24
     53e:	39 2b       	or	r19, r25
	return res;
}
     540:	c9 01       	movw	r24, r18
     542:	08 95       	ret

00000544 <ADC_0_get_resolution>:

uint8_t ADC_0_get_resolution()
{
	return 10;
}
     544:	8a e0       	ldi	r24, 0x0A	; 10
     546:	08 95       	ret

00000548 <ADC_0_register_callback>:

void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
     548:	90 93 8b 01 	sts	0x018B, r25
     54c:	80 93 8a 01 	sts	0x018A, r24
}
     550:	08 95       	ret

00000552 <ISR>:

ISR(ADC_vect)
{

	if (ADC_0_cb != NULL) {
     552:	e0 91 8a 01 	lds	r30, 0x018A
     556:	f0 91 8b 01 	lds	r31, 0x018B
     55a:	30 97       	sbiw	r30, 0x00	; 0
     55c:	09 f0       	breq	.+2      	; 0x560 <ISR+0xe>
		ADC_0_cb();
     55e:	09 95       	icall
	}
     560:	08 95       	ret

00000562 <xAreRegTestTasksStillRunning>:
	xTaskCreate( prvRegisterCheck2, "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

portBASE_TYPE xAreRegTestTasksStillRunning( void )
{
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	80 91 8c 01 	lds	r24, 0x018C
     568:	88 23       	and	r24, r24
     56a:	09 f4       	brne	.+2      	; 0x56e <xAreRegTestTasksStillRunning+0xc>
     56c:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     56e:	89 2f       	mov	r24, r25
     570:	08 95       	ret

00000572 <prvRegisterCheck1>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	5"		);
     572:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r0,		r31"	);
     574:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	6"		);
     576:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r1,		r31"	);
     578:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	7"		);
     57a:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r2,		r31"	);
     57c:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	8"		);
     57e:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r3,		r31"	);
     580:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	9"		);
     582:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r4,		r31"	);
     584:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	10"		);
     586:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r5,		r31"	);
     588:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	11"		);
     58a:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r6,		r31"	);
     58c:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	12"		);
     58e:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r7,		r31"	);
     590:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	13"		);
     592:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r8,		r31"	);
     594:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	14"		);
     596:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r9,		r31"	);
     598:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	15"		);
     59a:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r10,	r31"	);
     59c:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	16"		);
     59e:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r11,	r31"	);
     5a0:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	17"		);
     5a2:	f1 e1       	ldi	r31, 0x11	; 17
		asm( 	"MOV	r12,	r31"	);
     5a4:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	18"		);
     5a6:	f2 e1       	ldi	r31, 0x12	; 18
		asm( 	"MOV	r13,	r31"	);
     5a8:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	19"		);
     5aa:	f3 e1       	ldi	r31, 0x13	; 19
		asm( 	"MOV	r14,	r31"	);
     5ac:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	20"		);
     5ae:	f4 e1       	ldi	r31, 0x14	; 20
		asm( 	"MOV	r15,	r31"	);
     5b0:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	21"		);
     5b2:	05 e1       	ldi	r16, 0x15	; 21
		asm(	"LDI	r17,	22"		);
     5b4:	16 e1       	ldi	r17, 0x16	; 22
		asm(	"LDI	r18,	23"		);
     5b6:	27 e1       	ldi	r18, 0x17	; 23
		asm(	"LDI	r19,	24"		);
     5b8:	38 e1       	ldi	r19, 0x18	; 24
		asm(	"LDI	r20,	25"		);
     5ba:	49 e1       	ldi	r20, 0x19	; 25
		asm(	"LDI	r21,	26"		);
     5bc:	5a e1       	ldi	r21, 0x1A	; 26
		asm(	"LDI	r22,	27"		);
     5be:	6b e1       	ldi	r22, 0x1B	; 27
		asm(	"LDI	r23,	28"		);
     5c0:	7c e1       	ldi	r23, 0x1C	; 28
		asm(	"LDI	r24,	29"		);
     5c2:	8d e1       	ldi	r24, 0x1D	; 29
		asm(	"LDI	r25,	30"		);
     5c4:	9e e1       	ldi	r25, 0x1E	; 30
		asm(	"LDI	r26,	31"		);
     5c6:	af e1       	ldi	r26, 0x1F	; 31
		asm(	"LDI	r27,	32"		);
     5c8:	b0 e2       	ldi	r27, 0x20	; 32
		asm(	"LDI	r30,	33"		);
     5ca:	e1 e2       	ldi	r30, 0x21	; 33

		asm(	"LDI	r31,	5"			);
     5cc:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r0"			);
     5ce:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     5d0:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	6"			);
     5d4:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r1"			);
     5d6:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     5d8:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	7"			);
     5dc:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r2"			);
     5de:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     5e0:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	8"			);
     5e4:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r3"			);
     5e6:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     5e8:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	9"			);
     5ec:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r4"			);
     5ee:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     5f0:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	10"			);
     5f4:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r5"			);
     5f6:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     5f8:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	11"			);
     5fc:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r6"			);
     5fe:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     600:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	12"			);
     604:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r7"			);
     606:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     608:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	13"			);
     60c:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r8"			);
     60e:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     610:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	14"			);
     614:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r9"			);
     616:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     618:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	15"			);
     61c:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r10"		);
     61e:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     620:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	16"			);
     624:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r11"		);
     626:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     628:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	17"			);
     62c:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r12"		);
     62e:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     630:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	18"			);
     634:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r13"		);
     636:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     638:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	19"			);
     63c:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r14"		);
     63e:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     640:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	20"			);
     644:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r15"		);
     646:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     648:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	21"			);
     64c:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r16"		);
     64e:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     650:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	22"			);
     654:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r17"		);
     656:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     658:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	23"			);
     65c:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r18"		);
     65e:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     660:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	24"			);
     664:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r19"		);
     666:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     668:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	25"			);
     66c:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r20"		);
     66e:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     670:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	26"			);
     674:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r21"		);
     676:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     678:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	27"			);
     67c:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r22"		);
     67e:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     680:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	28"			);
     684:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r23"		);
     686:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     688:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	29"			);
     68c:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r24"		);
     68e:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     690:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	30"			);
     694:	fe e1       	ldi	r31, 0x1E	; 30
		asm(	"CPSE	r31,	r25"		);
     696:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     698:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	31"			);
     69c:	ff e1       	ldi	r31, 0x1F	; 31
		asm(	"CPSE	r31,	r26"		);
     69e:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     6a0:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	32"			);
     6a4:	f0 e2       	ldi	r31, 0x20	; 32
		asm(	"CPSE	r31,	r27"		);
     6a6:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     6a8:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	33"			);
     6ac:	f1 e2       	ldi	r31, 0x21	; 33
		asm(	"CPSE	r31,	r30"		);
     6ae:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     6b0:	00 92 8c 01 	sts	0x018C, r0
     6b4:	5e cf       	rjmp	.-324    	; 0x572 <prvRegisterCheck1>

000006b6 <prvRegisterCheck2>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	1"		);
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
		asm( 	"MOV	r0,		r31"	);
     6b8:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	2"		);
     6ba:	f2 e0       	ldi	r31, 0x02	; 2
		asm( 	"MOV	r1,		r31"	);
     6bc:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	3"		);
     6be:	f3 e0       	ldi	r31, 0x03	; 3
		asm( 	"MOV	r2,		r31"	);
     6c0:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	4"		);
     6c2:	f4 e0       	ldi	r31, 0x04	; 4
		asm( 	"MOV	r3,		r31"	);
     6c4:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	5"		);
     6c6:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r4,		r31"	);
     6c8:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	6"		);
     6ca:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r5,		r31"	);
     6cc:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	7"		);
     6ce:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r6,		r31"	);
     6d0:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	8"		);
     6d2:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r7,		r31"	);
     6d4:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	9"		);
     6d6:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r8,		r31"	);
     6d8:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	10"		);
     6da:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r9,		r31"	);
     6dc:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	11"		);
     6de:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r10,	r31"	);
     6e0:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	12"		);
     6e2:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r11,	r31"	);
     6e4:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	13"		);
     6e6:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r12,	r31"	);
     6e8:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	14"		);
     6ea:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r13,	r31"	);
     6ec:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	15"		);
     6ee:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r14,	r31"	);
     6f0:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	16"		);
     6f2:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r15,	r31"	);
     6f4:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	17"		);
     6f6:	01 e1       	ldi	r16, 0x11	; 17
		asm(	"LDI	r17,	18"		);
     6f8:	12 e1       	ldi	r17, 0x12	; 18
		asm(	"LDI	r18,	19"		);
     6fa:	23 e1       	ldi	r18, 0x13	; 19
		asm(	"LDI	r19,	20"		);
     6fc:	34 e1       	ldi	r19, 0x14	; 20
		asm(	"LDI	r20,	21"		);
     6fe:	45 e1       	ldi	r20, 0x15	; 21
		asm(	"LDI	r21,	22"		);
     700:	56 e1       	ldi	r21, 0x16	; 22
		asm(	"LDI	r22,	23"		);
     702:	67 e1       	ldi	r22, 0x17	; 23
		asm(	"LDI	r23,	24"		);
     704:	78 e1       	ldi	r23, 0x18	; 24
		asm(	"LDI	r24,	25"		);
     706:	89 e1       	ldi	r24, 0x19	; 25
		asm(	"LDI	r25,	26"		);
     708:	9a e1       	ldi	r25, 0x1A	; 26
		asm(	"LDI	r26,	27"		);
     70a:	ab e1       	ldi	r26, 0x1B	; 27
		asm(	"LDI	r27,	28"		);
     70c:	bc e1       	ldi	r27, 0x1C	; 28
		asm(	"LDI	r30,	29"		);
     70e:	ed e1       	ldi	r30, 0x1D	; 29

		asm(	"LDI	r31,	1"			);
     710:	f1 e0       	ldi	r31, 0x01	; 1
		asm(	"CPSE	r31,	r0"			);
     712:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     714:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	2"			);
     718:	f2 e0       	ldi	r31, 0x02	; 2
		asm(	"CPSE	r31,	r1"			);
     71a:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     71c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	3"			);
     720:	f3 e0       	ldi	r31, 0x03	; 3
		asm(	"CPSE	r31,	r2"			);
     722:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     724:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	4"			);
     728:	f4 e0       	ldi	r31, 0x04	; 4
		asm(	"CPSE	r31,	r3"			);
     72a:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     72c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	5"			);
     730:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r4"			);
     732:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     734:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	6"			);
     738:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r5"			);
     73a:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     73c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	7"			);
     740:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r6"			);
     742:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     744:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	8"			);
     748:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r7"			);
     74a:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     74c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	9"			);
     750:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r8"			);
     752:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     754:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	10"			);
     758:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r9"			);
     75a:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     75c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	11"			);
     760:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r10"		);
     762:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     764:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	12"			);
     768:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r11"		);
     76a:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     76c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	13"			);
     770:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r12"		);
     772:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     774:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	14"			);
     778:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r13"		);
     77a:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     77c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	15"			);
     780:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r14"		);
     782:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     784:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	16"			);
     788:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r15"		);
     78a:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     78c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	17"			);
     790:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r16"		);
     792:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     794:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	18"			);
     798:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r17"		);
     79a:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     79c:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	19"			);
     7a0:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r18"		);
     7a2:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     7a4:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	20"			);
     7a8:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r19"		);
     7aa:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     7ac:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	21"			);
     7b0:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r20"		);
     7b2:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     7b4:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	22"			);
     7b8:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r21"		);
     7ba:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     7bc:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	23"			);
     7c0:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r22"		);
     7c2:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     7c4:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	24"			);
     7c8:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r23"		);
     7ca:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     7cc:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	25"			);
     7d0:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r24"		);
     7d2:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     7d4:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	26"			);
     7d8:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r25"		);
     7da:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     7dc:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	27"			);
     7e0:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r26"		);
     7e2:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     7e4:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	28"			);
     7e8:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r27"		);
     7ea:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     7ec:	00 92 8c 01 	sts	0x018C, r0
		asm(	"LDI	r31,	29"			);
     7f0:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r30"		);
     7f2:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     7f4:	00 92 8c 01 	sts	0x018C, r0
     7f8:	5e cf       	rjmp	.-324    	; 0x6b6 <prvRegisterCheck2>

000007fa <vStartRegTestTasks>:
portBASE_TYPE xRegTestError = pdFALSE;

/*-----------------------------------------------------------*/

void vStartRegTestTasks( void )
{
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
	xTaskCreate( prvRegisterCheck1, "Reg1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     800:	89 eb       	ldi	r24, 0xB9	; 185
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	6f e1       	ldi	r22, 0x1F	; 31
     806:	71 e0       	ldi	r23, 0x01	; 1
     808:	45 e5       	ldi	r20, 0x55	; 85
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	00 e0       	ldi	r16, 0x00	; 0
     812:	ee 24       	eor	r14, r14
     814:	ff 24       	eor	r15, r15
     816:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
	xTaskCreate( prvRegisterCheck2, "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     81a:	8b e5       	ldi	r24, 0x5B	; 91
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	64 e2       	ldi	r22, 0x24	; 36
     820:	71 e0       	ldi	r23, 0x01	; 1
     822:	45 e5       	ldi	r20, 0x55	; 85
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
}
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	08 95       	ret

00000836 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     836:	80 91 8f 01 	lds	r24, 0x018F
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	80 93 8f 01 	sts	0x018F, r24
}
     840:	08 95       	ret

00000842 <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     848:	20 91 92 01 	lds	r18, 0x0192
     84c:	30 91 93 01 	lds	r19, 0x0193
	}
	portTICK_TYPE_EXIT_CRITICAL();
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
     854:	c9 01       	movw	r24, r18
     856:	08 95       	ret

00000858 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
     858:	20 91 92 01 	lds	r18, 0x0192
     85c:	30 91 93 01 	lds	r19, 0x0193
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     860:	c9 01       	movw	r24, r18
     862:	08 95       	ret

00000864 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
     864:	80 91 98 01 	lds	r24, 0x0198
}
     868:	08 95       	ret

0000086a <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	21 f4       	brne	.+8      	; 0x876 <pcTaskGetName+0xc>
     86e:	80 91 8d 01 	lds	r24, 0x018D
     872:	90 91 8e 01 	lds	r25, 0x018E
     876:	9c 01       	movw	r18, r24
     878:	27 5e       	subi	r18, 0xE7	; 231
     87a:	3f 4f       	sbci	r19, 0xFF	; 255
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
}
     87c:	c9 01       	movw	r24, r18
     87e:	08 95       	ret

00000880 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     880:	80 91 8f 01 	lds	r24, 0x018F
     884:	88 23       	and	r24, r24
     886:	21 f0       	breq	.+8      	; 0x890 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 91 01 	sts	0x0191, r24
     88e:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     890:	10 92 91 01 	sts	0x0191, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     894:	20 91 90 01 	lds	r18, 0x0190
     898:	99 e0       	ldi	r25, 0x09	; 9
     89a:	01 c0       	rjmp	.+2      	; 0x89e <vTaskSwitchContext+0x1e>
     89c:	21 50       	subi	r18, 0x01	; 1
     89e:	29 9f       	mul	r18, r25
     8a0:	d0 01       	movw	r26, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	a2 56       	subi	r26, 0x62	; 98
     8a6:	be 4f       	sbci	r27, 0xFE	; 254
     8a8:	8c 91       	ld	r24, X
     8aa:	88 23       	and	r24, r24
     8ac:	b9 f3       	breq	.-18     	; 0x89c <vTaskSwitchContext+0x1c>
     8ae:	11 96       	adiw	r26, 0x01	; 1
     8b0:	ed 91       	ld	r30, X+
     8b2:	fc 91       	ld	r31, X
     8b4:	12 97       	sbiw	r26, 0x02	; 2
     8b6:	02 80       	ldd	r0, Z+2	; 0x02
     8b8:	f3 81       	ldd	r31, Z+3	; 0x03
     8ba:	e0 2d       	mov	r30, r0
     8bc:	12 96       	adiw	r26, 0x02	; 2
     8be:	fc 93       	st	X, r31
     8c0:	ee 93       	st	-X, r30
     8c2:	11 97       	sbiw	r26, 0x01	; 1
     8c4:	cd 01       	movw	r24, r26
     8c6:	03 96       	adiw	r24, 0x03	; 3
     8c8:	e8 17       	cp	r30, r24
     8ca:	f9 07       	cpc	r31, r25
     8cc:	31 f4       	brne	.+12     	; 0x8da <vTaskSwitchContext+0x5a>
     8ce:	82 81       	ldd	r24, Z+2	; 0x02
     8d0:	93 81       	ldd	r25, Z+3	; 0x03
     8d2:	12 96       	adiw	r26, 0x02	; 2
     8d4:	9c 93       	st	X, r25
     8d6:	8e 93       	st	-X, r24
     8d8:	11 97       	sbiw	r26, 0x01	; 1
     8da:	11 96       	adiw	r26, 0x01	; 1
     8dc:	ed 91       	ld	r30, X+
     8de:	fc 91       	ld	r31, X
     8e0:	12 97       	sbiw	r26, 0x02	; 2
     8e2:	86 81       	ldd	r24, Z+6	; 0x06
     8e4:	97 81       	ldd	r25, Z+7	; 0x07
     8e6:	90 93 8e 01 	sts	0x018E, r25
     8ea:	80 93 8d 01 	sts	0x018D, r24
     8ee:	20 93 90 01 	sts	0x0190, r18
     8f2:	08 95       	ret

000008f4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
     8f4:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     8f6:	80 91 96 01 	lds	r24, 0x0196
     8fa:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     8fc:	80 91 92 01 	lds	r24, 0x0192
     900:	90 91 93 01 	lds	r25, 0x0193
     904:	92 83       	std	Z+2, r25	; 0x02
     906:	81 83       	std	Z+1, r24	; 0x01
}
     908:	08 95       	ret

0000090a <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
     90a:	fc 01       	movw	r30, r24
     90c:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
     914:	40 91 92 01 	lds	r20, 0x0192
     918:	50 91 93 01 	lds	r21, 0x0193
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
     91c:	90 91 96 01 	lds	r25, 0x0196
     920:	80 81       	ld	r24, Z
     922:	98 17       	cp	r25, r24
     924:	29 f0       	breq	.+10     	; 0x930 <xTaskCheckForTimeOut+0x26>
     926:	81 81       	ldd	r24, Z+1	; 0x01
     928:	92 81       	ldd	r25, Z+2	; 0x02
     92a:	48 17       	cp	r20, r24
     92c:	59 07       	cpc	r21, r25
     92e:	e0 f4       	brcc	.+56     	; 0x968 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
     930:	21 81       	ldd	r18, Z+1	; 0x01
     932:	32 81       	ldd	r19, Z+2	; 0x02
     934:	6d 91       	ld	r22, X+
     936:	7c 91       	ld	r23, X
     938:	11 97       	sbiw	r26, 0x01	; 1
     93a:	ca 01       	movw	r24, r20
     93c:	82 1b       	sub	r24, r18
     93e:	93 0b       	sbc	r25, r19
     940:	86 17       	cp	r24, r22
     942:	97 07       	cpc	r25, r23
     944:	88 f4       	brcc	.+34     	; 0x968 <xTaskCheckForTimeOut+0x5e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
     946:	24 1b       	sub	r18, r20
     948:	35 0b       	sbc	r19, r21
     94a:	26 0f       	add	r18, r22
     94c:	37 1f       	adc	r19, r23
     94e:	2d 93       	st	X+, r18
     950:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     952:	80 91 96 01 	lds	r24, 0x0196
     956:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     958:	80 91 92 01 	lds	r24, 0x0192
     95c:	90 91 93 01 	lds	r25, 0x0193
     960:	92 83       	std	Z+2, r25	; 0x02
     962:	81 83       	std	Z+1, r24	; 0x01
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	01 c0       	rjmp	.+2      	; 0x96a <xTaskCheckForTimeOut+0x60>
     968:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
     96e:	08 95       	ret

00000970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 91 01 	sts	0x0191, r24
}
     976:	08 95       	ret

00000978 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
     978:	e0 91 8d 01 	lds	r30, 0x018D
     97c:	f0 91 8e 01 	lds	r31, 0x018E
     980:	84 85       	ldd	r24, Z+12	; 0x0c
     982:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     984:	a0 91 8d 01 	lds	r26, 0x018D
     988:	b0 91 8e 01 	lds	r27, 0x018E
     98c:	e0 91 8d 01 	lds	r30, 0x018D
     990:	f0 91 8e 01 	lds	r31, 0x018E
     994:	46 89       	ldd	r20, Z+22	; 0x16
     996:	24 e0       	ldi	r18, 0x04	; 4
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	24 1b       	sub	r18, r20
     99c:	31 09       	sbc	r19, r1
     99e:	1d 96       	adiw	r26, 0x0d	; 13
     9a0:	3c 93       	st	X, r19
     9a2:	2e 93       	st	-X, r18
     9a4:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
}
     9a6:	08 95       	ret

000009a8 <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	29 f4       	brne	.+10     	; 0x9b6 <xTaskNotifyStateClear+0xe>
     9ac:	e0 91 8d 01 	lds	r30, 0x018D
     9b0:	f0 91 8e 01 	lds	r31, 0x018E
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <xTaskNotifyStateClear+0x10>
     9b6:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
     9be:	85 a1       	ldd	r24, Z+37	; 0x25
     9c0:	82 30       	cpi	r24, 0x02	; 2
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <xTaskNotifyStateClear+0x20>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <xTaskNotifyStateClear+0x24>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     9c8:	15 a2       	std	Z+37, r1	; 0x25
     9ca:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		taskEXIT_CRITICAL();
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     9d0:	08 95       	ret

000009d2 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	7b 01       	movw	r14, r22
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
     9e0:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
     9e2:	2d a1       	ldd	r18, Y+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	8d a3       	std	Y+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
     9e8:	89 a1       	ldd	r24, Y+33	; 0x21
     9ea:	9a a1       	ldd	r25, Y+34	; 0x22
     9ec:	ab a1       	ldd	r26, Y+35	; 0x23
     9ee:	bc a1       	ldd	r27, Y+36	; 0x24
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	a1 1d       	adc	r26, r1
     9f4:	b1 1d       	adc	r27, r1
     9f6:	89 a3       	std	Y+33, r24	; 0x21
     9f8:	9a a3       	std	Y+34, r25	; 0x22
     9fa:	ab a3       	std	Y+35, r26	; 0x23
     9fc:	bc a3       	std	Y+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     9fe:	21 30       	cpi	r18, 0x01	; 1
     a00:	91 f5       	brne	.+100    	; 0xa66 <vTaskNotifyGiveFromISR+0x94>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     a02:	80 91 8f 01 	lds	r24, 0x018F
     a06:	88 23       	and	r24, r24
     a08:	a9 f4       	brne	.+42     	; 0xa34 <vTaskNotifyGiveFromISR+0x62>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     a0a:	8e 01       	movw	r16, r28
     a0c:	0e 5f       	subi	r16, 0xFE	; 254
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	c8 01       	movw	r24, r16
     a12:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     a16:	9e 89       	ldd	r25, Y+22	; 0x16
     a18:	80 91 90 01 	lds	r24, 0x0190
     a1c:	89 17       	cp	r24, r25
     a1e:	10 f4       	brcc	.+4      	; 0xa24 <vTaskNotifyGiveFromISR+0x52>
     a20:	90 93 90 01 	sts	0x0190, r25
     a24:	89 e0       	ldi	r24, 0x09	; 9
     a26:	98 9f       	mul	r25, r24
     a28:	c0 01       	movw	r24, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	82 56       	subi	r24, 0x62	; 98
     a2e:	9e 4f       	sbci	r25, 0xFE	; 254
     a30:	b8 01       	movw	r22, r16
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <vTaskNotifyGiveFromISR+0x6c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     a34:	be 01       	movw	r22, r28
     a36:	64 5f       	subi	r22, 0xF4	; 244
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	88 ed       	ldi	r24, 0xD8	; 216
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     a42:	e0 91 8d 01 	lds	r30, 0x018D
     a46:	f0 91 8e 01 	lds	r31, 0x018E
     a4a:	9e 89       	ldd	r25, Y+22	; 0x16
     a4c:	86 89       	ldd	r24, Z+22	; 0x16
     a4e:	89 17       	cp	r24, r25
     a50:	50 f4       	brcc	.+20     	; 0xa66 <vTaskNotifyGiveFromISR+0x94>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
     a52:	e1 14       	cp	r14, r1
     a54:	f1 04       	cpc	r15, r1
     a56:	21 f0       	breq	.+8      	; 0xa60 <vTaskNotifyGiveFromISR+0x8e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	f7 01       	movw	r30, r14
     a5c:	80 83       	st	Z, r24
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <vTaskNotifyGiveFromISR+0x94>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 93 91 01 	sts	0x0191, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	08 95       	ret

00000a74 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	f8 01       	movw	r30, r16
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
     a82:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
     a84:	01 15       	cp	r16, r1
     a86:	11 05       	cpc	r17, r1
     a88:	41 f0       	breq	.+16     	; 0xa9a <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
     a8a:	89 a1       	ldd	r24, Y+33	; 0x21
     a8c:	9a a1       	ldd	r25, Y+34	; 0x22
     a8e:	ab a1       	ldd	r26, Y+35	; 0x23
     a90:	bc a1       	ldd	r27, Y+36	; 0x24
     a92:	80 83       	st	Z, r24
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	a2 83       	std	Z+2, r26	; 0x02
     a98:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
     a9a:	3d a1       	ldd	r19, Y+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
     aa0:	22 30       	cpi	r18, 0x02	; 2
     aa2:	99 f0       	breq	.+38     	; 0xaca <xTaskGenericNotifyFromISR+0x56>
     aa4:	23 30       	cpi	r18, 0x03	; 3
     aa6:	18 f4       	brcc	.+6      	; 0xaae <xTaskGenericNotifyFromISR+0x3a>
     aa8:	21 30       	cpi	r18, 0x01	; 1
     aaa:	19 f5       	brne	.+70     	; 0xaf2 <xTaskGenericNotifyFromISR+0x7e>
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <xTaskGenericNotifyFromISR+0x44>
     aae:	23 30       	cpi	r18, 0x03	; 3
     ab0:	e1 f0       	breq	.+56     	; 0xaea <xTaskGenericNotifyFromISR+0x76>
     ab2:	24 30       	cpi	r18, 0x04	; 4
     ab4:	f1 f4       	brne	.+60     	; 0xaf2 <xTaskGenericNotifyFromISR+0x7e>
     ab6:	15 c0       	rjmp	.+42     	; 0xae2 <xTaskGenericNotifyFromISR+0x6e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
     ab8:	89 a1       	ldd	r24, Y+33	; 0x21
     aba:	9a a1       	ldd	r25, Y+34	; 0x22
     abc:	ab a1       	ldd	r26, Y+35	; 0x23
     abe:	bc a1       	ldd	r27, Y+36	; 0x24
     ac0:	84 2b       	or	r24, r20
     ac2:	95 2b       	or	r25, r21
     ac4:	a6 2b       	or	r26, r22
     ac6:	b7 2b       	or	r27, r23
     ac8:	07 c0       	rjmp	.+14     	; 0xad8 <xTaskGenericNotifyFromISR+0x64>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
     aca:	89 a1       	ldd	r24, Y+33	; 0x21
     acc:	9a a1       	ldd	r25, Y+34	; 0x22
     ace:	ab a1       	ldd	r26, Y+35	; 0x23
     ad0:	bc a1       	ldd	r27, Y+36	; 0x24
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	a1 1d       	adc	r26, r1
     ad6:	b1 1d       	adc	r27, r1
     ad8:	89 a3       	std	Y+33, r24	; 0x21
     ada:	9a a3       	std	Y+34, r25	; 0x22
     adc:	ab a3       	std	Y+35, r26	; 0x23
     ade:	bc a3       	std	Y+36, r27	; 0x24
     ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <xTaskGenericNotifyFromISR+0x7e>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
     ae2:	32 30       	cpi	r19, 0x02	; 2
     ae4:	11 f4       	brne	.+4      	; 0xaea <xTaskGenericNotifyFromISR+0x76>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	3a c0       	rjmp	.+116    	; 0xb5e <xTaskGenericNotifyFromISR+0xea>
					{
						pxTCB->ulNotifiedValue = ulValue;
     aea:	49 a3       	std	Y+33, r20	; 0x21
     aec:	5a a3       	std	Y+34, r21	; 0x22
     aee:	6b a3       	std	Y+35, r22	; 0x23
     af0:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     af2:	31 30       	cpi	r19, 0x01	; 1
     af4:	99 f5       	brne	.+102    	; 0xb5c <xTaskGenericNotifyFromISR+0xe8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     af6:	80 91 8f 01 	lds	r24, 0x018F
     afa:	88 23       	and	r24, r24
     afc:	a9 f4       	brne	.+42     	; 0xb28 <xTaskGenericNotifyFromISR+0xb4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     afe:	8e 01       	movw	r16, r28
     b00:	0e 5f       	subi	r16, 0xFE	; 254
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	c8 01       	movw	r24, r16
     b06:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     b0a:	9e 89       	ldd	r25, Y+22	; 0x16
     b0c:	80 91 90 01 	lds	r24, 0x0190
     b10:	89 17       	cp	r24, r25
     b12:	10 f4       	brcc	.+4      	; 0xb18 <xTaskGenericNotifyFromISR+0xa4>
     b14:	90 93 90 01 	sts	0x0190, r25
     b18:	89 e0       	ldi	r24, 0x09	; 9
     b1a:	98 9f       	mul	r25, r24
     b1c:	c0 01       	movw	r24, r0
     b1e:	11 24       	eor	r1, r1
     b20:	82 56       	subi	r24, 0x62	; 98
     b22:	9e 4f       	sbci	r25, 0xFE	; 254
     b24:	b8 01       	movw	r22, r16
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <xTaskGenericNotifyFromISR+0xbe>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     b28:	be 01       	movw	r22, r28
     b2a:	64 5f       	subi	r22, 0xF4	; 244
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	88 ed       	ldi	r24, 0xD8	; 216
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     b36:	e0 91 8d 01 	lds	r30, 0x018D
     b3a:	f0 91 8e 01 	lds	r31, 0x018E
     b3e:	9e 89       	ldd	r25, Y+22	; 0x16
     b40:	86 89       	ldd	r24, Z+22	; 0x16
     b42:	89 17       	cp	r24, r25
     b44:	58 f4       	brcc	.+22     	; 0xb5c <xTaskGenericNotifyFromISR+0xe8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
     b46:	e1 14       	cp	r14, r1
     b48:	f1 04       	cpc	r15, r1
     b4a:	21 f0       	breq	.+8      	; 0xb54 <xTaskGenericNotifyFromISR+0xe0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	f7 01       	movw	r30, r14
     b50:	80 83       	st	Z, r24
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <xTaskGenericNotifyFromISR+0xea>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 91 01 	sts	0x0191, r24
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <xTaskGenericNotifyFromISR+0xea>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret

00000b6c <xTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	fc 01       	movw	r30, r24
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
     b76:	70 68       	ori	r23, 0x80	; 128
     b78:	71 83       	std	Z+1, r23	; 0x01
     b7a:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
     b7c:	c6 81       	ldd	r28, Z+6	; 0x06
     b7e:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
     b80:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
     b84:	8e 01       	movw	r16, r28
     b86:	0e 5f       	subi	r16, 0xFE	; 254
     b88:	1f 4f       	sbci	r17, 0xFF	; 255
     b8a:	c8 01       	movw	r24, r16
     b8c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
     b90:	9e 89       	ldd	r25, Y+22	; 0x16
     b92:	80 91 90 01 	lds	r24, 0x0190
     b96:	89 17       	cp	r24, r25
     b98:	10 f4       	brcc	.+4      	; 0xb9e <xTaskRemoveFromUnorderedEventList+0x32>
     b9a:	90 93 90 01 	sts	0x0190, r25
     b9e:	89 e0       	ldi	r24, 0x09	; 9
     ba0:	98 9f       	mul	r25, r24
     ba2:	c0 01       	movw	r24, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	82 56       	subi	r24, 0x62	; 98
     ba8:	9e 4f       	sbci	r25, 0xFE	; 254
     baa:	b8 01       	movw	r22, r16
     bac:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
     bb0:	e0 91 8d 01 	lds	r30, 0x018D
     bb4:	f0 91 8e 01 	lds	r31, 0x018E
     bb8:	9e 89       	ldd	r25, Y+22	; 0x16
     bba:	86 89       	ldd	r24, Z+22	; 0x16
     bbc:	89 17       	cp	r24, r25
     bbe:	10 f0       	brcs	.+4      	; 0xbc4 <xTaskRemoveFromUnorderedEventList+0x58>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <xTaskRemoveFromUnorderedEventList+0x5e>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	80 93 91 01 	sts	0x0191, r24
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     bdc:	dc 01       	movw	r26, r24
     bde:	15 96       	adiw	r26, 0x05	; 5
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	16 97       	sbiw	r26, 0x06	; 6
     be6:	c6 81       	ldd	r28, Z+6	; 0x06
     be8:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     bea:	8e 01       	movw	r16, r28
     bec:	04 5f       	subi	r16, 0xF4	; 244
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	c8 01       	movw	r24, r16
     bf2:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     bf6:	80 91 8f 01 	lds	r24, 0x018F
     bfa:	88 23       	and	r24, r24
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
     bfe:	8e 01       	movw	r16, r28
     c00:	0e 5f       	subi	r16, 0xFE	; 254
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	c8 01       	movw	r24, r16
     c06:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
     c0a:	9e 89       	ldd	r25, Y+22	; 0x16
     c0c:	80 91 90 01 	lds	r24, 0x0190
     c10:	89 17       	cp	r24, r25
     c12:	10 f4       	brcc	.+4      	; 0xc18 <xTaskRemoveFromEventList+0x44>
     c14:	90 93 90 01 	sts	0x0190, r25
     c18:	89 e0       	ldi	r24, 0x09	; 9
     c1a:	98 9f       	mul	r25, r24
     c1c:	c0 01       	movw	r24, r0
     c1e:	11 24       	eor	r1, r1
     c20:	82 56       	subi	r24, 0x62	; 98
     c22:	9e 4f       	sbci	r25, 0xFE	; 254
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <xTaskRemoveFromEventList+0x56>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     c26:	88 ed       	ldi	r24, 0xD8	; 216
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	b8 01       	movw	r22, r16
     c2c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
     c30:	e0 91 8d 01 	lds	r30, 0x018D
     c34:	f0 91 8e 01 	lds	r31, 0x018E
     c38:	9e 89       	ldd	r25, Y+22	; 0x16
     c3a:	86 89       	ldd	r24, Z+22	; 0x16
     c3c:	89 17       	cp	r24, r25
     c3e:	10 f0       	brcs	.+4      	; 0xc44 <xTaskRemoveFromEventList+0x70>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <xTaskRemoveFromEventList+0x76>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 93 91 01 	sts	0x0191, r24
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	08 95       	ret

00000c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     c64:	80 91 8f 01 	lds	r24, 0x018F
     c68:	88 23       	and	r24, r24
     c6a:	09 f0       	breq	.+2      	; 0xc6e <xTaskIncrementTick+0x1a>
     c6c:	a6 c0       	rjmp	.+332    	; 0xdba <xTaskIncrementTick+0x166>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
     c6e:	00 91 92 01 	lds	r16, 0x0192
     c72:	10 91 93 01 	lds	r17, 0x0193
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
     c7a:	10 93 93 01 	sts	0x0193, r17
     c7e:	00 93 92 01 	sts	0x0192, r16

		if( xConstTickCount == ( TickType_t ) 0U )
     c82:	01 15       	cp	r16, r1
     c84:	11 05       	cpc	r17, r1
     c86:	79 f5       	brne	.+94     	; 0xce6 <xTaskIncrementTick+0x92>
		{
			taskSWITCH_DELAYED_LISTS();
     c88:	20 91 d4 01 	lds	r18, 0x01D4
     c8c:	30 91 d5 01 	lds	r19, 0x01D5
     c90:	80 91 d6 01 	lds	r24, 0x01D6
     c94:	90 91 d7 01 	lds	r25, 0x01D7
     c98:	90 93 d5 01 	sts	0x01D5, r25
     c9c:	80 93 d4 01 	sts	0x01D4, r24
     ca0:	30 93 d7 01 	sts	0x01D7, r19
     ca4:	20 93 d6 01 	sts	0x01D6, r18
     ca8:	80 91 96 01 	lds	r24, 0x0196
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	80 93 96 01 	sts	0x0196, r24

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     cb2:	e0 91 d4 01 	lds	r30, 0x01D4
     cb6:	f0 91 d5 01 	lds	r31, 0x01D5
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	19 f4       	brne	.+6      	; 0xcc6 <xTaskIncrementTick+0x72>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
     cc4:	0c c0       	rjmp	.+24     	; 0xcde <xTaskIncrementTick+0x8a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     cc6:	e0 91 d4 01 	lds	r30, 0x01D4
     cca:	f0 91 d5 01 	lds	r31, 0x01D5
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     cce:	05 80       	ldd	r0, Z+5	; 0x05
     cd0:	f6 81       	ldd	r31, Z+6	; 0x06
     cd2:	e0 2d       	mov	r30, r0
     cd4:	06 80       	ldd	r0, Z+6	; 0x06
     cd6:	f7 81       	ldd	r31, Z+7	; 0x07
     cd8:	e0 2d       	mov	r30, r0
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	90 93 95 01 	sts	0x0195, r25
     ce2:	80 93 94 01 	sts	0x0194, r24

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
     ce6:	80 91 94 01 	lds	r24, 0x0194
     cea:	90 91 95 01 	lds	r25, 0x0195
     cee:	08 17       	cp	r16, r24
     cf0:	19 07       	cpc	r17, r25
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <xTaskIncrementTick+0xa2>
     cf4:	4b c0       	rjmp	.+150    	; 0xd8c <xTaskIncrementTick+0x138>
     cf6:	dd 24       	eor	r13, r13
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     cf8:	49 e0       	ldi	r20, 0x09	; 9
     cfa:	c4 2e       	mov	r12, r20
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     cfc:	e0 91 d4 01 	lds	r30, 0x01D4
     d00:	f0 91 d5 01 	lds	r31, 0x01D5
     d04:	80 81       	ld	r24, Z
     d06:	88 23       	and	r24, r24
     d08:	19 f4       	brne	.+6      	; 0xd10 <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	9f ef       	ldi	r25, 0xFF	; 255
     d0e:	0e c0       	rjmp	.+28     	; 0xd2c <xTaskIncrementTick+0xd8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     d10:	e0 91 d4 01 	lds	r30, 0x01D4
     d14:	f0 91 d5 01 	lds	r31, 0x01D5
     d18:	05 80       	ldd	r0, Z+5	; 0x05
     d1a:	f6 81       	ldd	r31, Z+6	; 0x06
     d1c:	e0 2d       	mov	r30, r0
     d1e:	c6 81       	ldd	r28, Z+6	; 0x06
     d20:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
     d26:	08 17       	cp	r16, r24
     d28:	19 07       	cpc	r17, r25
     d2a:	28 f4       	brcc	.+10     	; 0xd36 <xTaskIncrementTick+0xe2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
     d2c:	90 93 95 01 	sts	0x0195, r25
     d30:	80 93 94 01 	sts	0x0194, r24
     d34:	2c c0       	rjmp	.+88     	; 0xd8e <xTaskIncrementTick+0x13a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     d36:	32 e0       	ldi	r19, 0x02	; 2
     d38:	e3 2e       	mov	r14, r19
     d3a:	f1 2c       	mov	r15, r1
     d3c:	ec 0e       	add	r14, r28
     d3e:	fd 1e       	adc	r15, r29
     d40:	c7 01       	movw	r24, r14
     d42:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     d46:	8c 89       	ldd	r24, Y+20	; 0x14
     d48:	9d 89       	ldd	r25, Y+21	; 0x15
     d4a:	89 2b       	or	r24, r25
     d4c:	21 f0       	breq	.+8      	; 0xd56 <xTaskIncrementTick+0x102>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     d4e:	ce 01       	movw	r24, r28
     d50:	0c 96       	adiw	r24, 0x0c	; 12
     d52:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     d56:	9e 89       	ldd	r25, Y+22	; 0x16
     d58:	80 91 90 01 	lds	r24, 0x0190
     d5c:	89 17       	cp	r24, r25
     d5e:	10 f4       	brcc	.+4      	; 0xd64 <xTaskIncrementTick+0x110>
     d60:	90 93 90 01 	sts	0x0190, r25
     d64:	9c 9d       	mul	r25, r12
     d66:	c0 01       	movw	r24, r0
     d68:	11 24       	eor	r1, r1
     d6a:	82 56       	subi	r24, 0x62	; 98
     d6c:	9e 4f       	sbci	r25, 0xFE	; 254
     d6e:	b7 01       	movw	r22, r14
     d70:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     d74:	e0 91 8d 01 	lds	r30, 0x018D
     d78:	f0 91 8e 01 	lds	r31, 0x018E
     d7c:	9e 89       	ldd	r25, Y+22	; 0x16
     d7e:	86 89       	ldd	r24, Z+22	; 0x16
     d80:	98 17       	cp	r25, r24
     d82:	08 f4       	brcc	.+2      	; 0xd86 <xTaskIncrementTick+0x132>
     d84:	bb cf       	rjmp	.-138    	; 0xcfc <xTaskIncrementTick+0xa8>
     d86:	dd 24       	eor	r13, r13
     d88:	d3 94       	inc	r13
     d8a:	b8 cf       	rjmp	.-144    	; 0xcfc <xTaskIncrementTick+0xa8>
     d8c:	dd 24       	eor	r13, r13
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     d8e:	e0 91 8d 01 	lds	r30, 0x018D
     d92:	f0 91 8e 01 	lds	r31, 0x018E
     d96:	86 89       	ldd	r24, Z+22	; 0x16
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	23 e0       	ldi	r18, 0x03	; 3
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	2a 95       	dec	r18
     da4:	e1 f7       	brne	.-8      	; 0xd9e <xTaskIncrementTick+0x14a>
     da6:	e8 0f       	add	r30, r24
     da8:	f9 1f       	adc	r31, r25
     daa:	e2 56       	subi	r30, 0x62	; 98
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	80 81       	ld	r24, Z
     db0:	82 30       	cpi	r24, 0x02	; 2
     db2:	48 f0       	brcs	.+18     	; 0xdc6 <xTaskIncrementTick+0x172>
     db4:	dd 24       	eor	r13, r13
     db6:	d3 94       	inc	r13
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <xTaskIncrementTick+0x172>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     dba:	80 91 97 01 	lds	r24, 0x0197
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	80 93 97 01 	sts	0x0197, r24
     dc4:	dd 24       	eor	r13, r13
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     dc6:	80 91 91 01 	lds	r24, 0x0191
     dca:	88 23       	and	r24, r24
     dcc:	11 f0       	breq	.+4      	; 0xdd2 <xTaskIncrementTick+0x17e>
     dce:	dd 24       	eor	r13, r13
     dd0:	d3 94       	inc	r13
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
     dd2:	8d 2d       	mov	r24, r13
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	08 95       	ret

00000de6 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	f8 01       	movw	r30, r16
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
     df0:	ec 01       	movw	r28, r24

		taskENTER_CRITICAL();
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
     df8:	01 15       	cp	r16, r1
     dfa:	11 05       	cpc	r17, r1
     dfc:	41 f0       	breq	.+16     	; 0xe0e <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
     dfe:	89 a1       	ldd	r24, Y+33	; 0x21
     e00:	9a a1       	ldd	r25, Y+34	; 0x22
     e02:	ab a1       	ldd	r26, Y+35	; 0x23
     e04:	bc a1       	ldd	r27, Y+36	; 0x24
     e06:	80 83       	st	Z, r24
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	a2 83       	std	Z+2, r26	; 0x02
     e0c:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
     e0e:	3d a1       	ldd	r19, Y+37	; 0x25

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
     e14:	22 30       	cpi	r18, 0x02	; 2
     e16:	99 f0       	breq	.+38     	; 0xe3e <xTaskGenericNotify+0x58>
     e18:	23 30       	cpi	r18, 0x03	; 3
     e1a:	18 f4       	brcc	.+6      	; 0xe22 <xTaskGenericNotify+0x3c>
     e1c:	21 30       	cpi	r18, 0x01	; 1
     e1e:	19 f5       	brne	.+70     	; 0xe66 <xTaskGenericNotify+0x80>
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <xTaskGenericNotify+0x46>
     e22:	23 30       	cpi	r18, 0x03	; 3
     e24:	e1 f0       	breq	.+56     	; 0xe5e <xTaskGenericNotify+0x78>
     e26:	24 30       	cpi	r18, 0x04	; 4
     e28:	f1 f4       	brne	.+60     	; 0xe66 <xTaskGenericNotify+0x80>
     e2a:	15 c0       	rjmp	.+42     	; 0xe56 <xTaskGenericNotify+0x70>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
     e2c:	89 a1       	ldd	r24, Y+33	; 0x21
     e2e:	9a a1       	ldd	r25, Y+34	; 0x22
     e30:	ab a1       	ldd	r26, Y+35	; 0x23
     e32:	bc a1       	ldd	r27, Y+36	; 0x24
     e34:	84 2b       	or	r24, r20
     e36:	95 2b       	or	r25, r21
     e38:	a6 2b       	or	r26, r22
     e3a:	b7 2b       	or	r27, r23
     e3c:	07 c0       	rjmp	.+14     	; 0xe4c <xTaskGenericNotify+0x66>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
     e3e:	89 a1       	ldd	r24, Y+33	; 0x21
     e40:	9a a1       	ldd	r25, Y+34	; 0x22
     e42:	ab a1       	ldd	r26, Y+35	; 0x23
     e44:	bc a1       	ldd	r27, Y+36	; 0x24
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	a1 1d       	adc	r26, r1
     e4a:	b1 1d       	adc	r27, r1
     e4c:	89 a3       	std	Y+33, r24	; 0x21
     e4e:	9a a3       	std	Y+34, r25	; 0x22
     e50:	ab a3       	std	Y+35, r26	; 0x23
     e52:	bc a3       	std	Y+36, r27	; 0x24
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <xTaskGenericNotify+0x80>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
     e56:	32 30       	cpi	r19, 0x02	; 2
     e58:	11 f4       	brne	.+4      	; 0xe5e <xTaskGenericNotify+0x78>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	27 c0       	rjmp	.+78     	; 0xeac <xTaskGenericNotify+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
     e5e:	49 a3       	std	Y+33, r20	; 0x21
     e60:	5a a3       	std	Y+34, r21	; 0x22
     e62:	6b a3       	std	Y+35, r22	; 0x23
     e64:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     e66:	31 30       	cpi	r19, 0x01	; 1
     e68:	01 f5       	brne	.+64     	; 0xeaa <xTaskGenericNotify+0xc4>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     e6a:	8e 01       	movw	r16, r28
     e6c:	0e 5f       	subi	r16, 0xFE	; 254
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	c8 01       	movw	r24, r16
     e72:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
     e76:	9e 89       	ldd	r25, Y+22	; 0x16
     e78:	80 91 90 01 	lds	r24, 0x0190
     e7c:	89 17       	cp	r24, r25
     e7e:	10 f4       	brcc	.+4      	; 0xe84 <xTaskGenericNotify+0x9e>
     e80:	90 93 90 01 	sts	0x0190, r25
     e84:	89 e0       	ldi	r24, 0x09	; 9
     e86:	98 9f       	mul	r25, r24
     e88:	c0 01       	movw	r24, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	82 56       	subi	r24, 0x62	; 98
     e8e:	9e 4f       	sbci	r25, 0xFE	; 254
     e90:	b8 01       	movw	r22, r16
     e92:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     e96:	e0 91 8d 01 	lds	r30, 0x018D
     e9a:	f0 91 8e 01 	lds	r31, 0x018E
     e9e:	9e 89       	ldd	r25, Y+22	; 0x16
     ea0:	86 89       	ldd	r24, Z+22	; 0x16
     ea2:	89 17       	cp	r24, r25
     ea4:	10 f4       	brcc	.+4      	; 0xeaa <xTaskGenericNotify+0xc4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
     ea6:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret

00000eba <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     ecc:	80 91 8f 01 	lds	r24, 0x018F
     ed0:	81 50       	subi	r24, 0x01	; 1
     ed2:	80 93 8f 01 	sts	0x018F, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     ed6:	80 91 8f 01 	lds	r24, 0x018F
     eda:	88 23       	and	r24, r24
     edc:	09 f0       	breq	.+2      	; 0xee0 <xTaskResumeAll+0x26>
     ede:	6c c0       	rjmp	.+216    	; 0xfb8 <xTaskResumeAll+0xfe>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     ee0:	80 91 98 01 	lds	r24, 0x0198
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <xTaskResumeAll+0x30>
     ee8:	67 c0       	rjmp	.+206    	; 0xfb8 <xTaskResumeAll+0xfe>
     eea:	c0 e0       	ldi	r28, 0x00	; 0
     eec:	d0 e0       	ldi	r29, 0x00	; 0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
     eee:	59 e0       	ldi	r21, 0x09	; 9
     ef0:	e5 2e       	mov	r14, r21

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
     ef2:	ff 24       	eor	r15, r15
     ef4:	f3 94       	inc	r15
     ef6:	29 c0       	rjmp	.+82     	; 0xf4a <xTaskResumeAll+0x90>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     ef8:	e0 91 dd 01 	lds	r30, 0x01DD
     efc:	f0 91 de 01 	lds	r31, 0x01DE
     f00:	c6 81       	ldd	r28, Z+6	; 0x06
     f02:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     f04:	ce 01       	movw	r24, r28
     f06:	0c 96       	adiw	r24, 0x0c	; 12
     f08:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     f0c:	8e 01       	movw	r16, r28
     f0e:	0e 5f       	subi	r16, 0xFE	; 254
     f10:	1f 4f       	sbci	r17, 0xFF	; 255
     f12:	c8 01       	movw	r24, r16
     f14:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     f18:	9e 89       	ldd	r25, Y+22	; 0x16
     f1a:	80 91 90 01 	lds	r24, 0x0190
     f1e:	89 17       	cp	r24, r25
     f20:	10 f4       	brcc	.+4      	; 0xf26 <xTaskResumeAll+0x6c>
     f22:	90 93 90 01 	sts	0x0190, r25
     f26:	9e 9d       	mul	r25, r14
     f28:	c0 01       	movw	r24, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	82 56       	subi	r24, 0x62	; 98
     f2e:	9e 4f       	sbci	r25, 0xFE	; 254
     f30:	b8 01       	movw	r22, r16
     f32:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     f36:	e0 91 8d 01 	lds	r30, 0x018D
     f3a:	f0 91 8e 01 	lds	r31, 0x018E
     f3e:	9e 89       	ldd	r25, Y+22	; 0x16
     f40:	86 89       	ldd	r24, Z+22	; 0x16
     f42:	98 17       	cp	r25, r24
     f44:	10 f0       	brcs	.+4      	; 0xf4a <xTaskResumeAll+0x90>
					{
						xYieldPending = pdTRUE;
     f46:	f0 92 91 01 	sts	0x0191, r15
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     f4a:	80 91 d8 01 	lds	r24, 0x01D8
     f4e:	88 23       	and	r24, r24
     f50:	99 f6       	brne	.-90     	; 0xef8 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
     f52:	cd 2b       	or	r28, r29
     f54:	d1 f0       	breq	.+52     	; 0xf8a <xTaskResumeAll+0xd0>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     f56:	e0 91 d4 01 	lds	r30, 0x01D4
     f5a:	f0 91 d5 01 	lds	r31, 0x01D5
     f5e:	80 81       	ld	r24, Z
     f60:	88 23       	and	r24, r24
     f62:	19 f4       	brne	.+6      	; 0xf6a <xTaskResumeAll+0xb0>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     f64:	8f ef       	ldi	r24, 0xFF	; 255
     f66:	9f ef       	ldi	r25, 0xFF	; 255
     f68:	0c c0       	rjmp	.+24     	; 0xf82 <xTaskResumeAll+0xc8>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     f6a:	e0 91 d4 01 	lds	r30, 0x01D4
     f6e:	f0 91 d5 01 	lds	r31, 0x01D5
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     f72:	05 80       	ldd	r0, Z+5	; 0x05
     f74:	f6 81       	ldd	r31, Z+6	; 0x06
     f76:	e0 2d       	mov	r30, r0
     f78:	06 80       	ldd	r0, Z+6	; 0x06
     f7a:	f7 81       	ldd	r31, Z+7	; 0x07
     f7c:	e0 2d       	mov	r30, r0
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	90 93 95 01 	sts	0x0195, r25
     f86:	80 93 94 01 	sts	0x0194, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     f8a:	10 91 97 01 	lds	r17, 0x0197

					if( uxPendedCounts > ( UBaseType_t ) 0U )
     f8e:	11 23       	and	r17, r17
     f90:	59 f0       	breq	.+22     	; 0xfa8 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
     f92:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
     f94:	0e 94 2a 06 	call	0xc54	; 0xc54 <xTaskIncrementTick>
     f98:	88 23       	and	r24, r24
     f9a:	11 f0       	breq	.+4      	; 0xfa0 <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
     f9c:	00 93 91 01 	sts	0x0191, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
     fa0:	11 50       	subi	r17, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
     fa2:	c1 f7       	brne	.-16     	; 0xf94 <xTaskResumeAll+0xda>

						uxPendedTicks = 0;
     fa4:	10 92 97 01 	sts	0x0197, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
     fa8:	80 91 91 01 	lds	r24, 0x0191
     fac:	88 23       	and	r24, r24
     fae:	21 f0       	breq	.+8      	; 0xfb8 <xTaskResumeAll+0xfe>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
     fb0:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <xTaskResumeAll+0x100>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	08 95       	ret

00000fcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     fd6:	00 91 92 01 	lds	r16, 0x0192
     fda:	10 91 93 01 	lds	r17, 0x0193
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     fde:	80 91 8d 01 	lds	r24, 0x018D
     fe2:	90 91 8e 01 	lds	r25, 0x018E
     fe6:	02 96       	adiw	r24, 0x02	; 2
     fe8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
     fec:	c0 0f       	add	r28, r16
     fee:	d1 1f       	adc	r29, r17

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     ff0:	e0 91 8d 01 	lds	r30, 0x018D
     ff4:	f0 91 8e 01 	lds	r31, 0x018E
     ff8:	d3 83       	std	Z+3, r29	; 0x03
     ffa:	c2 83       	std	Z+2, r28	; 0x02

		if( xTimeToWake < xConstTickCount )
     ffc:	c0 17       	cp	r28, r16
     ffe:	d1 07       	cpc	r29, r17
    1000:	68 f4       	brcc	.+26     	; 0x101c <prvAddCurrentTaskToDelayedList+0x50>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1002:	80 91 d6 01 	lds	r24, 0x01D6
    1006:	90 91 d7 01 	lds	r25, 0x01D7
    100a:	60 91 8d 01 	lds	r22, 0x018D
    100e:	70 91 8e 01 	lds	r23, 0x018E
    1012:	6e 5f       	subi	r22, 0xFE	; 254
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <vListInsert>
    101a:	17 c0       	rjmp	.+46     	; 0x104a <prvAddCurrentTaskToDelayedList+0x7e>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    101c:	80 91 d4 01 	lds	r24, 0x01D4
    1020:	90 91 d5 01 	lds	r25, 0x01D5
    1024:	60 91 8d 01 	lds	r22, 0x018D
    1028:	70 91 8e 01 	lds	r23, 0x018E
    102c:	6e 5f       	subi	r22, 0xFE	; 254
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    1034:	80 91 94 01 	lds	r24, 0x0194
    1038:	90 91 95 01 	lds	r25, 0x0195
    103c:	c8 17       	cp	r28, r24
    103e:	d9 07       	cpc	r29, r25
    1040:	20 f4       	brcc	.+8      	; 0x104a <prvAddCurrentTaskToDelayedList+0x7e>
			{
				xNextTaskUnblockTime = xTimeToWake;
    1042:	d0 93 95 01 	sts	0x0195, r29
    1046:	c0 93 94 01 	sts	0x0194, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    1054:	6f 92       	push	r6
    1056:	7f 92       	push	r7
    1058:	8f 92       	push	r8
    105a:	9f 92       	push	r9
    105c:	af 92       	push	r10
    105e:	bf 92       	push	r11
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	5b 01       	movw	r10, r22
    1072:	6c 01       	movw	r12, r24
    1074:	39 01       	movw	r6, r18
    1076:	4a 01       	movw	r8, r20
    1078:	e8 01       	movw	r28, r16
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    1080:	e0 91 8d 01 	lds	r30, 0x018D
    1084:	f0 91 8e 01 	lds	r31, 0x018E
    1088:	85 a1       	ldd	r24, Z+37	; 0x25
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	19 f1       	breq	.+70     	; 0x10d4 <xTaskNotifyWait+0x80>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    108e:	e0 91 8d 01 	lds	r30, 0x018D
    1092:	f0 91 8e 01 	lds	r31, 0x018E
    1096:	81 a1       	ldd	r24, Z+33	; 0x21
    1098:	92 a1       	ldd	r25, Z+34	; 0x22
    109a:	a3 a1       	ldd	r26, Z+35	; 0x23
    109c:	b4 a1       	ldd	r27, Z+36	; 0x24
    109e:	a0 94       	com	r10
    10a0:	b0 94       	com	r11
    10a2:	c0 94       	com	r12
    10a4:	d0 94       	com	r13
    10a6:	8a 21       	and	r24, r10
    10a8:	9b 21       	and	r25, r11
    10aa:	ac 21       	and	r26, r12
    10ac:	bd 21       	and	r27, r13
    10ae:	81 a3       	std	Z+33, r24	; 0x21
    10b0:	92 a3       	std	Z+34, r25	; 0x22
    10b2:	a3 a3       	std	Z+35, r26	; 0x23
    10b4:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    10b6:	e0 91 8d 01 	lds	r30, 0x018D
    10ba:	f0 91 8e 01 	lds	r31, 0x018E
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    10c2:	e1 14       	cp	r14, r1
    10c4:	f1 04       	cpc	r15, r1
    10c6:	31 f0       	breq	.+12     	; 0x10d4 <xTaskNotifyWait+0x80>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    10c8:	c7 01       	movw	r24, r14
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	0e 94 e6 07 	call	0xfcc	; 0xfcc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    10d0:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    10de:	20 97       	sbiw	r28, 0x00	; 0
    10e0:	61 f0       	breq	.+24     	; 0x10fa <xTaskNotifyWait+0xa6>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    10e2:	e0 91 8d 01 	lds	r30, 0x018D
    10e6:	f0 91 8e 01 	lds	r31, 0x018E
    10ea:	81 a1       	ldd	r24, Z+33	; 0x21
    10ec:	92 a1       	ldd	r25, Z+34	; 0x22
    10ee:	a3 a1       	ldd	r26, Z+35	; 0x23
    10f0:	b4 a1       	ldd	r27, Z+36	; 0x24
    10f2:	88 83       	st	Y, r24
    10f4:	99 83       	std	Y+1, r25	; 0x01
    10f6:	aa 83       	std	Y+2, r26	; 0x02
    10f8:	bb 83       	std	Y+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    10fa:	e0 91 8d 01 	lds	r30, 0x018D
    10fe:	f0 91 8e 01 	lds	r31, 0x018E
    1102:	85 a1       	ldd	r24, Z+37	; 0x25
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	11 f4       	brne	.+4      	; 0x110c <xTaskNotifyWait+0xb8>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	15 c0       	rjmp	.+42     	; 0x1136 <xTaskNotifyWait+0xe2>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    110c:	e0 91 8d 01 	lds	r30, 0x018D
    1110:	f0 91 8e 01 	lds	r31, 0x018E
    1114:	81 a1       	ldd	r24, Z+33	; 0x21
    1116:	92 a1       	ldd	r25, Z+34	; 0x22
    1118:	a3 a1       	ldd	r26, Z+35	; 0x23
    111a:	b4 a1       	ldd	r27, Z+36	; 0x24
    111c:	60 94       	com	r6
    111e:	70 94       	com	r7
    1120:	80 94       	com	r8
    1122:	90 94       	com	r9
    1124:	86 21       	and	r24, r6
    1126:	97 21       	and	r25, r7
    1128:	a8 21       	and	r26, r8
    112a:	b9 21       	and	r27, r9
    112c:	81 a3       	std	Z+33, r24	; 0x21
    112e:	92 a3       	std	Z+34, r25	; 0x22
    1130:	a3 a3       	std	Z+35, r26	; 0x23
    1132:	b4 a3       	std	Z+36, r27	; 0x24
    1134:	81 e0       	ldi	r24, 0x01	; 1
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1136:	e0 91 8d 01 	lds	r30, 0x018D
    113a:	f0 91 8e 01 	lds	r31, 0x018E
    113e:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	df 90       	pop	r13
    1152:	cf 90       	pop	r12
    1154:	bf 90       	pop	r11
    1156:	af 90       	pop	r10
    1158:	9f 90       	pop	r9
    115a:	8f 90       	pop	r8
    115c:	7f 90       	pop	r7
    115e:	6f 90       	pop	r6
    1160:	08 95       	ret

00001162 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    1162:	1f 93       	push	r17
    1164:	18 2f       	mov	r17, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    116c:	e0 91 8d 01 	lds	r30, 0x018D
    1170:	f0 91 8e 01 	lds	r31, 0x018E
    1174:	81 a1       	ldd	r24, Z+33	; 0x21
    1176:	92 a1       	ldd	r25, Z+34	; 0x22
    1178:	a3 a1       	ldd	r26, Z+35	; 0x23
    117a:	b4 a1       	ldd	r27, Z+36	; 0x24
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	a1 05       	cpc	r26, r1
    1180:	b1 05       	cpc	r27, r1
    1182:	79 f4       	brne	.+30     	; 0x11a2 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1184:	e0 91 8d 01 	lds	r30, 0x018D
    1188:	f0 91 8e 01 	lds	r31, 0x018E
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    1190:	61 15       	cp	r22, r1
    1192:	71 05       	cpc	r23, r1
    1194:	31 f0       	breq	.+12     	; 0x11a2 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1196:	cb 01       	movw	r24, r22
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    119e:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    11ac:	e0 91 8d 01 	lds	r30, 0x018D
    11b0:	f0 91 8e 01 	lds	r31, 0x018E
    11b4:	21 a1       	ldd	r18, Z+33	; 0x21
    11b6:	32 a1       	ldd	r19, Z+34	; 0x22
    11b8:	43 a1       	ldd	r20, Z+35	; 0x23
    11ba:	54 a1       	ldd	r21, Z+36	; 0x24

			if( ulReturn != 0UL )
    11bc:	21 15       	cp	r18, r1
    11be:	31 05       	cpc	r19, r1
    11c0:	41 05       	cpc	r20, r1
    11c2:	51 05       	cpc	r21, r1
    11c4:	d9 f0       	breq	.+54     	; 0x11fc <ulTaskNotifyTake+0x9a>
			{
				if( xClearCountOnExit != pdFALSE )
    11c6:	11 23       	and	r17, r17
    11c8:	49 f0       	breq	.+18     	; 0x11dc <ulTaskNotifyTake+0x7a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    11ca:	e0 91 8d 01 	lds	r30, 0x018D
    11ce:	f0 91 8e 01 	lds	r31, 0x018E
    11d2:	11 a2       	std	Z+33, r1	; 0x21
    11d4:	12 a2       	std	Z+34, r1	; 0x22
    11d6:	13 a2       	std	Z+35, r1	; 0x23
    11d8:	14 a2       	std	Z+36, r1	; 0x24
    11da:	10 c0       	rjmp	.+32     	; 0x11fc <ulTaskNotifyTake+0x9a>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    11dc:	e0 91 8d 01 	lds	r30, 0x018D
    11e0:	f0 91 8e 01 	lds	r31, 0x018E
    11e4:	21 50       	subi	r18, 0x01	; 1
    11e6:	30 40       	sbci	r19, 0x00	; 0
    11e8:	40 40       	sbci	r20, 0x00	; 0
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	21 a3       	std	Z+33, r18	; 0x21
    11ee:	32 a3       	std	Z+34, r19	; 0x22
    11f0:	43 a3       	std	Z+35, r20	; 0x23
    11f2:	54 a3       	std	Z+36, r21	; 0x24
    11f4:	2f 5f       	subi	r18, 0xFF	; 255
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	4f 4f       	sbci	r20, 0xFF	; 255
    11fa:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    11fc:	e0 91 8d 01 	lds	r30, 0x018D
    1200:	f0 91 8e 01 	lds	r31, 0x018E
    1204:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    120a:	b9 01       	movw	r22, r18
    120c:	ca 01       	movw	r24, r20
    120e:	1f 91       	pop	r17
    1210:	08 95       	ret

00001212 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	8a 01       	movw	r16, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1218:	e0 91 8d 01 	lds	r30, 0x018D
    121c:	f0 91 8e 01 	lds	r31, 0x018E
    1220:	70 68       	ori	r23, 0x80	; 128
    1222:	75 87       	std	Z+13, r23	; 0x0d
    1224:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1226:	60 91 8d 01 	lds	r22, 0x018D
    122a:	70 91 8e 01 	lds	r23, 0x018E
    122e:	64 5f       	subi	r22, 0xF4	; 244
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1236:	c8 01       	movw	r24, r16
    1238:	61 e0       	ldi	r22, 0x01	; 1
    123a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <prvAddCurrentTaskToDelayedList>
}
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	08 95       	ret

00001244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1244:	9c 01       	movw	r18, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	69 f0       	breq	.+26     	; 0x1264 <vTaskDelay+0x20>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    124a:	80 91 8f 01 	lds	r24, 0x018F
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	80 93 8f 01 	sts	0x018F, r24
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1254:	c9 01       	movw	r24, r18
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	0e 94 e6 07 	call	0xfcc	; 0xfcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    125c:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1260:	88 23       	and	r24, r24
    1262:	11 f4       	brne	.+4      	; 0x1268 <vTaskDelay+0x24>
		{
			portYIELD_WITHIN_API();
    1264:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
    1268:	08 95       	ret

0000126a <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    126a:	fc 01       	movw	r30, r24
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    126c:	80 91 8f 01 	lds	r24, 0x018F
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	80 93 8f 01 	sts	0x018F, r24

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1276:	40 91 92 01 	lds	r20, 0x0192
    127a:	50 91 93 01 	lds	r21, 0x0193

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    127e:	20 81       	ld	r18, Z
    1280:	31 81       	ldd	r19, Z+1	; 0x01
    1282:	62 0f       	add	r22, r18
    1284:	73 1f       	adc	r23, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    1286:	42 17       	cp	r20, r18
    1288:	53 07       	cpc	r21, r19
    128a:	28 f4       	brcc	.+10     	; 0x1296 <vTaskDelayUntil+0x2c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    128c:	62 17       	cp	r22, r18
    128e:	73 07       	cpc	r23, r19
    1290:	28 f0       	brcs	.+10     	; 0x129c <vTaskDelayUntil+0x32>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <vTaskDelayUntil+0x3c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    1296:	62 17       	cp	r22, r18
    1298:	73 07       	cpc	r23, r19
    129a:	20 f0       	brcs	.+8      	; 0x12a4 <vTaskDelayUntil+0x3a>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	46 17       	cp	r20, r22
    12a0:	57 07       	cpc	r21, r23
    12a2:	08 f4       	brcc	.+2      	; 0x12a6 <vTaskDelayUntil+0x3c>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    12a6:	71 83       	std	Z+1, r23	; 0x01
    12a8:	60 83       	st	Z, r22

			if( xShouldDelay != pdFALSE )
    12aa:	88 23       	and	r24, r24
    12ac:	31 f0       	breq	.+12     	; 0x12ba <vTaskDelayUntil+0x50>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    12ae:	cb 01       	movw	r24, r22
    12b0:	84 1b       	sub	r24, r20
    12b2:	95 0b       	sbc	r25, r21
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    12ba:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    12be:	88 23       	and	r24, r24
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <vTaskDelayUntil+0x5c>
		{
			portYIELD_WITHIN_API();
    12c2:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
    12c6:	08 95       	ret

000012c8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	8b 01       	movw	r16, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    12ce:	60 91 8d 01 	lds	r22, 0x018D
    12d2:	70 91 8e 01 	lds	r23, 0x018E
    12d6:	64 5f       	subi	r22, 0xF4	; 244
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    12de:	c8 01       	movw	r24, r16
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <prvAddCurrentTaskToDelayedList>
}
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    12ec:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    12ee:	10 92 99 01 	sts	0x0199, r1
	vPortEndScheduler();
    12f2:	0e 94 65 12 	call	0x24ca	; 0x24ca <vPortEndScheduler>
}
    12f6:	08 95       	ret

000012f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	2c c0       	rjmp	.+88     	; 0x1356 <prvIdleTask+0x5e>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    12fe:	80 91 8f 01 	lds	r24, 0x018F
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	80 93 8f 01 	sts	0x018F, r24
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1308:	10 91 e1 01 	lds	r17, 0x01E1
			}
			( void ) xTaskResumeAll();
    130c:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1310:	11 23       	and	r17, r17
    1312:	09 f1       	breq	.+66     	; 0x1356 <prvIdleTask+0x5e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    131a:	e0 91 e6 01 	lds	r30, 0x01E6
    131e:	f0 91 e7 01 	lds	r31, 0x01E7
    1322:	06 81       	ldd	r16, Z+6	; 0x06
    1324:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1326:	c8 01       	movw	r24, r16
    1328:	02 96       	adiw	r24, 0x02	; 2
    132a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
					--uxCurrentNumberOfTasks;
    132e:	80 91 98 01 	lds	r24, 0x0198
    1332:	81 50       	subi	r24, 0x01	; 1
    1334:	80 93 98 01 	sts	0x0198, r24
					--uxDeletedTasksWaitingCleanUp;
    1338:	80 91 9c 01 	lds	r24, 0x019C
    133c:	81 50       	subi	r24, 0x01	; 1
    133e:	80 93 9c 01 	sts	0x019C, r24
				}
				taskEXIT_CRITICAL();
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    1346:	f8 01       	movw	r30, r16
    1348:	87 89       	ldd	r24, Z+23	; 0x17
    134a:	90 8d       	ldd	r25, Z+24	; 0x18
    134c:	0e 94 a1 11 	call	0x2342	; 0x2342 <vPortFree>
			vPortFree( pxTCB );
    1350:	c8 01       	movw	r24, r16
    1352:	0e 94 a1 11 	call	0x2342	; 0x2342 <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1356:	80 91 9c 01 	lds	r24, 0x019C
    135a:	88 23       	and	r24, r24
    135c:	81 f6       	brne	.-96     	; 0x12fe <prvIdleTask+0x6>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    135e:	80 91 9e 01 	lds	r24, 0x019E
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	10 f0       	brcs	.+4      	; 0x136a <prvIdleTask+0x72>
			{
				taskYIELD();
    1366:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    136a:	0e 94 53 00 	call	0xa6	; 0xa6 <vApplicationIdleHook>
    136e:	f3 cf       	rjmp	.-26     	; 0x1356 <prvIdleTask+0x5e>

00001370 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	29 f4       	brne	.+10     	; 0x138c <vTaskDelete+0x1c>
    1382:	c0 91 8d 01 	lds	r28, 0x018D
    1386:	d0 91 8e 01 	lds	r29, 0x018E
    138a:	01 c0       	rjmp	.+2      	; 0x138e <vTaskDelete+0x1e>
    138c:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    138e:	8e 01       	movw	r16, r28
    1390:	0e 5f       	subi	r16, 0xFE	; 254
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	c8 01       	movw	r24, r16
    1396:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    139a:	8c 89       	ldd	r24, Y+20	; 0x14
    139c:	9d 89       	ldd	r25, Y+21	; 0x15
    139e:	89 2b       	or	r24, r25
    13a0:	21 f0       	breq	.+8      	; 0x13aa <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    13a2:	ce 01       	movw	r24, r28
    13a4:	0c 96       	adiw	r24, 0x0c	; 12
    13a6:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    13aa:	80 91 9d 01 	lds	r24, 0x019D
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	80 93 9d 01 	sts	0x019D, r24

			if( pxTCB == pxCurrentTCB )
    13b4:	80 91 8d 01 	lds	r24, 0x018D
    13b8:	90 91 8e 01 	lds	r25, 0x018E
    13bc:	c8 17       	cp	r28, r24
    13be:	d9 07       	cpc	r29, r25
    13c0:	59 f4       	brne	.+22     	; 0x13d8 <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    13c2:	81 ee       	ldi	r24, 0xE1	; 225
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	b8 01       	movw	r22, r16
    13c8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    13cc:	80 91 9c 01 	lds	r24, 0x019C
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	80 93 9c 01 	sts	0x019C, r24
    13d6:	26 c0       	rjmp	.+76     	; 0x1424 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    13d8:	80 91 98 01 	lds	r24, 0x0198
    13dc:	81 50       	subi	r24, 0x01	; 1
    13de:	80 93 98 01 	sts	0x0198, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    13e2:	8f 89       	ldd	r24, Y+23	; 0x17
    13e4:	98 8d       	ldd	r25, Y+24	; 0x18
    13e6:	0e 94 a1 11 	call	0x2342	; 0x2342 <vPortFree>
			vPortFree( pxTCB );
    13ea:	ce 01       	movw	r24, r28
    13ec:	0e 94 a1 11 	call	0x2342	; 0x2342 <vPortFree>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    13f0:	e0 91 d4 01 	lds	r30, 0x01D4
    13f4:	f0 91 d5 01 	lds	r31, 0x01D5
    13f8:	80 81       	ld	r24, Z
    13fa:	88 23       	and	r24, r24
    13fc:	19 f4       	brne	.+6      	; 0x1404 <vTaskDelete+0x94>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	0c c0       	rjmp	.+24     	; 0x141c <vTaskDelete+0xac>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1404:	e0 91 d4 01 	lds	r30, 0x01D4
    1408:	f0 91 d5 01 	lds	r31, 0x01D5
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    140c:	05 80       	ldd	r0, Z+5	; 0x05
    140e:	f6 81       	ldd	r31, Z+6	; 0x06
    1410:	e0 2d       	mov	r30, r0
    1412:	06 80       	ldd	r0, Z+6	; 0x06
    1414:	f7 81       	ldd	r31, Z+7	; 0x07
    1416:	e0 2d       	mov	r30, r0
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	90 93 95 01 	sts	0x0195, r25
    1420:	80 93 94 01 	sts	0x0194, r24
				prvResetNextTaskUnblockTime();
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    1428:	80 91 99 01 	lds	r24, 0x0199
    142c:	88 23       	and	r24, r24
    142e:	49 f0       	breq	.+18     	; 0x1442 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    1430:	80 91 8d 01 	lds	r24, 0x018D
    1434:	90 91 8e 01 	lds	r25, 0x018E
    1438:	c8 17       	cp	r28, r24
    143a:	d9 07       	cpc	r29, r25
    143c:	11 f4       	brne	.+4      	; 0x1442 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    143e:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	08 95       	ret

0000144c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    144c:	4f 92       	push	r4
    144e:	5f 92       	push	r5
    1450:	6f 92       	push	r6
    1452:	7f 92       	push	r7
    1454:	8f 92       	push	r8
    1456:	9f 92       	push	r9
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	2c 01       	movw	r4, r24
    146e:	16 2f       	mov	r17, r22
    1470:	97 2e       	mov	r9, r23
    1472:	6a 01       	movw	r12, r20
    1474:	39 01       	movw	r6, r18
    1476:	57 01       	movw	r10, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1478:	ca 01       	movw	r24, r20
    147a:	0e 94 b1 11 	call	0x2362	; 0x2362 <pvPortMalloc>
    147e:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	99 f0       	breq	.+38     	; 0x14aa <xTaskCreate+0x5e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1484:	86 e2       	ldi	r24, 0x26	; 38
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 b1 11 	call	0x2362	; 0x2362 <pvPortMalloc>
    148c:	ec 01       	movw	r28, r24

				if( pxNewTCB != NULL )
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	49 f0       	breq	.+18     	; 0x14a4 <xTaskCreate+0x58>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1492:	f8 8e       	std	Y+24, r15	; 0x18
    1494:	ef 8a       	std	Y+23, r14	; 0x17
    1496:	81 2f       	mov	r24, r17
    1498:	99 2d       	mov	r25, r9
    149a:	9c 01       	movw	r18, r24
    149c:	f9 01       	movw	r30, r18
    149e:	de 01       	movw	r26, r28
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <xTaskCreate+0x62>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    14a4:	c7 01       	movw	r24, r14
    14a6:	0e 94 a1 11 	call	0x2342	; 0x2342 <vPortFree>
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	b7 c0       	rjmp	.+366    	; 0x161c <xTaskCreate+0x1d0>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    14ae:	80 81       	ld	r24, Z
    14b0:	59 96       	adiw	r26, 0x19	; 25
    14b2:	8c 93       	st	X, r24
    14b4:	59 97       	sbiw	r26, 0x19	; 25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    14b6:	80 81       	ld	r24, Z
    14b8:	88 23       	and	r24, r24
    14ba:	29 f0       	breq	.+10     	; 0x14c6 <xTaskCreate+0x7a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    14bc:	9f 5f       	subi	r25, 0xFF	; 255
    14be:	31 96       	adiw	r30, 0x01	; 1
    14c0:	11 96       	adiw	r26, 0x01	; 1
    14c2:	98 30       	cpi	r25, 0x08	; 8
    14c4:	a1 f7       	brne	.-24     	; 0x14ae <xTaskCreate+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    14c6:	18 a2       	std	Y+32, r1	; 0x20
    14c8:	04 30       	cpi	r16, 0x04	; 4
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <xTaskCreate+0x82>
    14cc:	03 e0       	ldi	r16, 0x03	; 3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    14ce:	0e 8b       	std	Y+22, r16	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    14d0:	72 e0       	ldi	r23, 0x02	; 2
    14d2:	87 2e       	mov	r8, r23
    14d4:	91 2c       	mov	r9, r1
    14d6:	8c 0e       	add	r8, r28
    14d8:	9d 1e       	adc	r9, r29
    14da:	c4 01       	movw	r24, r8
    14dc:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    14e0:	ce 01       	movw	r24, r28
    14e2:	0c 96       	adiw	r24, 0x0c	; 12
    14e4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    14e8:	d9 87       	std	Y+9, r29	; 0x09
    14ea:	c8 87       	std	Y+8, r28	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    14ec:	84 e0       	ldi	r24, 0x04	; 4
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	80 1b       	sub	r24, r16
    14f2:	91 09       	sbc	r25, r1
    14f4:	9d 87       	std	Y+13, r25	; 0x0d
    14f6:	8c 87       	std	Y+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    14f8:	db 8b       	std	Y+19, r29	; 0x13
    14fa:	ca 8b       	std	Y+18, r28	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    14fc:	19 a2       	std	Y+33, r1	; 0x21
    14fe:	1a a2       	std	Y+34, r1	; 0x22
    1500:	1b a2       	std	Y+35, r1	; 0x23
    1502:	1c a2       	std	Y+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1504:	1d a2       	std	Y+37, r1	; 0x25
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1506:	08 94       	sec
    1508:	c1 08       	sbc	r12, r1
    150a:	d1 08       	sbc	r13, r1
    150c:	c7 01       	movw	r24, r14
    150e:	8c 0d       	add	r24, r12
    1510:	9d 1d       	adc	r25, r13
    1512:	b2 01       	movw	r22, r4
    1514:	a3 01       	movw	r20, r6
    1516:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <pxPortInitialiseStack>
    151a:	99 83       	std	Y+1, r25	; 0x01
    151c:	88 83       	st	Y, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    151e:	a1 14       	cp	r10, r1
    1520:	b1 04       	cpc	r11, r1
    1522:	19 f0       	breq	.+6      	; 0x152a <xTaskCreate+0xde>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1524:	f5 01       	movw	r30, r10
    1526:	d1 83       	std	Z+1, r29	; 0x01
    1528:	c0 83       	st	Z, r28

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    1530:	80 91 98 01 	lds	r24, 0x0198
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	80 93 98 01 	sts	0x0198, r24
		if( pxCurrentTCB == NULL )
    153a:	80 91 8d 01 	lds	r24, 0x018D
    153e:	90 91 8e 01 	lds	r25, 0x018E
    1542:	89 2b       	or	r24, r25
    1544:	a9 f5       	brne	.+106    	; 0x15b0 <xTaskCreate+0x164>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1546:	d0 93 8e 01 	sts	0x018E, r29
    154a:	c0 93 8d 01 	sts	0x018D, r28

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    154e:	80 91 98 01 	lds	r24, 0x0198
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	e9 f5       	brne	.+122    	; 0x15d0 <xTaskCreate+0x184>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1556:	8e e9       	ldi	r24, 0x9E	; 158
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
    155e:	87 ea       	ldi	r24, 0xA7	; 167
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
    1566:	80 eb       	ldi	r24, 0xB0	; 176
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
    156e:	89 eb       	ldi	r24, 0xB9	; 185
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
    1576:	62 ec       	ldi	r22, 0xC2	; 194
    1578:	e6 2e       	mov	r14, r22
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	f6 2e       	mov	r15, r22
    157e:	c7 01       	movw	r24, r14
    1580:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    1584:	0b ec       	ldi	r16, 0xCB	; 203
    1586:	11 e0       	ldi	r17, 0x01	; 1
    1588:	c8 01       	movw	r24, r16
    158a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    158e:	88 ed       	ldi	r24, 0xD8	; 216
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1596:	81 ee       	ldi	r24, 0xE1	; 225
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    159e:	f0 92 d5 01 	sts	0x01D5, r15
    15a2:	e0 92 d4 01 	sts	0x01D4, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    15a6:	10 93 d7 01 	sts	0x01D7, r17
    15aa:	00 93 d6 01 	sts	0x01D6, r16
    15ae:	10 c0       	rjmp	.+32     	; 0x15d0 <xTaskCreate+0x184>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    15b0:	80 91 99 01 	lds	r24, 0x0199
    15b4:	88 23       	and	r24, r24
    15b6:	61 f4       	brne	.+24     	; 0x15d0 <xTaskCreate+0x184>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    15b8:	e0 91 8d 01 	lds	r30, 0x018D
    15bc:	f0 91 8e 01 	lds	r31, 0x018E
    15c0:	96 89       	ldd	r25, Z+22	; 0x16
    15c2:	8e 89       	ldd	r24, Y+22	; 0x16
    15c4:	89 17       	cp	r24, r25
    15c6:	20 f0       	brcs	.+8      	; 0x15d0 <xTaskCreate+0x184>
				{
					pxCurrentTCB = pxNewTCB;
    15c8:	d0 93 8e 01 	sts	0x018E, r29
    15cc:	c0 93 8d 01 	sts	0x018D, r28
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    15d0:	80 91 9d 01 	lds	r24, 0x019D
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	80 93 9d 01 	sts	0x019D, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    15da:	9e 89       	ldd	r25, Y+22	; 0x16
    15dc:	80 91 90 01 	lds	r24, 0x0190
    15e0:	89 17       	cp	r24, r25
    15e2:	10 f4       	brcc	.+4      	; 0x15e8 <xTaskCreate+0x19c>
    15e4:	90 93 90 01 	sts	0x0190, r25
    15e8:	89 e0       	ldi	r24, 0x09	; 9
    15ea:	98 9f       	mul	r25, r24
    15ec:	c0 01       	movw	r24, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	82 56       	subi	r24, 0x62	; 98
    15f2:	9e 4f       	sbci	r25, 0xFE	; 254
    15f4:	b4 01       	movw	r22, r8
    15f6:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    15fa:	0f 90       	pop	r0
    15fc:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    15fe:	80 91 99 01 	lds	r24, 0x0199
    1602:	88 23       	and	r24, r24
    1604:	51 f0       	breq	.+20     	; 0x161a <xTaskCreate+0x1ce>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1606:	e0 91 8d 01 	lds	r30, 0x018D
    160a:	f0 91 8e 01 	lds	r31, 0x018E
    160e:	96 89       	ldd	r25, Z+22	; 0x16
    1610:	8e 89       	ldd	r24, Y+22	; 0x16
    1612:	98 17       	cp	r25, r24
    1614:	10 f4       	brcc	.+4      	; 0x161a <xTaskCreate+0x1ce>
		{
			taskYIELD_IF_USING_PREEMPTION();
    1616:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
    161a:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	ef 90       	pop	r14
    1628:	df 90       	pop	r13
    162a:	cf 90       	pop	r12
    162c:	bf 90       	pop	r11
    162e:	af 90       	pop	r10
    1630:	9f 90       	pop	r9
    1632:	8f 90       	pop	r8
    1634:	7f 90       	pop	r7
    1636:	6f 90       	pop	r6
    1638:	5f 90       	pop	r5
    163a:	4f 90       	pop	r4
    163c:	08 95       	ret

0000163e <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1644:	8c e7       	ldi	r24, 0x7C	; 124
    1646:	99 e0       	ldi	r25, 0x09	; 9
    1648:	69 e2       	ldi	r22, 0x29	; 41
    164a:	71 e0       	ldi	r23, 0x01	; 1
    164c:	45 e5       	ldi	r20, 0x55	; 85
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	ea e9       	ldi	r30, 0x9A	; 154
    1658:	ee 2e       	mov	r14, r30
    165a:	e1 e0       	ldi	r30, 0x01	; 1
    165c:	fe 2e       	mov	r15, r30
    165e:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	81 f4       	brne	.+32     	; 0x1686 <vTaskStartScheduler+0x48>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1666:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	9f ef       	ldi	r25, 0xFF	; 255
    166c:	90 93 95 01 	sts	0x0195, r25
    1670:	80 93 94 01 	sts	0x0194, r24
		xSchedulerRunning = pdTRUE;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	80 93 99 01 	sts	0x0199, r24
		xTickCount = ( TickType_t ) 0U;
    167a:	10 92 93 01 	sts	0x0193, r1
    167e:	10 92 92 01 	sts	0x0192, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1682:	0e 94 2b 12 	call	0x2456	; 0x2456 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	08 95       	ret

0000168e <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1694:	fc 01       	movw	r30, r24
    1696:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    169c:	08 95       	ret

0000169e <uxQueueSpacesAvailable>:
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    169e:	fc 01       	movw	r30, r24
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    16a6:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	83 8d       	ldd	r24, Z+27	; 0x1b

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    16ae:	89 1b       	sub	r24, r25
    16b0:	08 95       	ret

000016b2 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    16b2:	fc 01       	movw	r30, r24
    16b4:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    16b6:	08 95       	ret

000016b8 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    16b8:	fc 01       	movw	r30, r24
    16ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	88 23       	and	r24, r24
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <xQueueIsQueueEmptyFromISR+0xc>
    16c2:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    16c4:	89 2f       	mov	r24, r25
    16c6:	08 95       	ret

000016c8 <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    16c8:	fc 01       	movw	r30, r24
    16ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    16d0:	98 17       	cp	r25, r24
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <xQueueIsQueueFullFromISR+0xe>
    16d4:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    16d6:	82 2f       	mov	r24, r18
    16d8:	08 95       	ret

000016da <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ec 01       	movw	r28, r24
    16e4:	04 2f       	mov	r16, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    16e6:	1a 8d       	ldd	r17, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    16e8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    16ea:	44 23       	and	r20, r20
    16ec:	c1 f1       	breq	.+112    	; 0x175e <prvCopyDataToQueue+0x84>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    16ee:	00 23       	and	r16, r16
    16f0:	b1 f4       	brne	.+44     	; 0x171e <prvCopyDataToQueue+0x44>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    16fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1700:	3d 81       	ldd	r19, Y+5	; 0x05
    1702:	28 0f       	add	r18, r24
    1704:	31 1d       	adc	r19, r1
    1706:	3d 83       	std	Y+5, r19	; 0x05
    1708:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	28 17       	cp	r18, r24
    1710:	39 07       	cpc	r19, r25
    1712:	28 f1       	brcs	.+74     	; 0x175e <prvCopyDataToQueue+0x84>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1714:	88 81       	ld	r24, Y
    1716:	99 81       	ldd	r25, Y+1	; 0x01
    1718:	9d 83       	std	Y+5, r25	; 0x05
    171a:	8c 83       	std	Y+4, r24	; 0x04
    171c:	20 c0       	rjmp	.+64     	; 0x175e <prvCopyDataToQueue+0x84>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    171e:	8e 81       	ldd	r24, Y+6	; 0x06
    1720:	9f 81       	ldd	r25, Y+7	; 0x07
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 41 16 	call	0x2c82	; 0x2c82 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1728:	8c 8d       	ldd	r24, Y+28	; 0x1c
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	44 27       	eor	r20, r20
    172e:	55 27       	eor	r21, r21
    1730:	48 1b       	sub	r20, r24
    1732:	59 0b       	sbc	r21, r25
    1734:	8e 81       	ldd	r24, Y+6	; 0x06
    1736:	9f 81       	ldd	r25, Y+7	; 0x07
    1738:	84 0f       	add	r24, r20
    173a:	95 1f       	adc	r25, r21
    173c:	9f 83       	std	Y+7, r25	; 0x07
    173e:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1740:	28 81       	ld	r18, Y
    1742:	39 81       	ldd	r19, Y+1	; 0x01
    1744:	82 17       	cp	r24, r18
    1746:	93 07       	cpc	r25, r19
    1748:	30 f4       	brcc	.+12     	; 0x1756 <prvCopyDataToQueue+0x7c>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	84 0f       	add	r24, r20
    1750:	95 1f       	adc	r25, r21
    1752:	9f 83       	std	Y+7, r25	; 0x07
    1754:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1756:	02 30       	cpi	r16, 0x02	; 2
    1758:	11 f4       	brne	.+4      	; 0x175e <prvCopyDataToQueue+0x84>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    175a:	11 11       	cpse	r17, r1
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    175c:	11 50       	subi	r17, 0x01	; 1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    175e:	1f 5f       	subi	r17, 0xFF	; 255
    1760:	1a 8f       	std	Y+26, r17	; 0x1a

	return xReturn;
}
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    176e:	fc 01       	movw	r30, r24
    1770:	56 2f       	mov	r21, r22
    1772:	a7 2f       	mov	r26, r23
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1774:	24 8d       	ldd	r18, Z+28	; 0x1c
    1776:	22 23       	and	r18, r18
    1778:	b9 f0       	breq	.+46     	; 0x17a8 <prvCopyDataFromQueue+0x3a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    177a:	86 81       	ldd	r24, Z+6	; 0x06
    177c:	97 81       	ldd	r25, Z+7	; 0x07
    177e:	82 0f       	add	r24, r18
    1780:	91 1d       	adc	r25, r1
    1782:	97 83       	std	Z+7, r25	; 0x07
    1784:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1786:	22 81       	ldd	r18, Z+2	; 0x02
    1788:	33 81       	ldd	r19, Z+3	; 0x03
    178a:	82 17       	cp	r24, r18
    178c:	93 07       	cpc	r25, r19
    178e:	20 f0       	brcs	.+8      	; 0x1798 <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	97 83       	std	Z+7, r25	; 0x07
    1796:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1798:	44 8d       	ldd	r20, Z+28	; 0x1c
    179a:	66 81       	ldd	r22, Z+6	; 0x06
    179c:	77 81       	ldd	r23, Z+7	; 0x07
    179e:	85 2f       	mov	r24, r21
    17a0:	9a 2f       	mov	r25, r26
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	0e 94 41 16 	call	0x2c82	; 0x2c82 <memcpy>
    17a8:	08 95       	ret

000017aa <xQueuePeekFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    17b2:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    17b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17b6:	88 23       	and	r24, r24
    17b8:	41 f0       	breq	.+16     	; 0x17ca <xQueuePeekFromISR+0x20>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    17ba:	0e 81       	ldd	r16, Y+6	; 0x06
    17bc:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    17be:	ce 01       	movw	r24, r28
    17c0:	0e 94 b7 0b 	call	0x176e	; 0x176e <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    17c4:	1f 83       	std	Y+7, r17	; 0x07
    17c6:	0e 83       	std	Y+6, r16	; 0x06
    17c8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	08 95       	ret

000017d4 <xQueueCRReceiveFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )
	{
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	fb 01       	movw	r30, r22
    17de:	8a 01       	movw	r16, r20
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    17e0:	ec 01       	movw	r28, r24

		/* We cannot block from an ISR, so check there is data available. If
		not then just leave without doing anything. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    17e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17e4:	88 23       	and	r24, r24
    17e6:	61 f1       	breq	.+88     	; 0x1840 <xQueueCRReceiveFromISR+0x6c>
		{
			/* Copy the data from the queue. */
			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    17e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17ea:	2e 81       	ldd	r18, Y+6	; 0x06
    17ec:	3f 81       	ldd	r19, Y+7	; 0x07
    17ee:	28 0f       	add	r18, r24
    17f0:	31 1d       	adc	r19, r1
    17f2:	3f 83       	std	Y+7, r19	; 0x07
    17f4:	2e 83       	std	Y+6, r18	; 0x06
			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	28 17       	cp	r18, r24
    17fc:	39 07       	cpc	r19, r25
    17fe:	20 f0       	brcs	.+8      	; 0x1808 <xQueueCRReceiveFromISR+0x34>
			{
				pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1800:	88 81       	ld	r24, Y
    1802:	99 81       	ldd	r25, Y+1	; 0x01
    1804:	9f 83       	std	Y+7, r25	; 0x07
    1806:	8e 83       	std	Y+6, r24	; 0x06
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			--( pxQueue->uxMessagesWaiting );
    1808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180a:	81 50       	subi	r24, 0x01	; 1
    180c:	8a 8f       	std	Y+26, r24	; 0x1a
			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    180e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1810:	6e 81       	ldd	r22, Y+6	; 0x06
    1812:	7f 81       	ldd	r23, Y+7	; 0x07
    1814:	cf 01       	movw	r24, r30
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	0e 94 41 16 	call	0x2c82	; 0x2c82 <memcpy>

			if( ( *pxCoRoutineWoken ) == pdFALSE )
    181c:	f8 01       	movw	r30, r16
    181e:	80 81       	ld	r24, Z
    1820:	88 23       	and	r24, r24
    1822:	69 f4       	brne	.+26     	; 0x183e <xQueueCRReceiveFromISR+0x6a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1824:	88 85       	ldd	r24, Y+8	; 0x08
    1826:	88 23       	and	r24, r24
    1828:	51 f0       	breq	.+20     	; 0x183e <xQueueCRReceiveFromISR+0x6a>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    182a:	ce 01       	movw	r24, r28
    182c:	08 96       	adiw	r24, 0x08	; 8
    182e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <xCoRoutineRemoveFromEventList>
    1832:	88 23       	and	r24, r24
    1834:	21 f0       	breq	.+8      	; 0x183e <xQueueCRReceiveFromISR+0x6a>
					{
						*pxCoRoutineWoken = pdTRUE;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	f8 01       	movw	r30, r16
    183a:	80 83       	st	Z, r24
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <xQueueCRReceiveFromISR+0x6c>
    183e:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret

0000184a <xQueueCRSendFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )
	{
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	14 2f       	mov	r17, r20
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1852:	ec 01       	movw	r28, r24

		/* Cannot block within an ISR so if there is no space on the queue then
		exit without doing anything. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1854:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1856:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1858:	98 17       	cp	r25, r24
    185a:	88 f4       	brcc	.+34     	; 0x187e <xQueueCRSendFromISR+0x34>
		{
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    185c:	ce 01       	movw	r24, r28
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvCopyDataToQueue>

			/* We only want to wake one co-routine per ISR, so check that a
			co-routine has not already been woken. */
			if( xCoRoutinePreviouslyWoken == pdFALSE )
    1864:	11 23       	and	r17, r17
    1866:	59 f4       	brne	.+22     	; 0x187e <xQueueCRSendFromISR+0x34>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1868:	89 89       	ldd	r24, Y+17	; 0x11
    186a:	88 23       	and	r24, r24
    186c:	41 f0       	breq	.+16     	; 0x187e <xQueueCRSendFromISR+0x34>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    186e:	ce 01       	movw	r24, r28
    1870:	41 96       	adiw	r24, 0x11	; 17
    1872:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <xCoRoutineRemoveFromEventList>
    1876:	48 2f       	mov	r20, r24
    1878:	81 11       	cpse	r24, r1
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	14 2f       	mov	r17, r20
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xCoRoutinePreviouslyWoken;
	}
    187e:	81 2f       	mov	r24, r17
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	08 95       	ret

00001888 <xQueueCRReceive>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
	{
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	fb 01       	movw	r30, r22
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    188e:	ec 01       	movw	r28, r24

		/* If the queue is already empty we may have to block.  A critical section
		is required to prevent an interrupt adding something to the queue
		between the check to see if the queue is empty and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    1890:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1892:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1894:	88 23       	and	r24, r24
    1896:	71 f4       	brne	.+28     	; 0x18b4 <xQueueCRReceive+0x2c>
			{
				/* There are no messages in the queue, do we want to block or just
				leave with nothing? */
				if( xTicksToWait > ( TickType_t ) 0 )
    1898:	41 15       	cp	r20, r1
    189a:	51 05       	cpc	r21, r1
    189c:	41 f0       	breq	.+16     	; 0x18ae <xQueueCRReceive+0x26>
				{
					/* As this is a co-routine we cannot block directly, but return
					indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    189e:	61 96       	adiw	r28, 0x11	; 17
    18a0:	ca 01       	movw	r24, r20
    18a2:	be 01       	movw	r22, r28
    18a4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    18a8:	78 94       	sei
    18aa:	8c ef       	ldi	r24, 0xFC	; 252
    18ac:	2f c0       	rjmp	.+94     	; 0x190c <xQueueCRReceive+0x84>
					return errQUEUE_BLOCKED;
				}
				else
				{
					portENABLE_INTERRUPTS();
    18ae:	78 94       	sei
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	2c c0       	rjmp	.+88     	; 0x190c <xQueueCRReceive+0x84>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portENABLE_INTERRUPTS();
    18b4:	78 94       	sei

		portDISABLE_INTERRUPTS();
    18b6:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    18b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ba:	88 23       	and	r24, r24
    18bc:	31 f1       	breq	.+76     	; 0x190a <xQueueCRReceive+0x82>
			{
				/* Data is available from the queue. */
				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    18be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18c0:	2e 81       	ldd	r18, Y+6	; 0x06
    18c2:	3f 81       	ldd	r19, Y+7	; 0x07
    18c4:	28 0f       	add	r18, r24
    18c6:	31 1d       	adc	r19, r1
    18c8:	3f 83       	std	Y+7, r19	; 0x07
    18ca:	2e 83       	std	Y+6, r18	; 0x06
				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	28 17       	cp	r18, r24
    18d2:	39 07       	cpc	r19, r25
    18d4:	20 f0       	brcs	.+8      	; 0x18de <xQueueCRReceive+0x56>
				{
					pxQueue->u.pcReadFrom = pxQueue->pcHead;
    18d6:	88 81       	ld	r24, Y
    18d8:	99 81       	ldd	r25, Y+1	; 0x01
    18da:	9f 83       	std	Y+7, r25	; 0x07
    18dc:	8e 83       	std	Y+6, r24	; 0x06
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
    18de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18e0:	81 50       	subi	r24, 0x01	; 1
    18e2:	8a 8f       	std	Y+26, r24	; 0x1a
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    18e4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    18e6:	6e 81       	ldd	r22, Y+6	; 0x06
    18e8:	7f 81       	ldd	r23, Y+7	; 0x07
    18ea:	cf 01       	movw	r24, r30
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	0e 94 41 16 	call	0x2c82	; 0x2c82 <memcpy>

				xReturn = pdPASS;

				/* Were any co-routines waiting for space to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18f2:	88 85       	ldd	r24, Y+8	; 0x08
    18f4:	88 23       	and	r24, r24
    18f6:	41 f0       	breq	.+16     	; 0x1908 <xQueueCRReceive+0x80>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18f8:	ce 01       	movw	r24, r28
    18fa:	08 96       	adiw	r24, 0x08	; 8
    18fc:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <xCoRoutineRemoveFromEventList>
    1900:	88 23       	and	r24, r24
    1902:	11 f0       	breq	.+4      	; 0x1908 <xQueueCRReceive+0x80>
    1904:	8b ef       	ldi	r24, 0xFB	; 251
    1906:	01 c0       	rjmp	.+2      	; 0x190a <xQueueCRReceive+0x82>
    1908:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		portENABLE_INTERRUPTS();
    190a:	78 94       	sei

		return xReturn;
	}
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <xQueueCRSend>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )
	{
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1916:	ec 01       	movw	r28, r24

		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    1918:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1920:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1922:	9b 8d       	ldd	r25, Y+27	; 0x1b
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1928:	89 17       	cp	r24, r25
    192a:	71 f4       	brne	.+28     	; 0x1948 <xQueueCRSend+0x36>
			{
				/* The queue is full - do we want to block or just leave without
				posting? */
				if( xTicksToWait > ( TickType_t ) 0 )
    192c:	41 15       	cp	r20, r1
    192e:	51 05       	cpc	r21, r1
    1930:	41 f0       	breq	.+16     	; 0x1942 <xQueueCRSend+0x30>
				{
					/* As this is called from a coroutine we cannot block directly, but
					return indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    1932:	28 96       	adiw	r28, 0x08	; 8
    1934:	ca 01       	movw	r24, r20
    1936:	be 01       	movw	r22, r28
    1938:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    193c:	78 94       	sei
    193e:	8c ef       	ldi	r24, 0xFC	; 252
    1940:	1b c0       	rjmp	.+54     	; 0x1978 <xQueueCRSend+0x66>
					return errQUEUE_BLOCKED;
				}
				else
				{
					portENABLE_INTERRUPTS();
    1942:	78 94       	sei
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	18 c0       	rjmp	.+48     	; 0x1978 <xQueueCRSend+0x66>
					return errQUEUE_FULL;
				}
			}
		}
		portENABLE_INTERRUPTS();
    1948:	78 94       	sei

		portDISABLE_INTERRUPTS();
    194a:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    194c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    194e:	89 17       	cp	r24, r25
    1950:	10 f0       	brcs	.+4      	; 0x1956 <xQueueCRSend+0x44>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	10 c0       	rjmp	.+32     	; 0x1976 <xQueueCRSend+0x64>
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    1956:	ce 01       	movw	r24, r28
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvCopyDataToQueue>
				xReturn = pdPASS;

				/* Were any co-routines waiting for data to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    195e:	89 89       	ldd	r24, Y+17	; 0x11
    1960:	88 23       	and	r24, r24
    1962:	41 f0       	breq	.+16     	; 0x1974 <xQueueCRSend+0x62>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1964:	ce 01       	movw	r24, r28
    1966:	41 96       	adiw	r24, 0x11	; 17
    1968:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <xCoRoutineRemoveFromEventList>
    196c:	88 23       	and	r24, r24
    196e:	11 f0       	breq	.+4      	; 0x1974 <xQueueCRSend+0x62>
    1970:	8b ef       	ldi	r24, 0xFB	; 251
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <xQueueCRSend+0x64>
    1974:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = errQUEUE_FULL;
			}
		}
		portENABLE_INTERRUPTS();
    1976:	78 94       	sei

		return xReturn;
	}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <vQueueDelete>:

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    197e:	0e 94 a1 11 	call	0x2342	; 0x2342 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    1982:	08 95       	ret

00001984 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	7a 01       	movw	r14, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1992:	ec 01       	movw	r28, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1994:	1a 8d       	ldd	r17, Y+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1996:	11 23       	and	r17, r17
    1998:	11 f4       	brne	.+4      	; 0x199e <xQueueReceiveFromISR+0x1a>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	1a c0       	rjmp	.+52     	; 0x19d2 <xQueueReceiveFromISR+0x4e>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    199e:	0d 8d       	ldd	r16, Y+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    19a0:	0e 94 b7 0b 	call	0x176e	; 0x176e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    19a4:	11 50       	subi	r17, 0x01	; 1
    19a6:	1a 8f       	std	Y+26, r17	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    19a8:	0f 3f       	cpi	r16, 0xFF	; 255
    19aa:	81 f4       	brne	.+32     	; 0x19cc <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    19ac:	88 85       	ldd	r24, Y+8	; 0x08
    19ae:	88 23       	and	r24, r24
    19b0:	79 f0       	breq	.+30     	; 0x19d0 <xQueueReceiveFromISR+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    19b2:	ce 01       	movw	r24, r28
    19b4:	08 96       	adiw	r24, 0x08	; 8
    19b6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xTaskRemoveFromEventList>
    19ba:	88 23       	and	r24, r24
    19bc:	49 f0       	breq	.+18     	; 0x19d0 <xQueueReceiveFromISR+0x4c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    19be:	e1 14       	cp	r14, r1
    19c0:	f1 04       	cpc	r15, r1
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <xQueueReceiveFromISR+0x4c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	f7 01       	movw	r30, r14
    19c8:	80 83       	st	Z, r24
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <xQueueReceiveFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    19cc:	0f 5f       	subi	r16, 0xFF	; 255
    19ce:	0d 8f       	std	Y+29, r16	; 0x1d
    19d0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	08 95       	ret

000019e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	eb 01       	movw	r28, r22
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    19e6:	fc 01       	movw	r30, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    19e8:	92 8d       	ldd	r25, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    19ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    19ec:	98 17       	cp	r25, r24
    19ee:	10 f0       	brcs	.+4      	; 0x19f4 <xQueueGiveFromISR+0x14>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	16 c0       	rjmp	.+44     	; 0x1a20 <xQueueGiveFromISR+0x40>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    19f4:	86 8d       	ldd	r24, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    19f6:	9f 5f       	subi	r25, 0xFF	; 255
    19f8:	92 8f       	std	Z+26, r25	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    19fa:	8f 3f       	cpi	r24, 0xFF	; 255
    19fc:	71 f4       	brne	.+28     	; 0x1a1a <xQueueGiveFromISR+0x3a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19fe:	81 89       	ldd	r24, Z+17	; 0x11
    1a00:	88 23       	and	r24, r24
    1a02:	69 f0       	breq	.+26     	; 0x1a1e <xQueueGiveFromISR+0x3e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a04:	cf 01       	movw	r24, r30
    1a06:	41 96       	adiw	r24, 0x11	; 17
    1a08:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xTaskRemoveFromEventList>
    1a0c:	88 23       	and	r24, r24
    1a0e:	39 f0       	breq	.+14     	; 0x1a1e <xQueueGiveFromISR+0x3e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1a10:	20 97       	sbiw	r28, 0x00	; 0
    1a12:	29 f0       	breq	.+10     	; 0x1a1e <xQueueGiveFromISR+0x3e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	88 83       	st	Y, r24
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <xQueueGiveFromISR+0x40>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	86 8f       	std	Z+30, r24	; 0x1e
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	7a 01       	movw	r14, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1a32:	ec 01       	movw	r28, r24
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1a34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a38:	98 17       	cp	r25, r24
    1a3a:	20 f0       	brcs	.+8      	; 0x1a44 <xQueueGenericSendFromISR+0x1e>
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <xQueueGenericSendFromISR+0x1e>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	1a c0       	rjmp	.+52     	; 0x1a78 <xQueueGenericSendFromISR+0x52>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    1a44:	1e 8d       	ldd	r17, Y+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1a46:	ce 01       	movw	r24, r28
    1a48:	42 2f       	mov	r20, r18
    1a4a:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1a4e:	1f 3f       	cpi	r17, 0xFF	; 255
    1a50:	81 f4       	brne	.+32     	; 0x1a72 <xQueueGenericSendFromISR+0x4c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a52:	89 89       	ldd	r24, Y+17	; 0x11
    1a54:	88 23       	and	r24, r24
    1a56:	79 f0       	breq	.+30     	; 0x1a76 <xQueueGenericSendFromISR+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a58:	ce 01       	movw	r24, r28
    1a5a:	41 96       	adiw	r24, 0x11	; 17
    1a5c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xTaskRemoveFromEventList>
    1a60:	88 23       	and	r24, r24
    1a62:	49 f0       	breq	.+18     	; 0x1a76 <xQueueGenericSendFromISR+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1a64:	e1 14       	cp	r14, r1
    1a66:	f1 04       	cpc	r15, r1
    1a68:	31 f0       	breq	.+12     	; 0x1a76 <xQueueGenericSendFromISR+0x50>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	80 83       	st	Z, r24
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <xQueueGenericSendFromISR+0x52>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1a72:	1f 5f       	subi	r17, 0xFF	; 255
    1a74:	1e 8f       	std	Y+30, r17	; 0x1e
    1a76:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	08 95       	ret

00001a84 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a98:	91 e1       	ldi	r25, 0x11	; 17
    1a9a:	e9 2e       	mov	r14, r25
    1a9c:	f1 2c       	mov	r15, r1
    1a9e:	ec 0e       	add	r14, r28
    1aa0:	fd 1e       	adc	r15, r29
    1aa2:	0b c0       	rjmp	.+22     	; 0x1aba <prvUnlockQueue+0x36>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1aa4:	89 89       	ldd	r24, Y+17	; 0x11
    1aa6:	88 23       	and	r24, r24
    1aa8:	51 f0       	breq	.+20     	; 0x1abe <prvUnlockQueue+0x3a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1aaa:	c7 01       	movw	r24, r14
    1aac:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xTaskRemoveFromEventList>
    1ab0:	88 23       	and	r24, r24
    1ab2:	11 f0       	breq	.+4      	; 0x1ab8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    1ab4:	0e 94 b8 04 	call	0x970	; 0x970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    1ab8:	11 50       	subi	r17, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1aba:	11 16       	cp	r1, r17
    1abc:	9c f3       	brlt	.-26     	; 0x1aa4 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    1acc:	1d 8d       	ldd	r17, Y+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1ace:	88 e0       	ldi	r24, 0x08	; 8
    1ad0:	e8 2e       	mov	r14, r24
    1ad2:	f1 2c       	mov	r15, r1
    1ad4:	ec 0e       	add	r14, r28
    1ad6:	fd 1e       	adc	r15, r29
    1ad8:	0b c0       	rjmp	.+22     	; 0x1af0 <prvUnlockQueue+0x6c>
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1ada:	88 85       	ldd	r24, Y+8	; 0x08
    1adc:	88 23       	and	r24, r24
    1ade:	51 f0       	breq	.+20     	; 0x1af4 <prvUnlockQueue+0x70>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xTaskRemoveFromEventList>
    1ae6:	88 23       	and	r24, r24
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <prvUnlockQueue+0x6a>
				{
					vTaskMissedYield();
    1aea:	0e 94 b8 04 	call	0x970	; 0x970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1aee:	11 50       	subi	r17, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1af0:	11 16       	cp	r1, r17
    1af2:	9c f3       	brlt	.-26     	; 0x1ada <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
}
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	08 95       	ret

00001b08 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1b08:	6f 92       	push	r6
    1b0a:	7f 92       	push	r7
    1b0c:	8f 92       	push	r8
    1b0e:	9f 92       	push	r9
    1b10:	af 92       	push	r10
    1b12:	bf 92       	push	r11
    1b14:	cf 92       	push	r12
    1b16:	df 92       	push	r13
    1b18:	ef 92       	push	r14
    1b1a:	ff 92       	push	r15
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <xQueueGenericReceive+0x1e>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <xQueueGenericReceive+0x20>
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	4b 01       	movw	r8, r22
    1b30:	5d 83       	std	Y+5, r21	; 0x05
    1b32:	4c 83       	std	Y+4, r20	; 0x04
    1b34:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1b36:	8c 01       	movw	r16, r24
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b38:	41 e1       	ldi	r20, 0x11	; 17
    1b3a:	a4 2e       	mov	r10, r20
    1b3c:	b1 2c       	mov	r11, r1
    1b3e:	a8 0e       	add	r10, r24
    1b40:	b9 1e       	adc	r11, r25
    1b42:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1b44:	6e 01       	movw	r12, r28
    1b46:	08 94       	sec
    1b48:	c1 1c       	adc	r12, r1
    1b4a:	d1 1c       	adc	r13, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1b4c:	34 e0       	ldi	r19, 0x04	; 4
    1b4e:	63 2e       	mov	r6, r19
    1b50:	71 2c       	mov	r7, r1
    1b52:	6c 0e       	add	r6, r28
    1b54:	7d 1e       	adc	r7, r29
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <xQueueGenericReceive+0x52>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b58:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1b60:	f8 01       	movw	r30, r16
    1b62:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1b64:	ff 20       	and	r15, r15
    1b66:	11 f1       	breq	.+68     	; 0x1bac <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1b68:	c6 80       	ldd	r12, Z+6	; 0x06
    1b6a:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	b4 01       	movw	r22, r8
    1b70:	0e 94 b7 0b 	call	0x176e	; 0x176e <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1b74:	ee 20       	and	r14, r14
    1b76:	49 f4       	brne	.+18     	; 0x1b8a <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1b78:	fa 94       	dec	r15
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	f2 8e       	std	Z+26, r15	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b7e:	80 85       	ldd	r24, Z+8	; 0x08
    1b80:	88 23       	and	r24, r24
    1b82:	81 f0       	breq	.+32     	; 0x1ba4 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1b84:	c8 01       	movw	r24, r16
    1b86:	08 96       	adiw	r24, 0x08	; 8
    1b88:	07 c0       	rjmp	.+14     	; 0x1b98 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	d7 82       	std	Z+7, r13	; 0x07
    1b8e:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1b90:	81 89       	ldd	r24, Z+17	; 0x11
    1b92:	88 23       	and	r24, r24
    1b94:	39 f0       	breq	.+14     	; 0x1ba4 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1b96:	c5 01       	movw	r24, r10
    1b98:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xTaskRemoveFromEventList>
    1b9c:	88 23       	and	r24, r24
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1ba0:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	54 c0       	rjmp	.+168    	; 0x1c54 <xQueueGenericReceive+0x14c>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	89 2b       	or	r24, r25
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	4c c0       	rjmp	.+152    	; 0x1c54 <xQueueGenericReceive+0x14c>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    1bbc:	22 23       	and	r18, r18
    1bbe:	19 f4       	brne	.+6      	; 0x1bc6 <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1bc0:	c6 01       	movw	r24, r12
    1bc2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1bc6:	0f 90       	pop	r0
    1bc8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1bca:	0e 94 1b 04 	call	0x836	; 0x836 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	0f 92       	push	r0
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bda:	09 f4       	brne	.+2      	; 0x1bde <xQueueGenericReceive+0xd6>
    1bdc:	15 8e       	std	Z+29, r1	; 0x1d
    1bde:	f8 01       	movw	r30, r16
    1be0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1be2:	8f 3f       	cpi	r24, 0xFF	; 255
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <xQueueGenericReceive+0xe0>
    1be6:	16 8e       	std	Z+30, r1	; 0x1e
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1bec:	c6 01       	movw	r24, r12
    1bee:	b3 01       	movw	r22, r6
    1bf0:	0e 94 85 04 	call	0x90a	; 0x90a <xTaskCheckForTimeOut>
    1bf4:	88 23       	and	r24, r24
    1bf6:	f9 f4       	brne	.+62     	; 0x1c36 <xQueueGenericReceive+0x12e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1bfe:	f8 01       	movw	r30, r16
    1c00:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1c02:	0f 90       	pop	r0
    1c04:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1c06:	88 23       	and	r24, r24
    1c08:	81 f4       	brne	.+32     	; 0x1c2a <xQueueGenericReceive+0x122>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1c0a:	6c 81       	ldd	r22, Y+4	; 0x04
    1c0c:	7d 81       	ldd	r23, Y+5	; 0x05
    1c0e:	c5 01       	movw	r24, r10
    1c10:	0e 94 64 09 	call	0x12c8	; 0x12c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1c14:	c8 01       	movw	r24, r16
    1c16:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1c1a:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
    1c1e:	88 23       	and	r24, r24
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <xQueueGenericReceive+0x11c>
    1c22:	9a cf       	rjmp	.-204    	; 0x1b58 <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    1c24:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
    1c28:	97 cf       	rjmp	.-210    	; 0x1b58 <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1c30:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
    1c34:	91 cf       	rjmp	.-222    	; 0x1b58 <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1c36:	c8 01       	movw	r24, r16
    1c38:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1c3c:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1c46:	f8 01       	movw	r30, r16
    1c48:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1c4e:	88 23       	and	r24, r24
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <xQueueGenericReceive+0x14c>
    1c52:	82 cf       	rjmp	.-252    	; 0x1b58 <xQueueGenericReceive+0x50>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	df 90       	pop	r13
    1c6c:	cf 90       	pop	r12
    1c6e:	bf 90       	pop	r11
    1c70:	af 90       	pop	r10
    1c72:	9f 90       	pop	r9
    1c74:	8f 90       	pop	r8
    1c76:	7f 90       	pop	r7
    1c78:	6f 90       	pop	r6
    1c7a:	08 95       	ret

00001c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1c7c:	6f 92       	push	r6
    1c7e:	7f 92       	push	r7
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <xQueueGenericSend+0x1c>
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <xQueueGenericSend+0x1e>
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	6b 01       	movw	r12, r22
    1ca2:	5d 83       	std	Y+5, r21	; 0x05
    1ca4:	4c 83       	std	Y+4, r20	; 0x04
    1ca6:	92 2e       	mov	r9, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1ca8:	8c 01       	movw	r16, r24
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1caa:	68 e0       	ldi	r22, 0x08	; 8
    1cac:	e6 2e       	mov	r14, r22
    1cae:	f1 2c       	mov	r15, r1
    1cb0:	e8 0e       	add	r14, r24
    1cb2:	f9 1e       	adc	r15, r25
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1cb6:	5e 01       	movw	r10, r28
    1cb8:	08 94       	sec
    1cba:	a1 1c       	adc	r10, r1
    1cbc:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1cbe:	54 e0       	ldi	r21, 0x04	; 4
    1cc0:	65 2e       	mov	r6, r21
    1cc2:	71 2c       	mov	r7, r1
    1cc4:	6c 0e       	add	r6, r28
    1cc6:	7d 1e       	adc	r7, r29
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1cca:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cd6:	83 8d       	ldd	r24, Z+27	; 0x1b
    1cd8:	98 17       	cp	r25, r24
    1cda:	18 f0       	brcs	.+6      	; 0x1ce2 <xQueueGenericSend+0x66>
    1cdc:	f2 e0       	ldi	r31, 0x02	; 2
    1cde:	9f 16       	cp	r9, r31
    1ce0:	c9 f4       	brne	.+50     	; 0x1d14 <xQueueGenericSend+0x98>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1ce2:	c8 01       	movw	r24, r16
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	49 2d       	mov	r20, r9
    1ce8:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvCopyDataToQueue>
    1cec:	98 2f       	mov	r25, r24
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1cee:	f8 01       	movw	r30, r16
    1cf0:	81 89       	ldd	r24, Z+17	; 0x11
    1cf2:	88 23       	and	r24, r24
    1cf4:	39 f0       	breq	.+14     	; 0x1d04 <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	41 96       	adiw	r24, 0x11	; 17
    1cfa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xTaskRemoveFromEventList>
    1cfe:	88 23       	and	r24, r24
    1d00:	29 f0       	breq	.+10     	; 0x1d0c <xQueueGenericSend+0x90>
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <xQueueGenericSend+0x8c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1d04:	99 23       	and	r25, r25
    1d06:	11 f0       	breq	.+4      	; 0x1d0c <xQueueGenericSend+0x90>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1d08:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1d0c:	0f 90       	pop	r0
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	4c c0       	rjmp	.+152    	; 0x1dac <xQueueGenericSend+0x130>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	9d 81       	ldd	r25, Y+5	; 0x05
    1d18:	89 2b       	or	r24, r25
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <xQueueGenericSend+0xa6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	44 c0       	rjmp	.+136    	; 0x1daa <xQueueGenericSend+0x12e>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    1d22:	22 23       	and	r18, r18
    1d24:	19 f4       	brne	.+6      	; 0x1d2c <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1d26:	c5 01       	movw	r24, r10
    1d28:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1d2c:	0f 90       	pop	r0
    1d2e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1d30:	0e 94 1b 04 	call	0x836	; 0x836 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	0f 92       	push	r0
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <xQueueGenericSend+0xc8>
    1d42:	15 8e       	std	Z+29, r1	; 0x1d
    1d44:	f8 01       	movw	r30, r16
    1d46:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d48:	8f 3f       	cpi	r24, 0xFF	; 255
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <xQueueGenericSend+0xd2>
    1d4c:	16 8e       	std	Z+30, r1	; 0x1e
    1d4e:	0f 90       	pop	r0
    1d50:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1d52:	c5 01       	movw	r24, r10
    1d54:	b3 01       	movw	r22, r6
    1d56:	0e 94 85 04 	call	0x90a	; 0x90a <xTaskCheckForTimeOut>
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f5       	brne	.+66     	; 0x1da0 <xQueueGenericSend+0x124>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1d64:	f8 01       	movw	r30, r16
    1d66:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d70:	98 17       	cp	r25, r24
    1d72:	81 f4       	brne	.+32     	; 0x1d94 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1d74:	6c 81       	ldd	r22, Y+4	; 0x04
    1d76:	7d 81       	ldd	r23, Y+5	; 0x05
    1d78:	c7 01       	movw	r24, r14
    1d7a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1d7e:	c8 01       	movw	r24, r16
    1d80:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1d84:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
    1d88:	88 23       	and	r24, r24
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <xQueueGenericSend+0x112>
    1d8c:	9e cf       	rjmp	.-196    	; 0x1cca <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    1d8e:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
    1d92:	9b cf       	rjmp	.-202    	; 0x1cca <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1d94:	c8 01       	movw	r24, r16
    1d96:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1d9a:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
    1d9e:	95 cf       	rjmp	.-214    	; 0x1cca <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1da0:	c8 01       	movw	r24, r16
    1da2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1da6:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
    1daa:	80 e0       	ldi	r24, 0x00	; 0

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	7f 90       	pop	r7
    1dce:	6f 90       	pop	r6
    1dd0:	08 95       	ret

00001dd2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1dd6:	ec 01       	movw	r28, r24

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1dde:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1de0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1de2:	e2 9f       	mul	r30, r18
    1de4:	c0 01       	movw	r24, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	48 81       	ld	r20, Y
    1dea:	59 81       	ldd	r21, Y+1	; 0x01
    1dec:	84 0f       	add	r24, r20
    1dee:	95 1f       	adc	r25, r21
    1df0:	9b 83       	std	Y+3, r25	; 0x03
    1df2:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1df4:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1df6:	5d 83       	std	Y+5, r21	; 0x05
    1df8:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	21 50       	subi	r18, 0x01	; 1
    1dfe:	30 40       	sbci	r19, 0x00	; 0
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	2e 9f       	mul	r18, r30
    1e04:	c0 01       	movw	r24, r0
    1e06:	2f 9f       	mul	r18, r31
    1e08:	90 0d       	add	r25, r0
    1e0a:	3e 9f       	mul	r19, r30
    1e0c:	90 0d       	add	r25, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	48 0f       	add	r20, r24
    1e12:	59 1f       	adc	r21, r25
    1e14:	5f 83       	std	Y+7, r21	; 0x07
    1e16:	4e 83       	std	Y+6, r20	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    1e1c:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1e1e:	66 23       	and	r22, r22
    1e20:	61 f4       	brne	.+24     	; 0x1e3a <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e22:	88 85       	ldd	r24, Y+8	; 0x08
    1e24:	88 23       	and	r24, r24
    1e26:	89 f0       	breq	.+34     	; 0x1e4a <xQueueGenericReset+0x78>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1e28:	ce 01       	movw	r24, r28
    1e2a:	08 96       	adiw	r24, 0x08	; 8
    1e2c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xTaskRemoveFromEventList>
    1e30:	88 23       	and	r24, r24
    1e32:	59 f0       	breq	.+22     	; 0x1e4a <xQueueGenericReset+0x78>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1e34:	0e 94 c6 12 	call	0x258c	; 0x258c <vPortYield>
    1e38:	08 c0       	rjmp	.+16     	; 0x1e4a <xQueueGenericReset+0x78>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	08 96       	adiw	r24, 0x08	; 8
    1e3e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1e42:	ce 01       	movw	r24, r28
    1e44:	41 96       	adiw	r24, 0x11	; 17
    1e46:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	08 95       	ret

00001e56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	08 2f       	mov	r16, r24
    1e60:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    1e62:	66 23       	and	r22, r22
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <xQueueGenericCreate+0x16>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	03 c0       	rjmp	.+6      	; 0x1e72 <xQueueGenericCreate+0x1c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e6c:	68 9f       	mul	r22, r24
    1e6e:	c0 01       	movw	r24, r0
    1e70:	11 24       	eor	r1, r1
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1e72:	4f 96       	adiw	r24, 0x1f	; 31
    1e74:	0e 94 b1 11 	call	0x2362	; 0x2362 <pvPortMalloc>
    1e78:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	71 f0       	breq	.+28     	; 0x1e9a <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1e7e:	11 23       	and	r17, r17
    1e80:	19 f4       	brne	.+6      	; 0x1e88 <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1e82:	99 83       	std	Y+1, r25	; 0x01
    1e84:	88 83       	st	Y, r24
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <xQueueGenericCreate+0x38>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1e88:	4f 96       	adiw	r24, 0x1f	; 31
    1e8a:	99 83       	std	Y+1, r25	; 0x01
    1e8c:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    1e8e:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    1e90:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1e92:	ce 01       	movw	r24, r28
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1ea6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	2d 5f       	subi	r18, 0xFD	; 253
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	32 83       	std	Z+2, r19	; 0x02
    1eb0:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	9f ef       	ldi	r25, 0xFF	; 255
    1eb6:	94 83       	std	Z+4, r25	; 0x04
    1eb8:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1eba:	36 83       	std	Z+6, r19	; 0x06
    1ebc:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ebe:	30 87       	std	Z+8, r19	; 0x08
    1ec0:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1ec2:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1ec4:	08 95       	ret

00001ec6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	11 86       	std	Z+9, r1	; 0x09
    1eca:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1ecc:	08 95       	ret

00001ece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ece:	ac 01       	movw	r20, r24
ListItem_t * const pxIndex = pxList->pxIndex;
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	a1 81       	ldd	r26, Z+1	; 0x01
    1ed4:	b2 81       	ldd	r27, Z+2	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1ed6:	fb 01       	movw	r30, r22
    1ed8:	b3 83       	std	Z+3, r27	; 0x03
    1eda:	a2 83       	std	Z+2, r26	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1edc:	14 96       	adiw	r26, 0x04	; 4
    1ede:	8d 91       	ld	r24, X+
    1ee0:	9c 91       	ld	r25, X
    1ee2:	15 97       	sbiw	r26, 0x05	; 5
    1ee4:	95 83       	std	Z+5, r25	; 0x05
    1ee6:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1ee8:	14 96       	adiw	r26, 0x04	; 4
    1eea:	ed 91       	ld	r30, X+
    1eec:	fc 91       	ld	r31, X
    1eee:	15 97       	sbiw	r26, 0x05	; 5
    1ef0:	73 83       	std	Z+3, r23	; 0x03
    1ef2:	62 83       	std	Z+2, r22	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1ef4:	15 96       	adiw	r26, 0x05	; 5
    1ef6:	7c 93       	st	X, r23
    1ef8:	6e 93       	st	-X, r22
    1efa:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1efc:	fb 01       	movw	r30, r22
    1efe:	51 87       	std	Z+9, r21	; 0x09
    1f00:	40 87       	std	Z+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
    1f02:	fa 01       	movw	r30, r20
    1f04:	80 81       	ld	r24, Z
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	80 83       	st	Z, r24
}
    1f0a:	08 95       	ret

00001f0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	9c 01       	movw	r18, r24
    1f12:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1f14:	48 81       	ld	r20, Y
    1f16:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1f18:	8f ef       	ldi	r24, 0xFF	; 255
    1f1a:	4f 3f       	cpi	r20, 0xFF	; 255
    1f1c:	58 07       	cpc	r21, r24
    1f1e:	21 f4       	brne	.+8      	; 0x1f28 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1f20:	f9 01       	movw	r30, r18
    1f22:	a7 81       	ldd	r26, Z+7	; 0x07
    1f24:	b0 85       	ldd	r27, Z+8	; 0x08
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1f28:	d9 01       	movw	r26, r18
    1f2a:	13 96       	adiw	r26, 0x03	; 3
    1f2c:	12 96       	adiw	r26, 0x02	; 2
    1f2e:	ed 91       	ld	r30, X+
    1f30:	fc 91       	ld	r31, X
    1f32:	13 97       	sbiw	r26, 0x03	; 3
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	48 17       	cp	r20, r24
    1f3a:	59 07       	cpc	r21, r25
    1f3c:	10 f0       	brcs	.+4      	; 0x1f42 <vListInsert+0x36>
    1f3e:	df 01       	movw	r26, r30
    1f40:	f5 cf       	rjmp	.-22     	; 0x1f2c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1f42:	12 96       	adiw	r26, 0x02	; 2
    1f44:	ed 91       	ld	r30, X+
    1f46:	fc 91       	ld	r31, X
    1f48:	13 97       	sbiw	r26, 0x03	; 3
    1f4a:	fb 83       	std	Y+3, r31	; 0x03
    1f4c:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1f4e:	d5 83       	std	Z+5, r29	; 0x05
    1f50:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1f52:	bd 83       	std	Y+5, r27	; 0x05
    1f54:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1f56:	13 96       	adiw	r26, 0x03	; 3
    1f58:	dc 93       	st	X, r29
    1f5a:	ce 93       	st	-X, r28
    1f5c:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f5e:	39 87       	std	Y+9, r19	; 0x09
    1f60:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1f62:	f9 01       	movw	r30, r18
    1f64:	80 81       	ld	r24, Z
    1f66:	8f 5f       	subi	r24, 0xFF	; 255
    1f68:	80 83       	st	Z, r24
}
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	dc 01       	movw	r26, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1f76:	18 96       	adiw	r26, 0x08	; 8
    1f78:	cd 91       	ld	r28, X+
    1f7a:	dc 91       	ld	r29, X
    1f7c:	19 97       	sbiw	r26, 0x09	; 9

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1f7e:	12 96       	adiw	r26, 0x02	; 2
    1f80:	4d 91       	ld	r20, X+
    1f82:	5c 91       	ld	r21, X
    1f84:	13 97       	sbiw	r26, 0x03	; 3
    1f86:	14 96       	adiw	r26, 0x04	; 4
    1f88:	8d 91       	ld	r24, X+
    1f8a:	9c 91       	ld	r25, X
    1f8c:	15 97       	sbiw	r26, 0x05	; 5
    1f8e:	fa 01       	movw	r30, r20
    1f90:	95 83       	std	Z+5, r25	; 0x05
    1f92:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1f94:	14 96       	adiw	r26, 0x04	; 4
    1f96:	2d 91       	ld	r18, X+
    1f98:	3c 91       	ld	r19, X
    1f9a:	15 97       	sbiw	r26, 0x05	; 5
    1f9c:	f9 01       	movw	r30, r18
    1f9e:	53 83       	std	Z+3, r21	; 0x03
    1fa0:	42 83       	std	Z+2, r20	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	8a 17       	cp	r24, r26
    1fa8:	9b 07       	cpc	r25, r27
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1fac:	3a 83       	std	Y+2, r19	; 0x02
    1fae:	29 83       	std	Y+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1fb0:	19 96       	adiw	r26, 0x09	; 9
    1fb2:	1c 92       	st	X, r1
    1fb4:	1e 92       	st	-X, r1
    1fb6:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    1fb8:	88 81       	ld	r24, Y
    1fba:	81 50       	subi	r24, 0x01	; 1
    1fbc:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1fcc:	dc 01       	movw	r26, r24
    1fce:	15 96       	adiw	r26, 0x05	; 5
    1fd0:	ed 91       	ld	r30, X+
    1fd2:	fc 91       	ld	r31, X
    1fd4:	16 97       	sbiw	r26, 0x06	; 6
    1fd6:	e6 80       	ldd	r14, Z+6	; 0x06
    1fd8:	f7 80       	ldd	r15, Z+7	; 0x07
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1fda:	87 01       	movw	r16, r14
    1fdc:	04 5f       	subi	r16, 0xF4	; 244
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1fe6:	8b e1       	ldi	r24, 0x1B	; 27
    1fe8:	92 e0       	ldi	r25, 0x02	; 2
    1fea:	b8 01       	movw	r22, r16
    1fec:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	e0 91 ea 01 	lds	r30, 0x01EA
    1ff6:	f0 91 eb 01 	lds	r31, 0x01EB
    1ffa:	d7 01       	movw	r26, r14
    1ffc:	56 96       	adiw	r26, 0x16	; 22
    1ffe:	9c 91       	ld	r25, X
    2000:	86 89       	ldd	r24, Z+22	; 0x16
    2002:	98 17       	cp	r25, r24
    2004:	08 f0       	brcs	.+2      	; 0x2008 <xCoRoutineRemoveFromEventList+0x44>
    2006:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    2008:	82 2f       	mov	r24, r18
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    2012:	08 95       	ret

00002014 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    201e:	99 e0       	ldi	r25, 0x09	; 9
    2020:	f9 2e       	mov	r15, r25
    2022:	21 c0       	rjmp	.+66     	; 0x2066 <vCoRoutineSchedule+0x52>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2024:	f8 94       	cli
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
    2026:	e0 91 20 02 	lds	r30, 0x0220
    202a:	f0 91 21 02 	lds	r31, 0x0221
    202e:	06 81       	ldd	r16, Z+6	; 0x06
    2030:	17 81       	ldd	r17, Z+7	; 0x07
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2032:	c8 01       	movw	r24, r16
    2034:	0c 96       	adiw	r24, 0x0c	; 12
    2036:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    203a:	78 94       	sei

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    203c:	e8 01       	movw	r28, r16
    203e:	22 96       	adiw	r28, 0x02	; 2
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    2046:	f8 01       	movw	r30, r16
    2048:	96 89       	ldd	r25, Z+22	; 0x16
    204a:	80 91 ec 01 	lds	r24, 0x01EC
    204e:	89 17       	cp	r24, r25
    2050:	10 f4       	brcc	.+4      	; 0x2056 <vCoRoutineSchedule+0x42>
    2052:	90 93 ec 01 	sts	0x01EC, r25
    2056:	9f 9d       	mul	r25, r15
    2058:	c0 01       	movw	r24, r0
    205a:	11 24       	eor	r1, r1
    205c:	8d 50       	subi	r24, 0x0D	; 13
    205e:	9e 4f       	sbci	r25, 0xFE	; 254
    2060:	be 01       	movw	r22, r28
    2062:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2066:	80 91 1b 02 	lds	r24, 0x021B
    206a:	88 23       	and	r24, r24
    206c:	d9 f6       	brne	.-74     	; 0x2024 <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    206e:	0e 94 21 04 	call	0x842	; 0x842 <xTaskGetTickCount>
    2072:	20 91 ed 01 	lds	r18, 0x01ED
    2076:	30 91 ee 01 	lds	r19, 0x01EE
    207a:	82 1b       	sub	r24, r18
    207c:	93 0b       	sbc	r25, r19
    207e:	90 93 f0 01 	sts	0x01F0, r25
    2082:	80 93 ef 01 	sts	0x01EF, r24
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
    2086:	89 e0       	ldi	r24, 0x09	; 9
    2088:	f8 2e       	mov	r15, r24
    208a:	53 c0       	rjmp	.+166    	; 0x2132 <vCoRoutineSchedule+0x11e>
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	90 93 f2 01 	sts	0x01F2, r25
    2092:	80 93 f1 01 	sts	0x01F1, r24
		xPassedTicks--;
    2096:	21 50       	subi	r18, 0x01	; 1
    2098:	30 40       	sbci	r19, 0x00	; 0
    209a:	30 93 f0 01 	sts	0x01F0, r19
    209e:	20 93 ef 01 	sts	0x01EF, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    20a2:	89 2b       	or	r24, r25
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <vCoRoutineSchedule+0x94>
    20a6:	3e c0       	rjmp	.+124    	; 0x2124 <vCoRoutineSchedule+0x110>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    20a8:	20 91 17 02 	lds	r18, 0x0217
    20ac:	30 91 18 02 	lds	r19, 0x0218
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    20b0:	80 91 19 02 	lds	r24, 0x0219
    20b4:	90 91 1a 02 	lds	r25, 0x021A
    20b8:	90 93 18 02 	sts	0x0218, r25
    20bc:	80 93 17 02 	sts	0x0217, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    20c0:	30 93 1a 02 	sts	0x021A, r19
    20c4:	20 93 19 02 	sts	0x0219, r18
    20c8:	2d c0       	rjmp	.+90     	; 0x2124 <vCoRoutineSchedule+0x110>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    20ca:	05 80       	ldd	r0, Z+5	; 0x05
    20cc:	f6 81       	ldd	r31, Z+6	; 0x06
    20ce:	e0 2d       	mov	r30, r0
    20d0:	c6 81       	ldd	r28, Z+6	; 0x06
    20d2:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    20d4:	20 91 f1 01 	lds	r18, 0x01F1
    20d8:	30 91 f2 01 	lds	r19, 0x01F2
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	28 17       	cp	r18, r24
    20e2:	39 07       	cpc	r19, r25
    20e4:	30 f1       	brcs	.+76     	; 0x2132 <vCoRoutineSchedule+0x11e>
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
    20e6:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    20e8:	8e 01       	movw	r16, r28
    20ea:	0e 5f       	subi	r16, 0xFE	; 254
    20ec:	1f 4f       	sbci	r17, 0xFF	; 255
    20ee:	c8 01       	movw	r24, r16
    20f0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
    20f4:	8c 89       	ldd	r24, Y+20	; 0x14
    20f6:	9d 89       	ldd	r25, Y+21	; 0x15
    20f8:	89 2b       	or	r24, r25
    20fa:	21 f0       	breq	.+8      	; 0x2104 <vCoRoutineSchedule+0xf0>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    20fc:	ce 01       	movw	r24, r28
    20fe:	0c 96       	adiw	r24, 0x0c	; 12
    2100:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    2104:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );
    2106:	9e 89       	ldd	r25, Y+22	; 0x16
    2108:	80 91 ec 01 	lds	r24, 0x01EC
    210c:	89 17       	cp	r24, r25
    210e:	10 f4       	brcc	.+4      	; 0x2114 <vCoRoutineSchedule+0x100>
    2110:	90 93 ec 01 	sts	0x01EC, r25
    2114:	9f 9d       	mul	r25, r15
    2116:	c0 01       	movw	r24, r0
    2118:	11 24       	eor	r1, r1
    211a:	8d 50       	subi	r24, 0x0D	; 13
    211c:	9e 4f       	sbci	r25, 0xFE	; 254
    211e:	b8 01       	movw	r22, r16
    2120:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2124:	e0 91 17 02 	lds	r30, 0x0217
    2128:	f0 91 18 02 	lds	r31, 0x0218
    212c:	80 81       	ld	r24, Z
    212e:	88 23       	and	r24, r24
    2130:	61 f6       	brne	.-104    	; 0x20ca <vCoRoutineSchedule+0xb6>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2132:	20 91 ef 01 	lds	r18, 0x01EF
    2136:	30 91 f0 01 	lds	r19, 0x01F0
    213a:	80 91 f1 01 	lds	r24, 0x01F1
    213e:	90 91 f2 01 	lds	r25, 0x01F2
    2142:	21 15       	cp	r18, r1
    2144:	31 05       	cpc	r19, r1
    2146:	09 f0       	breq	.+2      	; 0x214a <vCoRoutineSchedule+0x136>
    2148:	a1 cf       	rjmp	.-190    	; 0x208c <vCoRoutineSchedule+0x78>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
    214a:	90 93 ee 01 	sts	0x01EE, r25
    214e:	80 93 ed 01 	sts	0x01ED, r24
    2152:	90 91 ec 01 	lds	r25, 0x01EC

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2156:	29 e0       	ldi	r18, 0x09	; 9
    2158:	06 c0       	rjmp	.+12     	; 0x2166 <vCoRoutineSchedule+0x152>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    215a:	99 23       	and	r25, r25
    215c:	19 f4       	brne	.+6      	; 0x2164 <vCoRoutineSchedule+0x150>
    215e:	10 92 ec 01 	sts	0x01EC, r1
    2162:	32 c0       	rjmp	.+100    	; 0x21c8 <vCoRoutineSchedule+0x1b4>
    2164:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2166:	92 9f       	mul	r25, r18
    2168:	d0 01       	movw	r26, r0
    216a:	11 24       	eor	r1, r1
    216c:	ad 50       	subi	r26, 0x0D	; 13
    216e:	be 4f       	sbci	r27, 0xFE	; 254
    2170:	8c 91       	ld	r24, X
    2172:	88 23       	and	r24, r24
    2174:	91 f3       	breq	.-28     	; 0x215a <vCoRoutineSchedule+0x146>
    2176:	90 93 ec 01 	sts	0x01EC, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	ed 91       	ld	r30, X+
    217e:	fc 91       	ld	r31, X
    2180:	12 97       	sbiw	r26, 0x02	; 2
    2182:	02 80       	ldd	r0, Z+2	; 0x02
    2184:	f3 81       	ldd	r31, Z+3	; 0x03
    2186:	e0 2d       	mov	r30, r0
    2188:	12 96       	adiw	r26, 0x02	; 2
    218a:	fc 93       	st	X, r31
    218c:	ee 93       	st	-X, r30
    218e:	11 97       	sbiw	r26, 0x01	; 1
    2190:	cd 01       	movw	r24, r26
    2192:	03 96       	adiw	r24, 0x03	; 3
    2194:	e8 17       	cp	r30, r24
    2196:	f9 07       	cpc	r31, r25
    2198:	31 f4       	brne	.+12     	; 0x21a6 <vCoRoutineSchedule+0x192>
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	12 96       	adiw	r26, 0x02	; 2
    21a0:	9c 93       	st	X, r25
    21a2:	8e 93       	st	-X, r24
    21a4:	11 97       	sbiw	r26, 0x01	; 1
    21a6:	11 96       	adiw	r26, 0x01	; 1
    21a8:	ed 91       	ld	r30, X+
    21aa:	fc 91       	ld	r31, X
    21ac:	12 97       	sbiw	r26, 0x02	; 2
    21ae:	06 80       	ldd	r0, Z+6	; 0x06
    21b0:	f7 81       	ldd	r31, Z+7	; 0x07
    21b2:	e0 2d       	mov	r30, r0
    21b4:	f0 93 eb 01 	sts	0x01EB, r31
    21b8:	e0 93 ea 01 	sts	0x01EA, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    21bc:	20 81       	ld	r18, Z
    21be:	31 81       	ldd	r19, Z+1	; 0x01
    21c0:	cf 01       	movw	r24, r30
    21c2:	67 89       	ldd	r22, Z+23	; 0x17
    21c4:	f9 01       	movw	r30, r18
    21c6:	09 95       	icall

	return;
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	08 95       	ret

000021d4 <vCoRoutineAddToDelayedList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	eb 01       	movw	r28, r22
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    21de:	00 91 f1 01 	lds	r16, 0x01F1
    21e2:	10 91 f2 01 	lds	r17, 0x01F2
    21e6:	08 0f       	add	r16, r24
    21e8:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    21ea:	80 91 ea 01 	lds	r24, 0x01EA
    21ee:	90 91 eb 01 	lds	r25, 0x01EB
    21f2:	02 96       	adiw	r24, 0x02	; 2
    21f4:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    21f8:	e0 91 ea 01 	lds	r30, 0x01EA
    21fc:	f0 91 eb 01 	lds	r31, 0x01EB
    2200:	13 83       	std	Z+3, r17	; 0x03
    2202:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    2204:	80 91 f1 01 	lds	r24, 0x01F1
    2208:	90 91 f2 01 	lds	r25, 0x01F2
    220c:	bf 01       	movw	r22, r30
    220e:	6e 5f       	subi	r22, 0xFE	; 254
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	08 17       	cp	r16, r24
    2214:	19 07       	cpc	r17, r25
    2216:	28 f4       	brcc	.+10     	; 0x2222 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2218:	80 91 19 02 	lds	r24, 0x0219
    221c:	90 91 1a 02 	lds	r25, 0x021A
    2220:	04 c0       	rjmp	.+8      	; 0x222a <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2222:	80 91 17 02 	lds	r24, 0x0217
    2226:	90 91 18 02 	lds	r25, 0x0218
    222a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <vListInsert>
	}

	if( pxEventList )
    222e:	20 97       	sbiw	r28, 0x00	; 0
    2230:	49 f0       	breq	.+18     	; 0x2244 <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2232:	60 91 ea 01 	lds	r22, 0x01EA
    2236:	70 91 eb 01 	lds	r23, 0x01EB
    223a:	64 5f       	subi	r22, 0xF4	; 244
    223c:	7f 4f       	sbci	r23, 0xFF	; 255
    223e:	ce 01       	movw	r24, r28
    2240:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <vListInsert>
	}
}
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret

0000224e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
    224e:	af 92       	push	r10
    2250:	bf 92       	push	r11
    2252:	cf 92       	push	r12
    2254:	df 92       	push	r13
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	6c 01       	movw	r12, r24
    2264:	b6 2e       	mov	r11, r22
    2266:	a4 2e       	mov	r10, r20
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
    2268:	8a e1       	ldi	r24, 0x1A	; 26
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 b1 11 	call	0x2362	; 0x2362 <pvPortMalloc>
    2270:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	11 f4       	brne	.+4      	; 0x227a <xCoRoutineCreate+0x2c>
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	59 c0       	rjmp	.+178    	; 0x232c <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    227a:	80 91 ea 01 	lds	r24, 0x01EA
    227e:	90 91 eb 01 	lds	r25, 0x01EB
    2282:	89 2b       	or	r24, r25
    2284:	21 f5       	brne	.+72     	; 0x22ce <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2286:	d0 93 eb 01 	sts	0x01EB, r29
    228a:	c0 93 ea 01 	sts	0x01EA, r28
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    228e:	83 ef       	ldi	r24, 0xF3	; 243
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
    2296:	8c ef       	ldi	r24, 0xFC	; 252
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    229e:	25 e0       	ldi	r18, 0x05	; 5
    22a0:	e2 2e       	mov	r14, r18
    22a2:	22 e0       	ldi	r18, 0x02	; 2
    22a4:	f2 2e       	mov	r15, r18
    22a6:	c7 01       	movw	r24, r14
    22a8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    22ac:	0e e0       	ldi	r16, 0x0E	; 14
    22ae:	12 e0       	ldi	r17, 0x02	; 2
    22b0:	c8 01       	movw	r24, r16
    22b2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    22b6:	8b e1       	ldi	r24, 0x1B	; 27
    22b8:	92 e0       	ldi	r25, 0x02	; 2
    22ba:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    22be:	f0 92 18 02 	sts	0x0218, r15
    22c2:	e0 92 17 02 	sts	0x0217, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    22c6:	10 93 1a 02 	sts	0x021A, r17
    22ca:	00 93 19 02 	sts	0x0219, r16
    22ce:	eb 2c       	mov	r14, r11
    22d0:	bb 20       	and	r11, r11
    22d2:	11 f0       	breq	.+4      	; 0x22d8 <xCoRoutineCreate+0x8a>
    22d4:	ee 24       	eor	r14, r14
    22d6:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    22d8:	19 8e       	std	Y+25, r1	; 0x19
    22da:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    22dc:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    22de:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    22e0:	fe 01       	movw	r30, r28
    22e2:	c1 92       	st	Z+, r12
    22e4:	d1 92       	st	Z+, r13
    22e6:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    22e8:	cf 01       	movw	r24, r30
    22ea:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    22ee:	ce 01       	movw	r24, r28
    22f0:	0c 96       	adiw	r24, 0x0c	; 12
    22f2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    22f6:	d9 87       	std	Y+9, r29	; 0x09
    22f8:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    22fa:	db 8b       	std	Y+19, r29	; 0x13
    22fc:	ca 8b       	std	Y+18, r28	; 0x12

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	8e 19       	sub	r24, r14
    2304:	91 09       	sbc	r25, r1
    2306:	9d 87       	std	Y+13, r25	; 0x0d
    2308:	8c 87       	std	Y+12, r24	; 0x0c

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    230a:	9e 89       	ldd	r25, Y+22	; 0x16
    230c:	80 91 ec 01 	lds	r24, 0x01EC
    2310:	89 17       	cp	r24, r25
    2312:	10 f4       	brcc	.+4      	; 0x2318 <xCoRoutineCreate+0xca>
    2314:	90 93 ec 01 	sts	0x01EC, r25
    2318:	89 e0       	ldi	r24, 0x09	; 9
    231a:	98 9f       	mul	r25, r24
    231c:	c0 01       	movw	r24, r0
    231e:	11 24       	eor	r1, r1
    2320:	8d 50       	subi	r24, 0x0D	; 13
    2322:	9e 4f       	sbci	r25, 0xFE	; 254
    2324:	b8 01       	movw	r22, r16
    2326:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vListInsertEnd>
    232a:	81 e0       	ldi	r24, 0x01	; 1
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}

	return xReturn;
}
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	cf 90       	pop	r12
    233c:	bf 90       	pop	r11
    233e:	af 90       	pop	r10
    2340:	08 95       	ret

00002342 <vPortFree>:
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    2342:	08 95       	ret

00002344 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2344:	10 92 25 02 	sts	0x0225, r1
    2348:	10 92 24 02 	sts	0x0224, r1
}
    234c:	08 95       	ret

0000234e <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    234e:	2b ed       	ldi	r18, 0xDB	; 219
    2350:	35 e0       	ldi	r19, 0x05	; 5
    2352:	80 91 24 02 	lds	r24, 0x0224
    2356:	90 91 25 02 	lds	r25, 0x0225
    235a:	28 1b       	sub	r18, r24
    235c:	39 0b       	sbc	r19, r25
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
}
    235e:	c9 01       	movw	r24, r18
    2360:	08 95       	ret

00002362 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    2368:	0e 94 1b 04 	call	0x836	; 0x836 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    236c:	80 91 26 02 	lds	r24, 0x0226
    2370:	90 91 27 02 	lds	r25, 0x0227
    2374:	89 2b       	or	r24, r25
    2376:	31 f4       	brne	.+12     	; 0x2384 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2378:	89 e2       	ldi	r24, 0x29	; 41
    237a:	92 e0       	ldi	r25, 0x02	; 2
    237c:	90 93 27 02 	sts	0x0227, r25
    2380:	80 93 26 02 	sts	0x0226, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2384:	20 91 24 02 	lds	r18, 0x0224
    2388:	30 91 25 02 	lds	r19, 0x0225
    238c:	ce 01       	movw	r24, r28
    238e:	82 0f       	add	r24, r18
    2390:	93 1f       	adc	r25, r19
    2392:	45 e0       	ldi	r20, 0x05	; 5
    2394:	8b 3d       	cpi	r24, 0xDB	; 219
    2396:	94 07       	cpc	r25, r20
    2398:	70 f4       	brcc	.+28     	; 0x23b6 <pvPortMalloc+0x54>
    239a:	28 17       	cp	r18, r24
    239c:	39 07       	cpc	r19, r25
    239e:	58 f4       	brcc	.+22     	; 0x23b6 <pvPortMalloc+0x54>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    23a0:	c0 91 26 02 	lds	r28, 0x0226
    23a4:	d0 91 27 02 	lds	r29, 0x0227
    23a8:	c2 0f       	add	r28, r18
    23aa:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    23ac:	90 93 25 02 	sts	0x0225, r25
    23b0:	80 93 24 02 	sts	0x0224, r24
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <pvPortMalloc+0x58>
    23b6:	c0 e0       	ldi	r28, 0x00	; 0
    23b8:	d0 e0       	ldi	r29, 0x00	; 0
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    23ba:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    23be:	ce 01       	movw	r24, r28
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	08 95       	ret

000023c6 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    23c6:	fc 01       	movw	r30, r24
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    23c8:	91 e1       	ldi	r25, 0x11	; 17
    23ca:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    23cc:	22 e2       	ldi	r18, 0x22	; 34
    23ce:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    23d0:	83 e3       	ldi	r24, 0x33	; 51
    23d2:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    23d4:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    23d6:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    23d8:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    23da:	80 e8       	ldi	r24, 0x80	; 128
    23dc:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    23de:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    23e4:	83 e0       	ldi	r24, 0x03	; 3
    23e6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    23e8:	84 e0       	ldi	r24, 0x04	; 4
    23ea:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    23ec:	85 e0       	ldi	r24, 0x05	; 5
    23ee:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    23f0:	86 e0       	ldi	r24, 0x06	; 6
    23f2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    23f4:	87 e0       	ldi	r24, 0x07	; 7
    23f6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    23f8:	88 e0       	ldi	r24, 0x08	; 8
    23fa:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    23fc:	89 e0       	ldi	r24, 0x09	; 9
    23fe:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    2400:	80 e1       	ldi	r24, 0x10	; 16
    2402:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    2404:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2406:	82 e1       	ldi	r24, 0x12	; 18
    2408:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    240a:	83 e1       	ldi	r24, 0x13	; 19
    240c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    240e:	84 e1       	ldi	r24, 0x14	; 20
    2410:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    2412:	85 e1       	ldi	r24, 0x15	; 21
    2414:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    2416:	86 e1       	ldi	r24, 0x16	; 22
    2418:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    241a:	87 e1       	ldi	r24, 0x17	; 23
    241c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    241e:	88 e1       	ldi	r24, 0x18	; 24
    2420:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2422:	89 e1       	ldi	r24, 0x19	; 25
    2424:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2426:	80 e2       	ldi	r24, 0x20	; 32
    2428:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    242a:	81 e2       	ldi	r24, 0x21	; 33
    242c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    242e:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    2430:	83 e2       	ldi	r24, 0x23	; 35
    2432:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2434:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2436:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2438:	86 e2       	ldi	r24, 0x26	; 38
    243a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    243c:	87 e2       	ldi	r24, 0x27	; 39
    243e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    2440:	88 e2       	ldi	r24, 0x28	; 40
    2442:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    2444:	89 e2       	ldi	r24, 0x29	; 41
    2446:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    2448:	80 e3       	ldi	r24, 0x30	; 48
    244a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    244c:	81 e3       	ldi	r24, 0x31	; 49
    244e:	82 93       	st	-Z, r24
    2450:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    2452:	cf 01       	movw	r24, r30
    2454:	08 95       	ret

00002456 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    2456:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = ucLowByte;
    245a:	8c e7       	ldi	r24, 0x7C	; 124
    245c:	80 93 88 00 	sts	0x0088, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    2460:	8b e0       	ldi	r24, 0x0B	; 11
    2462:	80 93 81 00 	sts	0x0081, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    2466:	ef e6       	ldi	r30, 0x6F	; 111
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    246c:	82 60       	ori	r24, 0x02	; 2
	TIMSK1 = ucLowByte;
    246e:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2470:	a0 91 8d 01 	lds	r26, 0x018D
    2474:	b0 91 8e 01 	lds	r27, 0x018E
    2478:	cd 91       	ld	r28, X+
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	dd 91       	ld	r29, X+
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	ff 91       	pop	r31
    2482:	ef 91       	pop	r30
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	bf 91       	pop	r27
    248a:	af 91       	pop	r26
    248c:	9f 91       	pop	r25
    248e:	8f 91       	pop	r24
    2490:	7f 91       	pop	r23
    2492:	6f 91       	pop	r22
    2494:	5f 91       	pop	r21
    2496:	4f 91       	pop	r20
    2498:	3f 91       	pop	r19
    249a:	2f 91       	pop	r18
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	ff 90       	pop	r15
    24a2:	ef 90       	pop	r14
    24a4:	df 90       	pop	r13
    24a6:	cf 90       	pop	r12
    24a8:	bf 90       	pop	r11
    24aa:	af 90       	pop	r10
    24ac:	9f 90       	pop	r9
    24ae:	8f 90       	pop	r8
    24b0:	7f 90       	pop	r7
    24b2:	6f 90       	pop	r6
    24b4:	5f 90       	pop	r5
    24b6:	4f 90       	pop	r4
    24b8:	3f 90       	pop	r3
    24ba:	2f 90       	pop	r2
    24bc:	1f 90       	pop	r1
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    24c4:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	08 95       	ret

000024ca <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    24ca:	08 95       	ret

000024cc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    24cc:	0f 92       	push	r0
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	0f 92       	push	r0
    24d4:	1f 92       	push	r1
    24d6:	11 24       	eor	r1, r1
    24d8:	2f 92       	push	r2
    24da:	3f 92       	push	r3
    24dc:	4f 92       	push	r4
    24de:	5f 92       	push	r5
    24e0:	6f 92       	push	r6
    24e2:	7f 92       	push	r7
    24e4:	8f 92       	push	r8
    24e6:	9f 92       	push	r9
    24e8:	af 92       	push	r10
    24ea:	bf 92       	push	r11
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	2f 93       	push	r18
    24fa:	3f 93       	push	r19
    24fc:	4f 93       	push	r20
    24fe:	5f 93       	push	r21
    2500:	6f 93       	push	r22
    2502:	7f 93       	push	r23
    2504:	8f 93       	push	r24
    2506:	9f 93       	push	r25
    2508:	af 93       	push	r26
    250a:	bf 93       	push	r27
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	ef 93       	push	r30
    2512:	ff 93       	push	r31
    2514:	a0 91 8d 01 	lds	r26, 0x018D
    2518:	b0 91 8e 01 	lds	r27, 0x018E
    251c:	0d b6       	in	r0, 0x3d	; 61
    251e:	0d 92       	st	X+, r0
    2520:	0e b6       	in	r0, 0x3e	; 62
    2522:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2524:	0e 94 2a 06 	call	0xc54	; 0xc54 <xTaskIncrementTick>
    2528:	88 23       	and	r24, r24
    252a:	11 f0       	breq	.+4      	; 0x2530 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    252c:	0e 94 40 04 	call	0x880	; 0x880 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    2530:	a0 91 8d 01 	lds	r26, 0x018D
    2534:	b0 91 8e 01 	lds	r27, 0x018E
    2538:	cd 91       	ld	r28, X+
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	dd 91       	ld	r29, X+
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	ff 91       	pop	r31
    2542:	ef 91       	pop	r30
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	7f 91       	pop	r23
    2552:	6f 91       	pop	r22
    2554:	5f 91       	pop	r21
    2556:	4f 91       	pop	r20
    2558:	3f 91       	pop	r19
    255a:	2f 91       	pop	r18
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	df 90       	pop	r13
    2566:	cf 90       	pop	r12
    2568:	bf 90       	pop	r11
    256a:	af 90       	pop	r10
    256c:	9f 90       	pop	r9
    256e:	8f 90       	pop	r8
    2570:	7f 90       	pop	r7
    2572:	6f 90       	pop	r6
    2574:	5f 90       	pop	r5
    2576:	4f 90       	pop	r4
    2578:	3f 90       	pop	r3
    257a:	2f 90       	pop	r2
    257c:	1f 90       	pop	r1
    257e:	0f 90       	pop	r0
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2584:	08 95       	ret

00002586 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    2586:	0e 94 66 12 	call	0x24cc	; 0x24cc <vPortYieldFromTick>
		asm volatile ( "reti" );
    258a:	18 95       	reti

0000258c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    258c:	0f 92       	push	r0
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	0f 92       	push	r0
    2594:	1f 92       	push	r1
    2596:	11 24       	eor	r1, r1
    2598:	2f 92       	push	r2
    259a:	3f 92       	push	r3
    259c:	4f 92       	push	r4
    259e:	5f 92       	push	r5
    25a0:	6f 92       	push	r6
    25a2:	7f 92       	push	r7
    25a4:	8f 92       	push	r8
    25a6:	9f 92       	push	r9
    25a8:	af 92       	push	r10
    25aa:	bf 92       	push	r11
    25ac:	cf 92       	push	r12
    25ae:	df 92       	push	r13
    25b0:	ef 92       	push	r14
    25b2:	ff 92       	push	r15
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	2f 93       	push	r18
    25ba:	3f 93       	push	r19
    25bc:	4f 93       	push	r20
    25be:	5f 93       	push	r21
    25c0:	6f 93       	push	r22
    25c2:	7f 93       	push	r23
    25c4:	8f 93       	push	r24
    25c6:	9f 93       	push	r25
    25c8:	af 93       	push	r26
    25ca:	bf 93       	push	r27
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	ef 93       	push	r30
    25d2:	ff 93       	push	r31
    25d4:	a0 91 8d 01 	lds	r26, 0x018D
    25d8:	b0 91 8e 01 	lds	r27, 0x018E
    25dc:	0d b6       	in	r0, 0x3d	; 61
    25de:	0d 92       	st	X+, r0
    25e0:	0e b6       	in	r0, 0x3e	; 62
    25e2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    25e4:	0e 94 40 04 	call	0x880	; 0x880 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    25e8:	a0 91 8d 01 	lds	r26, 0x018D
    25ec:	b0 91 8e 01 	lds	r27, 0x018E
    25f0:	cd 91       	ld	r28, X+
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	dd 91       	ld	r29, X+
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	ff 91       	pop	r31
    25fa:	ef 91       	pop	r30
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	bf 91       	pop	r27
    2602:	af 91       	pop	r26
    2604:	9f 91       	pop	r25
    2606:	8f 91       	pop	r24
    2608:	7f 91       	pop	r23
    260a:	6f 91       	pop	r22
    260c:	5f 91       	pop	r21
    260e:	4f 91       	pop	r20
    2610:	3f 91       	pop	r19
    2612:	2f 91       	pop	r18
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	df 90       	pop	r13
    261e:	cf 90       	pop	r12
    2620:	bf 90       	pop	r11
    2622:	af 90       	pop	r10
    2624:	9f 90       	pop	r9
    2626:	8f 90       	pop	r8
    2628:	7f 90       	pop	r7
    262a:	6f 90       	pop	r6
    262c:	5f 90       	pop	r5
    262e:	4f 90       	pop	r4
    2630:	3f 90       	pop	r3
    2632:	2f 90       	pop	r2
    2634:	1f 90       	pop	r1
    2636:	0f 90       	pop	r0
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    263c:	08 95       	ret

0000263e <xAreFlashCoRoutinesStillRunning>:
BaseType_t xAreFlashCoRoutinesStillRunning( void )
{
	/* Return pdPASS or pdFAIL depending on whether an error has been detected
	or not. */
	return xCoRoutineFlashStatus;
}
    263e:	80 91 2e 01 	lds	r24, 0x012E
    2642:	08 95       	ret

00002644 <vStartFlashCoRoutines>:

/*
 * See the header file for details.
 */
void vStartFlashCoRoutines( UBaseType_t uxNumberToCreate )
{
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	08 2f       	mov	r16, r24
    264a:	89 30       	cpi	r24, 0x09	; 9
    264c:	08 f0       	brcs	.+2      	; 0x2650 <vStartFlashCoRoutines+0xc>
    264e:	08 e0       	ldi	r16, 0x08	; 8
	{
		uxNumberToCreate = crfMAX_FLASH_TASKS;
	}

	/* Create the queue used to pass data between the co-routines. */
	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( UBaseType_t ) );
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	61 e0       	ldi	r22, 0x01	; 1
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xQueueGenericCreate>
    265a:	90 93 05 08 	sts	0x0805, r25
    265e:	80 93 04 08 	sts	0x0804, r24

	if( xFlashQueue )
    2662:	89 2b       	or	r24, r25
    2664:	89 f0       	breq	.+34     	; 0x2688 <vStartFlashCoRoutines+0x44>
    2666:	10 e0       	ldi	r17, 0x00	; 0
    2668:	07 c0       	rjmp	.+14     	; 0x2678 <vStartFlashCoRoutines+0x34>
	{
		/* Create uxNumberToCreate 'fixed delay' co-routines. */
		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
		{
			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
    266a:	8e e8       	ldi	r24, 0x8E	; 142
    266c:	93 e1       	ldi	r25, 0x13	; 19
    266e:	60 e0       	ldi	r22, 0x00	; 0
    2670:	41 2f       	mov	r20, r17
    2672:	0e 94 27 11 	call	0x224e	; 0x224e <xCoRoutineCreate>
	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( UBaseType_t ) );

	if( xFlashQueue )
	{
		/* Create uxNumberToCreate 'fixed delay' co-routines. */
		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
    2676:	1f 5f       	subi	r17, 0xFF	; 255
    2678:	10 17       	cp	r17, r16
    267a:	b8 f3       	brcs	.-18     	; 0x266a <vStartFlashCoRoutines+0x26>
		{
			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
		}

		/* Create the 'flash' co-routine. */
		xCoRoutineCreate( prvFlashCoRoutine, crfFLASH_PRIORITY, crfFLASH_INDEX );
    267c:	87 e4       	ldi	r24, 0x47	; 71
    267e:	93 e1       	ldi	r25, 0x13	; 19
    2680:	61 e0       	ldi	r22, 0x01	; 1
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 27 11 	call	0x224e	; 0x224e <xCoRoutineCreate>
	}
}
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	08 95       	ret

0000268e <prvFlashCoRoutine>:
	crEND();
}
/*-----------------------------------------------------------*/

static void prvFlashCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
    268e:	0f 93       	push	r16
    2690:	1f 93       	push	r17
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	0f 92       	push	r0
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
static as we do not need it to maintain their state between blocks. */
BaseType_t xResult;
UBaseType_t uxLEDToFlash;

	/* Co-routines MUST start with a call to crSTART. */
	crSTART( xHandle );
    269c:	8c 01       	movw	r16, r24
    269e:	fc 01       	movw	r30, r24
    26a0:	80 8d       	ldd	r24, Z+24	; 0x18
    26a2:	91 8d       	ldd	r25, Z+25	; 0x19
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	82 3c       	cpi	r24, 0xC2	; 194
    26a8:	9f 07       	cpc	r25, r31
    26aa:	b1 f0       	breq	.+44     	; 0x26d8 <prvFlashCoRoutine+0x4a>
    26ac:	21 e0       	ldi	r18, 0x01	; 1
    26ae:	83 3c       	cpi	r24, 0xC3	; 195
    26b0:	92 07       	cpc	r25, r18
    26b2:	51 f1       	breq	.+84     	; 0x2708 <prvFlashCoRoutine+0x7a>
    26b4:	89 2b       	or	r24, r25
    26b6:	61 f5       	brne	.+88     	; 0x2710 <prvFlashCoRoutine+0x82>
	( void ) uxIndex;
	
	for( ;; )
	{
		/* Block to wait for the number of the LED to flash. */
		crQUEUE_RECEIVE( xHandle, xFlashQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );		
    26b8:	80 91 04 08 	lds	r24, 0x0804
    26bc:	90 91 05 08 	lds	r25, 0x0805
    26c0:	be 01       	movw	r22, r28
    26c2:	6f 5f       	subi	r22, 0xFF	; 255
    26c4:	7f 4f       	sbci	r23, 0xFF	; 255
    26c6:	4f ef       	ldi	r20, 0xFF	; 255
    26c8:	5f ef       	ldi	r21, 0xFF	; 255
    26ca:	0e 94 44 0c 	call	0x1888	; 0x1888 <xQueueCRReceive>
    26ce:	8c 3f       	cpi	r24, 0xFC	; 252
    26d0:	71 f4       	brne	.+28     	; 0x26ee <prvFlashCoRoutine+0x60>
    26d2:	82 ec       	ldi	r24, 0xC2	; 194
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <prvFlashCoRoutine+0x68>
    26d8:	80 91 04 08 	lds	r24, 0x0804
    26dc:	90 91 05 08 	lds	r25, 0x0805
    26e0:	be 01       	movw	r22, r28
    26e2:	6f 5f       	subi	r22, 0xFF	; 255
    26e4:	7f 4f       	sbci	r23, 0xFF	; 255
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	0e 94 44 0c 	call	0x1888	; 0x1888 <xQueueCRReceive>
    26ee:	8b 3f       	cpi	r24, 0xFB	; 251
    26f0:	31 f4       	brne	.+12     	; 0x26fe <prvFlashCoRoutine+0x70>
    26f2:	83 ec       	ldi	r24, 0xC3	; 195
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	f8 01       	movw	r30, r16
    26f8:	91 8f       	std	Z+25, r25	; 0x19
    26fa:	80 8f       	std	Z+24, r24	; 0x18
    26fc:	09 c0       	rjmp	.+18     	; 0x2710 <prvFlashCoRoutine+0x82>

		if( xResult != pdPASS )
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	19 f0       	breq	.+6      	; 0x2708 <prvFlashCoRoutine+0x7a>
		{
			/* We would not expect to wake unless we received something. */
			xCoRoutineFlashStatus = pdFAIL;
    2702:	10 92 2e 01 	sts	0x012E, r1
    2706:	d8 cf       	rjmp	.-80     	; 0x26b8 <prvFlashCoRoutine+0x2a>
		}
		else
		{
			/* We received the number of an LED to flash - flash it! */
			vParTestToggleLED( uxLEDToFlash );
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <vParTestToggleLED>
    270e:	d4 cf       	rjmp	.-88     	; 0x26b8 <prvFlashCoRoutine+0x2a>
		}
	}

	/* Co-routines MUST end with a call to crEND. */
	crEND();
}
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	1f 91       	pop	r17
    2718:	0f 91       	pop	r16
    271a:	08 95       	ret

0000271c <prvFixedDelayCoRoutine>:
	}
}
/*-----------------------------------------------------------*/

static void prvFixedDelayCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	0f 92       	push	r0
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	69 83       	std	Y+1, r22	; 0x01
																400 / portTICK_PERIOD_MS,
																450 / portTICK_PERIOD_MS,
																500  / portTICK_PERIOD_MS };

	/* Co-routines MUST start with a call to crSTART. */
	crSTART( xHandle );
    272c:	8c 01       	movw	r16, r24
    272e:	fc 01       	movw	r30, r24
    2730:	80 8d       	ldd	r24, Z+24	; 0x18
    2732:	91 8d       	ldd	r25, Z+25	; 0x19
    2734:	f1 e0       	ldi	r31, 0x01	; 1
    2736:	82 38       	cpi	r24, 0x82	; 130
    2738:	9f 07       	cpc	r25, r31
    273a:	f1 f0       	breq	.+60     	; 0x2778 <prvFixedDelayCoRoutine+0x5c>
    273c:	21 e0       	ldi	r18, 0x01	; 1
    273e:	83 38       	cpi	r24, 0x83	; 131
    2740:	92 07       	cpc	r25, r18
    2742:	18 f4       	brcc	.+6      	; 0x274a <prvFixedDelayCoRoutine+0x2e>
    2744:	89 2b       	or	r24, r25
    2746:	41 f0       	breq	.+16     	; 0x2758 <prvFixedDelayCoRoutine+0x3c>
    2748:	3e c0       	rjmp	.+124    	; 0x27c6 <prvFixedDelayCoRoutine+0xaa>
    274a:	e1 e0       	ldi	r30, 0x01	; 1
    274c:	83 38       	cpi	r24, 0x83	; 131
    274e:	9e 07       	cpc	r25, r30
    2750:	39 f1       	breq	.+78     	; 0x27a0 <prvFixedDelayCoRoutine+0x84>
    2752:	86 59       	subi	r24, 0x96	; 150
    2754:	91 40       	sbci	r25, 0x01	; 1
    2756:	b9 f5       	brne	.+110    	; 0x27c6 <prvFixedDelayCoRoutine+0xaa>

	for( ;; )
	{
		/* Post our uxIndex value onto the queue.  This is used as the LED to
		flash. */
		crQUEUE_SEND( xHandle, xFlashQueue, ( void * ) &uxIndex, crfPOSTING_BLOCK_TIME, &xResult );
    2758:	80 91 04 08 	lds	r24, 0x0804
    275c:	90 91 05 08 	lds	r25, 0x0805
    2760:	be 01       	movw	r22, r28
    2762:	6f 5f       	subi	r22, 0xFF	; 255
    2764:	7f 4f       	sbci	r23, 0xFF	; 255
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	0e 94 89 0c 	call	0x1912	; 0x1912 <xQueueCRSend>
    276e:	8c 3f       	cpi	r24, 0xFC	; 252
    2770:	71 f4       	brne	.+28     	; 0x278e <prvFixedDelayCoRoutine+0x72>
    2772:	82 e8       	ldi	r24, 0x82	; 130
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	24 c0       	rjmp	.+72     	; 0x27c0 <prvFixedDelayCoRoutine+0xa4>
    2778:	80 91 04 08 	lds	r24, 0x0804
    277c:	90 91 05 08 	lds	r25, 0x0805
    2780:	be 01       	movw	r22, r28
    2782:	6f 5f       	subi	r22, 0xFF	; 255
    2784:	7f 4f       	sbci	r23, 0xFF	; 255
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	0e 94 89 0c 	call	0x1912	; 0x1912 <xQueueCRSend>
    278e:	8b 3f       	cpi	r24, 0xFB	; 251
    2790:	19 f4       	brne	.+6      	; 0x2798 <prvFixedDelayCoRoutine+0x7c>
    2792:	83 e8       	ldi	r24, 0x83	; 131
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <prvFixedDelayCoRoutine+0xa4>

		if( xResult != pdPASS )
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	11 f0       	breq	.+4      	; 0x27a0 <prvFixedDelayCoRoutine+0x84>
		{
			/* For the reasons stated at the top of the file we should always
			find that we can post to the queue.  If we could not then an error
			has occurred. */
			xCoRoutineFlashStatus = pdFAIL;
    279c:	10 92 2e 01 	sts	0x012E, r1
		}

		crDELAY( xHandle, xFlashRates[ uxIndex ] );
    27a0:	e9 81       	ldd	r30, Y+1	; 0x01
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	e1 5d       	subi	r30, 0xD1	; 209
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	21 f0       	breq	.+8      	; 0x27bc <prvFixedDelayCoRoutine+0xa0>
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <vCoRoutineAddToDelayedList>
    27bc:	86 e9       	ldi	r24, 0x96	; 150
    27be:	91 e0       	ldi	r25, 0x01	; 1
    27c0:	f8 01       	movw	r30, r16
    27c2:	91 8f       	std	Z+25, r25	; 0x19
    27c4:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Co-routines MUST end with a call to crEND. */
	crEND();
}
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	08 95       	ret

000027d2 <vCompeteingIntMathTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    27d2:	9f 92       	push	r9
    27d4:	af 92       	push	r10
    27d6:	bf 92       	push	r11
    27d8:	cf 92       	push	r12
    27da:	df 92       	push	r13
    27dc:	ef 92       	push	r14
    27de:	ff 92       	push	r15
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <vCompeteingIntMathTask+0x18>
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <vCompeteingIntMathTask+0x1a>
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
    27f0:	8c 01       	movw	r16, r24
    27f2:	ee 24       	eor	r14, r14
    27f4:	ff 24       	eor	r15, r15
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    27f6:	9b e7       	ldi	r25, 0x7B	; 123
    27f8:	a9 2e       	mov	r10, r25
    27fa:	b1 2c       	mov	r11, r1
    27fc:	c1 2c       	mov	r12, r1
    27fe:	d1 2c       	mov	r13, r1
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
				*pxTaskHasExecuted = pdTRUE;
    2800:	99 24       	eor	r9, r9
    2802:	93 94       	inc	r9
    2804:	03 c0       	rjmp	.+6      	; 0x280c <vCompeteingIntMathTask+0x3a>
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	e8 2e       	mov	r14, r24
    280a:	f1 2c       	mov	r15, r1
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    280c:	a9 82       	std	Y+1, r10	; 0x01
    280e:	ba 82       	std	Y+2, r11	; 0x02
    2810:	cb 82       	std	Y+3, r12	; 0x03
    2812:	dc 82       	std	Y+4, r13	; 0x04
		lValue += intgCONST2;
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	ab 81       	ldd	r26, Y+3	; 0x03
    281a:	bc 81       	ldd	r27, Y+4	; 0x04
    281c:	89 5b       	subi	r24, 0xB9	; 185
    281e:	9b 46       	sbci	r25, 0x6B	; 107
    2820:	ac 4f       	sbci	r26, 0xFC	; 252
    2822:	bf 4f       	sbci	r27, 0xFF	; 255
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	ab 83       	std	Y+3, r26	; 0x03
    282a:	bc 83       	std	Y+4, r27	; 0x04
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
    282c:	69 81       	ldd	r22, Y+1	; 0x01
    282e:	7a 81       	ldd	r23, Y+2	; 0x02
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	2d ef       	ldi	r18, 0xFD	; 253
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f ef       	ldi	r20, 0xFF	; 255
    283a:	5f ef       	ldi	r21, 0xFF	; 255
    283c:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__mulsi3>
    2840:	69 83       	std	Y+1, r22	; 0x01
    2842:	7a 83       	std	Y+2, r23	; 0x02
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	9c 83       	std	Y+4, r25	; 0x04
		lValue /= intgCONST4;
    2848:	69 81       	ldd	r22, Y+1	; 0x01
    284a:	7a 81       	ldd	r23, Y+2	; 0x02
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	27 e0       	ldi	r18, 0x07	; 7
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__divmodsi4>
    285c:	c9 01       	movw	r24, r18
    285e:	da 01       	movw	r26, r20
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	ab 83       	std	Y+3, r26	; 0x03
    2866:	bc 83       	std	Y+4, r27	; 0x04

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	ab 81       	ldd	r26, Y+3	; 0x03
    286e:	bc 81       	ldd	r27, Y+4	; 0x04
    2870:	8b 51       	subi	r24, 0x1B	; 27
    2872:	97 47       	sbci	r25, 0x77	; 119
    2874:	ae 4f       	sbci	r26, 0xFE	; 254
    2876:	bf 4f       	sbci	r27, 0xFF	; 255
    2878:	31 f6       	brne	.-116    	; 0x2806 <vCompeteingIntMathTask+0x34>
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    287a:	e1 14       	cp	r14, r1
    287c:	f1 04       	cpc	r15, r1
    287e:	09 f0       	breq	.+2      	; 0x2882 <vCompeteingIntMathTask+0xb0>
    2880:	c2 cf       	rjmp	.-124    	; 0x2806 <vCompeteingIntMathTask+0x34>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	0f 92       	push	r0
				*pxTaskHasExecuted = pdTRUE;
    2888:	f8 01       	movw	r30, r16
    288a:	90 82       	st	Z, r9
			portEXIT_CRITICAL();
    288c:	0f 90       	pop	r0
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	bd cf       	rjmp	.-134    	; 0x280c <vCompeteingIntMathTask+0x3a>

00002892 <xAreIntegerMathsTaskStillRunning>:

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
    2892:	80 91 06 08 	lds	r24, 0x0806
			xReturn = pdFALSE;
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
    2896:	10 92 06 08 	sts	0x0806, r1
    289a:	81 11       	cpse	r24, r1
    289c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return xReturn;
}
    289e:	08 95       	ret

000028a0 <vStartIntegerMathTasks>:
static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	08 2f       	mov	r16, r24
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
    28a8:	89 ee       	ldi	r24, 0xE9	; 233
    28aa:	93 e1       	ldi	r25, 0x13	; 19
    28ac:	6f e3       	ldi	r22, 0x3F	; 63
    28ae:	71 e0       	ldi	r23, 0x01	; 1
    28b0:	45 e5       	ldi	r20, 0x55	; 85
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	26 e0       	ldi	r18, 0x06	; 6
    28b6:	38 e0       	ldi	r19, 0x08	; 8
    28b8:	ee 24       	eor	r14, r14
    28ba:	ff 24       	eor	r15, r15
    28bc:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
	}
}
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	08 95       	ret

000028c8 <xArePollingQueuesStillRunning>:

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
    28c8:	80 91 07 08 	lds	r24, 0x0807
    28cc:	88 23       	and	r24, r24
    28ce:	21 f0       	breq	.+8      	; 0x28d8 <xArePollingQueuesStillRunning+0x10>
    28d0:	80 91 08 08 	lds	r24, 0x0808
    28d4:	81 11       	cpse	r24, r1
    28d6:	81 e0       	ldi	r24, 0x01	; 1
		xReturn = pdTRUE;
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
    28d8:	10 92 07 08 	sts	0x0807, r1
	xPollingProducerCount = pollqINITIAL_VALUE;
    28dc:	10 92 08 08 	sts	0x0808, r1

	return xReturn;
}
    28e0:	08 95       	ret

000028e2 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	18 2f       	mov	r17, r24
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
    28ec:	8a e0       	ldi	r24, 0x0A	; 10
    28ee:	62 e0       	ldi	r22, 0x02	; 2
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xQueueGenericCreate>
    28f6:	90 93 0a 08 	sts	0x080A, r25
    28fa:	80 93 09 08 	sts	0x0809, r24

	if( xPolledQueue != NULL )
    28fe:	89 2b       	or	r24, r25
    2900:	b9 f0       	breq	.+46     	; 0x2930 <vStartPolledQueueTasks+0x4e>
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

		/* Spawn the producer and consumer. */
		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
    2902:	89 ed       	ldi	r24, 0xD9	; 217
    2904:	94 e1       	ldi	r25, 0x14	; 20
    2906:	67 e4       	ldi	r22, 0x47	; 71
    2908:	71 e0       	ldi	r23, 0x01	; 1
    290a:	45 e5       	ldi	r20, 0x55	; 85
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	29 e0       	ldi	r18, 0x09	; 9
    2910:	38 e0       	ldi	r19, 0x08	; 8
    2912:	01 2f       	mov	r16, r17
    2914:	ee 24       	eor	r14, r14
    2916:	ff 24       	eor	r15, r15
    2918:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
    291c:	8d e9       	ldi	r24, 0x9D	; 157
    291e:	94 e1       	ldi	r25, 0x14	; 20
    2920:	6f e4       	ldi	r22, 0x4F	; 79
    2922:	71 e0       	ldi	r23, 0x01	; 1
    2924:	45 e5       	ldi	r20, 0x55	; 85
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	29 e0       	ldi	r18, 0x09	; 9
    292a:	38 e0       	ldi	r19, 0x08	; 8
    292c:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
	}
}
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	08 95       	ret

0000293a <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
    293a:	cf 92       	push	r12
    293c:	df 92       	push	r13
    293e:	ef 92       	push	r14
    2940:	ff 92       	push	r15
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	00 d0       	rcall	.+0      	; 0x294c <vPolledQueueProducer+0x12>
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	7c 01       	movw	r14, r24
uint16_t usValue = ( uint16_t ) 0;
    2952:	1a 82       	std	Y+2, r1	; 0x02
    2954:	19 82       	std	Y+1, r1	; 0x01
    2956:	00 e0       	ldi	r16, 0x00	; 0
    2958:	10 e0       	ldi	r17, 0x00	; 0
	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
    295a:	6e 01       	movw	r12, r28
    295c:	08 94       	sec
    295e:	c1 1c       	adc	r12, r1
    2960:	d1 1c       	adc	r13, r1
    2962:	1f c0       	rjmp	.+62     	; 0x29a2 <vPolledQueueProducer+0x68>
    2964:	f7 01       	movw	r30, r14
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	b6 01       	movw	r22, r12
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <xQueueGenericSend>
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	11 f0       	breq	.+4      	; 0x297e <vPolledQueueProducer+0x44>
    297a:	01 e0       	ldi	r16, 0x01	; 1
    297c:	11 c0       	rjmp	.+34     	; 0x29a0 <vPolledQueueProducer+0x66>
				has been an error. */
				xError = pdTRUE;
			}
			else
			{
				if( xError == pdFALSE )
    297e:	00 23       	and	r16, r16
    2980:	51 f4       	brne	.+20     	; 0x2996 <vPolledQueueProducer+0x5c>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	0f 92       	push	r0
						xPollingProducerCount++;
    2988:	80 91 08 08 	lds	r24, 0x0808
    298c:	8f 5f       	subi	r24, 0xFF	; 255
    298e:	80 93 08 08 	sts	0x0808, r24
					portEXIT_CRITICAL();
    2992:	0f 90       	pop	r0
    2994:	0f be       	out	0x3f, r0	; 63
				}

				/* Update the value we are going to post next time around. */
				usValue++;
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	01 96       	adiw	r24, 0x01	; 1
    299c:	9a 83       	std	Y+2, r25	; 0x02
    299e:	89 83       	std	Y+1, r24	; 0x01
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
    29a0:	1f 5f       	subi	r17, 0xFF	; 255
    29a2:	13 30       	cpi	r17, 0x03	; 3
    29a4:	fc f2       	brlt	.-66     	; 0x2964 <vPolledQueueProducer+0x2a>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
    29a6:	83 e0       	ldi	r24, 0x03	; 3
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 22 09 	call	0x1244	; 0x1244 <vTaskDelay>
    29ae:	10 e0       	ldi	r17, 0x00	; 0
    29b0:	d9 cf       	rjmp	.-78     	; 0x2964 <vPolledQueueProducer+0x2a>

000029b2 <vPolledQueueConsumer>:
	}
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
    29b2:	9f 92       	push	r9
    29b4:	af 92       	push	r10
    29b6:	bf 92       	push	r11
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <vPolledQueueConsumer+0x18>
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	98 2e       	mov	r9, r24
    29d0:	c9 2e       	mov	r12, r25
    29d2:	dd 24       	eor	r13, r13
    29d4:	ee 24       	eor	r14, r14
    29d6:	ff 24       	eor	r15, r15
	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
    29d8:	5e 01       	movw	r10, r28
    29da:	08 94       	sec
    29dc:	a1 1c       	adc	r10, r1
    29de:	b1 1c       	adc	r11, r1
    29e0:	23 c0       	rjmp	.+70     	; 0x2a28 <vPolledQueueConsumer+0x76>
    29e2:	f8 01       	movw	r30, r16
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	b5 01       	movw	r22, r10
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <xQueueGenericReceive>
    29f4:	81 30       	cpi	r24, 0x01	; 1
    29f6:	c1 f4       	brne	.+48     	; 0x2a28 <vPolledQueueConsumer+0x76>
			{
				if( usData != usExpectedValue )
    29f8:	29 81       	ldd	r18, Y+1	; 0x01
    29fa:	3a 81       	ldd	r19, Y+2	; 0x02
    29fc:	2e 15       	cp	r18, r14
    29fe:	3f 05       	cpc	r19, r15
    2a00:	19 f0       	breq	.+6      	; 0x2a08 <vPolledQueueConsumer+0x56>
    2a02:	dd 24       	eor	r13, r13
    2a04:	d3 94       	inc	r13
    2a06:	0c c0       	rjmp	.+24     	; 0x2a20 <vPolledQueueConsumer+0x6e>
					value should again be correct. */
					usExpectedValue = usData;
				}
				else
				{
					if( xError == pdFALSE )
    2a08:	dd 20       	and	r13, r13
    2a0a:	51 f4       	brne	.+20     	; 0x2a20 <vPolledQueueConsumer+0x6e>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	0f 92       	push	r0
							xPollingConsumerCount++;
    2a12:	80 91 07 08 	lds	r24, 0x0807
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	80 93 07 08 	sts	0x0807, r24
						portEXIT_CRITICAL();
    2a1c:	0f 90       	pop	r0
    2a1e:	0f be       	out	0x3f, r0	; 63
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
    2a20:	79 01       	movw	r14, r18
    2a22:	08 94       	sec
    2a24:	e1 1c       	adc	r14, r1
    2a26:	f1 1c       	adc	r15, r1
BaseType_t xError = pdFALSE;

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
    2a28:	09 2d       	mov	r16, r9
    2a2a:	1c 2d       	mov	r17, r12
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	0e 94 47 0b 	call	0x168e	; 0x168e <uxQueueMessagesWaiting>
    2a36:	88 23       	and	r24, r24
    2a38:	a1 f6       	brne	.-88     	; 0x29e2 <vPolledQueueConsumer+0x30>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
    2a3a:	8f ee       	ldi	r24, 0xEF	; 239
    2a3c:	9f ef       	ldi	r25, 0xFF	; 255
    2a3e:	0e 94 22 09 	call	0x1244	; 0x1244 <vTaskDelay>
    2a42:	f2 cf       	rjmp	.-28     	; 0x2a28 <vPolledQueueConsumer+0x76>

00002a44 <xAreComTestTasksStillRunning>:
BaseType_t xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
    2a44:	80 91 0b 08 	lds	r24, 0x080B
		xReturn = pdTRUE;
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
    2a48:	10 92 0b 08 	sts	0x080B, r1
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	81 e0       	ldi	r24, 0x01	; 1

	return xReturn;
}
    2a50:	08 95       	ret

00002a52 <vAltStartComTestTasks>:
static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;

/*-----------------------------------------------------------*/

void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
{
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	18 2f       	mov	r17, r24
	/* Initialise the com port then spawn the Rx and Tx tasks. */
	uxBaseLED = uxLED;
    2a5c:	20 93 0c 08 	sts	0x080C, r18
	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
    2a60:	cb 01       	movw	r24, r22
    2a62:	ba 01       	movw	r22, r20
    2a64:	48 e1       	ldi	r20, 0x18	; 24
    2a66:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xSerialPortInitMinimal>

	/* The Tx task is spawned with a lower priority than the Rx task. */
	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
    2a6a:	01 2f       	mov	r16, r17
    2a6c:	01 50       	subi	r16, 0x01	; 1
    2a6e:	86 e9       	ldi	r24, 0x96	; 150
    2a70:	95 e1       	ldi	r25, 0x15	; 21
    2a72:	67 e5       	ldi	r22, 0x57	; 87
    2a74:	71 e0       	ldi	r23, 0x01	; 1
    2a76:	45 e5       	ldi	r20, 0x55	; 85
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	ee 24       	eor	r14, r14
    2a80:	ff 24       	eor	r15, r15
    2a82:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
    2a86:	83 e5       	ldi	r24, 0x53	; 83
    2a88:	95 e1       	ldi	r25, 0x15	; 21
    2a8a:	6d e5       	ldi	r22, 0x5D	; 93
    2a8c:	71 e0       	ldi	r23, 0x01	; 1
    2a8e:	45 e5       	ldi	r20, 0x55	; 85
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	01 2f       	mov	r16, r17
    2a98:	0e 94 26 0a 	call	0x144c	; 0x144c <xTaskCreate>
}
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	08 95       	ret

00002aa6 <vComRxTask>:
	}
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
    2aa6:	ef 92       	push	r14
    2aa8:	ff 92       	push	r15
    2aaa:	0f 93       	push	r16
    2aac:	1f 93       	push	r17
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	0f 92       	push	r0
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	00 e0       	ldi	r16, 0x00	; 0
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
    2aba:	7e 01       	movw	r14, r28
    2abc:	08 94       	sec
    2abe:	e1 1c       	adc	r14, r1
    2ac0:	f1 1c       	adc	r15, r1
	}
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
    2ac2:	11 e4       	ldi	r17, 0x41	; 65
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	b7 01       	movw	r22, r14
    2aca:	4f ef       	ldi	r20, 0xFF	; 255
    2acc:	5f ef       	ldi	r21, 0xFF	; 255
    2ace:	0e 94 ee 01 	call	0x3dc	; 0x3dc <xSerialGetChar>
    2ad2:	88 23       	and	r24, r24
    2ad4:	51 f0       	breq	.+20     	; 0x2aea <vComRxTask+0x44>
			{
				/* Was this the byte we were expecting?  If so, toggle the LED,
				otherwise we are out on sync and should break out of the loop
				until the expected character sequence is about to restart. */
				if( cByteRxed == cExpectedByte )
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	81 17       	cp	r24, r17
    2ada:	11 f0       	breq	.+4      	; 0x2ae0 <vComRxTask+0x3a>
    2adc:	11 e0       	ldi	r17, 0x01	; 1
    2ade:	09 c0       	rjmp	.+18     	; 0x2af2 <vComRxTask+0x4c>
				{
					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
    2ae0:	80 91 0c 08 	lds	r24, 0x080C
    2ae4:	8f 5f       	subi	r24, 0xFF	; 255
    2ae6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <vParTestToggleLED>

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
    2aea:	1f 5f       	subi	r17, 0xFF	; 255
    2aec:	19 35       	cpi	r17, 0x59	; 89
    2aee:	51 f7       	brne	.-44     	; 0x2ac4 <vComRxTask+0x1e>
    2af0:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
    2af2:	80 91 0c 08 	lds	r24, 0x080C
    2af6:	8f 5f       	subi	r24, 0xFF	; 255
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	0e 94 1b 01 	call	0x236	; 0x236 <vParTestSetLED>

		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
    2afe:	11 30       	cpi	r17, 0x01	; 1
    2b00:	69 f4       	brne	.+26     	; 0x2b1c <vComRxTask+0x76>
    2b02:	07 c0       	rjmp	.+14     	; 0x2b12 <vComRxTask+0x6c>
		{
			while( cByteRxed != comLAST_BYTE )
			{
				/* Block until the next char is available. */
				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	b7 01       	movw	r22, r14
    2b0a:	4f ef       	ldi	r20, 0xFF	; 255
    2b0c:	5f ef       	ldi	r21, 0xFF	; 255
    2b0e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <xSerialGetChar>
		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
		{
			while( cByteRxed != comLAST_BYTE )
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	88 35       	cpi	r24, 0x58	; 88
    2b16:	b1 f7       	brne	.-20     	; 0x2b04 <vComRxTask+0x5e>

			/* Note that an error occurred which caused us to have to resync.
			We use this to stop incrementing the loop counter so
			sAreComTestTasksStillRunning() will return false - indicating an
			error. */
			xErrorOccurred++;
    2b18:	0f 5f       	subi	r16, 0xFF	; 255
    2b1a:	d3 cf       	rjmp	.-90     	; 0x2ac2 <vComRxTask+0x1c>
			/* We have now resynced with the Tx task and can continue. */
			xResyncRequired = pdFALSE;
		}
		else
		{
			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
    2b1c:	02 30       	cpi	r16, 0x02	; 2
    2b1e:	8c f6       	brge	.-94     	; 0x2ac2 <vComRxTask+0x1c>
				occurring (i.e. an unexpected character being received) will
				prevent this counter being incremented for the rest of the
				execution.   Don't worry about mutual exclusion on this
				variable - it doesn't really matter as we just want it
				to change. */
				uxRxLoops++;
    2b20:	80 91 0b 08 	lds	r24, 0x080B
    2b24:	8f 5f       	subi	r24, 0xFF	; 255
    2b26:	80 93 0b 08 	sts	0x080B, r24
    2b2a:	cb cf       	rjmp	.-106    	; 0x2ac2 <vComRxTask+0x1c>

00002b2c <vComTxTask>:
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComTxTask, pvParameters )
{
    2b2c:	1f 93       	push	r17
    2b2e:	11 e4       	ldi	r17, 0x41	; 65
    2b30:	0e c0       	rjmp	.+28     	; 0x2b4e <vComTxTask+0x22>
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
		{
			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	61 2f       	mov	r22, r17
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <xSerialPutChar>
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	21 f4       	brne	.+8      	; 0x2b4c <vComTxTask+0x20>
			{
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
    2b44:	80 91 0c 08 	lds	r24, 0x080C
    2b48:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <vParTestToggleLED>

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
    2b4c:	1f 5f       	subi	r17, 0xFF	; 255
    2b4e:	19 35       	cpi	r17, 0x59	; 89
    2b50:	84 f3       	brlt	.-32     	; 0x2b32 <vComTxTask+0x6>
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
    2b52:	80 91 0c 08 	lds	r24, 0x080C
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	0e 94 1b 01 	call	0x236	; 0x236 <vParTestSetLED>

		/* We have posted all the characters in the string - wait before
		re-sending.  Wait a pseudo-random time as this will provide a better
		test. */
		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
    2b5c:	0e 94 21 04 	call	0x842	; 0x842 <xTaskGetTickCount>

		/* Make sure we don't wait too long... */
		xTimeToWait %= comTX_MAX_BLOCK_TIME;
    2b60:	03 96       	adiw	r24, 0x03	; 3
    2b62:	66 e9       	ldi	r22, 0x96	; 150
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__udivmodhi4>

		/* ...but we do want to wait. */
		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
    2b6a:	82 33       	cpi	r24, 0x32	; 50
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	10 f4       	brcc	.+4      	; 0x2b74 <vComTxTask+0x48>
    2b70:	82 e3       	ldi	r24, 0x32	; 50
    2b72:	90 e0       	ldi	r25, 0x00	; 0
		{
			xTimeToWait = comTX_MIN_BLOCK_TIME;
		}

		vTaskDelay( xTimeToWait );
    2b74:	0e 94 22 09 	call	0x1244	; 0x1244 <vTaskDelay>
    2b78:	11 e4       	ldi	r17, 0x41	; 65
    2b7a:	db cf       	rjmp	.-74     	; 0x2b32 <vComTxTask+0x6>

00002b7c <__mulsi3>:
    2b7c:	62 9f       	mul	r22, r18
    2b7e:	d0 01       	movw	r26, r0
    2b80:	73 9f       	mul	r23, r19
    2b82:	f0 01       	movw	r30, r0
    2b84:	82 9f       	mul	r24, r18
    2b86:	e0 0d       	add	r30, r0
    2b88:	f1 1d       	adc	r31, r1
    2b8a:	64 9f       	mul	r22, r20
    2b8c:	e0 0d       	add	r30, r0
    2b8e:	f1 1d       	adc	r31, r1
    2b90:	92 9f       	mul	r25, r18
    2b92:	f0 0d       	add	r31, r0
    2b94:	83 9f       	mul	r24, r19
    2b96:	f0 0d       	add	r31, r0
    2b98:	74 9f       	mul	r23, r20
    2b9a:	f0 0d       	add	r31, r0
    2b9c:	65 9f       	mul	r22, r21
    2b9e:	f0 0d       	add	r31, r0
    2ba0:	99 27       	eor	r25, r25
    2ba2:	72 9f       	mul	r23, r18
    2ba4:	b0 0d       	add	r27, r0
    2ba6:	e1 1d       	adc	r30, r1
    2ba8:	f9 1f       	adc	r31, r25
    2baa:	63 9f       	mul	r22, r19
    2bac:	b0 0d       	add	r27, r0
    2bae:	e1 1d       	adc	r30, r1
    2bb0:	f9 1f       	adc	r31, r25
    2bb2:	bd 01       	movw	r22, r26
    2bb4:	cf 01       	movw	r24, r30
    2bb6:	11 24       	eor	r1, r1
    2bb8:	08 95       	ret

00002bba <__udivmodhi4>:
    2bba:	aa 1b       	sub	r26, r26
    2bbc:	bb 1b       	sub	r27, r27
    2bbe:	51 e1       	ldi	r21, 0x11	; 17
    2bc0:	07 c0       	rjmp	.+14     	; 0x2bd0 <__udivmodhi4_ep>

00002bc2 <__udivmodhi4_loop>:
    2bc2:	aa 1f       	adc	r26, r26
    2bc4:	bb 1f       	adc	r27, r27
    2bc6:	a6 17       	cp	r26, r22
    2bc8:	b7 07       	cpc	r27, r23
    2bca:	10 f0       	brcs	.+4      	; 0x2bd0 <__udivmodhi4_ep>
    2bcc:	a6 1b       	sub	r26, r22
    2bce:	b7 0b       	sbc	r27, r23

00002bd0 <__udivmodhi4_ep>:
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	5a 95       	dec	r21
    2bd6:	a9 f7       	brne	.-22     	; 0x2bc2 <__udivmodhi4_loop>
    2bd8:	80 95       	com	r24
    2bda:	90 95       	com	r25
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	08 95       	ret

00002be2 <__divmodhi4>:
    2be2:	97 fb       	bst	r25, 7
    2be4:	09 2e       	mov	r0, r25
    2be6:	07 26       	eor	r0, r23
    2be8:	0a d0       	rcall	.+20     	; 0x2bfe <__divmodhi4_neg1>
    2bea:	77 fd       	sbrc	r23, 7
    2bec:	04 d0       	rcall	.+8      	; 0x2bf6 <__divmodhi4_neg2>
    2bee:	e5 df       	rcall	.-54     	; 0x2bba <__udivmodhi4>
    2bf0:	06 d0       	rcall	.+12     	; 0x2bfe <__divmodhi4_neg1>
    2bf2:	00 20       	and	r0, r0
    2bf4:	1a f4       	brpl	.+6      	; 0x2bfc <__divmodhi4_exit>

00002bf6 <__divmodhi4_neg2>:
    2bf6:	70 95       	com	r23
    2bf8:	61 95       	neg	r22
    2bfa:	7f 4f       	sbci	r23, 0xFF	; 255

00002bfc <__divmodhi4_exit>:
    2bfc:	08 95       	ret

00002bfe <__divmodhi4_neg1>:
    2bfe:	f6 f7       	brtc	.-4      	; 0x2bfc <__divmodhi4_exit>
    2c00:	90 95       	com	r25
    2c02:	81 95       	neg	r24
    2c04:	9f 4f       	sbci	r25, 0xFF	; 255
    2c06:	08 95       	ret

00002c08 <__udivmodsi4>:
    2c08:	a1 e2       	ldi	r26, 0x21	; 33
    2c0a:	1a 2e       	mov	r1, r26
    2c0c:	aa 1b       	sub	r26, r26
    2c0e:	bb 1b       	sub	r27, r27
    2c10:	fd 01       	movw	r30, r26
    2c12:	0d c0       	rjmp	.+26     	; 0x2c2e <__udivmodsi4_ep>

00002c14 <__udivmodsi4_loop>:
    2c14:	aa 1f       	adc	r26, r26
    2c16:	bb 1f       	adc	r27, r27
    2c18:	ee 1f       	adc	r30, r30
    2c1a:	ff 1f       	adc	r31, r31
    2c1c:	a2 17       	cp	r26, r18
    2c1e:	b3 07       	cpc	r27, r19
    2c20:	e4 07       	cpc	r30, r20
    2c22:	f5 07       	cpc	r31, r21
    2c24:	20 f0       	brcs	.+8      	; 0x2c2e <__udivmodsi4_ep>
    2c26:	a2 1b       	sub	r26, r18
    2c28:	b3 0b       	sbc	r27, r19
    2c2a:	e4 0b       	sbc	r30, r20
    2c2c:	f5 0b       	sbc	r31, r21

00002c2e <__udivmodsi4_ep>:
    2c2e:	66 1f       	adc	r22, r22
    2c30:	77 1f       	adc	r23, r23
    2c32:	88 1f       	adc	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	1a 94       	dec	r1
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <__udivmodsi4_loop>
    2c3a:	60 95       	com	r22
    2c3c:	70 95       	com	r23
    2c3e:	80 95       	com	r24
    2c40:	90 95       	com	r25
    2c42:	9b 01       	movw	r18, r22
    2c44:	ac 01       	movw	r20, r24
    2c46:	bd 01       	movw	r22, r26
    2c48:	cf 01       	movw	r24, r30
    2c4a:	08 95       	ret

00002c4c <__divmodsi4>:
    2c4c:	97 fb       	bst	r25, 7
    2c4e:	09 2e       	mov	r0, r25
    2c50:	05 26       	eor	r0, r21
    2c52:	0e d0       	rcall	.+28     	; 0x2c70 <__divmodsi4_neg1>
    2c54:	57 fd       	sbrc	r21, 7
    2c56:	04 d0       	rcall	.+8      	; 0x2c60 <__divmodsi4_neg2>
    2c58:	d7 df       	rcall	.-82     	; 0x2c08 <__udivmodsi4>
    2c5a:	0a d0       	rcall	.+20     	; 0x2c70 <__divmodsi4_neg1>
    2c5c:	00 1c       	adc	r0, r0
    2c5e:	38 f4       	brcc	.+14     	; 0x2c6e <__divmodsi4_exit>

00002c60 <__divmodsi4_neg2>:
    2c60:	50 95       	com	r21
    2c62:	40 95       	com	r20
    2c64:	30 95       	com	r19
    2c66:	21 95       	neg	r18
    2c68:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6a:	4f 4f       	sbci	r20, 0xFF	; 255
    2c6c:	5f 4f       	sbci	r21, 0xFF	; 255

00002c6e <__divmodsi4_exit>:
    2c6e:	08 95       	ret

00002c70 <__divmodsi4_neg1>:
    2c70:	f6 f7       	brtc	.-4      	; 0x2c6e <__divmodsi4_exit>
    2c72:	90 95       	com	r25
    2c74:	80 95       	com	r24
    2c76:	70 95       	com	r23
    2c78:	61 95       	neg	r22
    2c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c80:	08 95       	ret

00002c82 <memcpy>:
    2c82:	fb 01       	movw	r30, r22
    2c84:	dc 01       	movw	r26, r24
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <memcpy+0xa>
    2c88:	01 90       	ld	r0, Z+
    2c8a:	0d 92       	st	X+, r0
    2c8c:	41 50       	subi	r20, 0x01	; 1
    2c8e:	50 40       	sbci	r21, 0x00	; 0
    2c90:	d8 f7       	brcc	.-10     	; 0x2c88 <memcpy+0x6>
    2c92:	08 95       	ret

00002c94 <sprintf>:
    2c94:	ae e0       	ldi	r26, 0x0E	; 14
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	e0 e5       	ldi	r30, 0x50	; 80
    2c9a:	f6 e1       	ldi	r31, 0x16	; 22
    2c9c:	0c 94 17 19 	jmp	0x322e	; 0x322e <__prologue_saves__+0x1c>
    2ca0:	0d 89       	ldd	r16, Y+21	; 0x15
    2ca2:	1e 89       	ldd	r17, Y+22	; 0x16
    2ca4:	86 e0       	ldi	r24, 0x06	; 6
    2ca6:	8c 83       	std	Y+4, r24	; 0x04
    2ca8:	1a 83       	std	Y+2, r17	; 0x02
    2caa:	09 83       	std	Y+1, r16	; 0x01
    2cac:	8f ef       	ldi	r24, 0xFF	; 255
    2cae:	9f e7       	ldi	r25, 0x7F	; 127
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	9e 01       	movw	r18, r28
    2cb6:	27 5e       	subi	r18, 0xE7	; 231
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	ce 01       	movw	r24, r28
    2cbc:	01 96       	adiw	r24, 0x01	; 1
    2cbe:	6f 89       	ldd	r22, Y+23	; 0x17
    2cc0:	78 8d       	ldd	r23, Y+24	; 0x18
    2cc2:	a9 01       	movw	r20, r18
    2cc4:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <vfprintf>
    2cc8:	2f 81       	ldd	r18, Y+7	; 0x07
    2cca:	38 85       	ldd	r19, Y+8	; 0x08
    2ccc:	02 0f       	add	r16, r18
    2cce:	13 1f       	adc	r17, r19
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	10 82       	st	Z, r1
    2cd4:	2e 96       	adiw	r28, 0x0e	; 14
    2cd6:	e4 e0       	ldi	r30, 0x04	; 4
    2cd8:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__epilogue_restores__+0x1c>

00002cdc <vfprintf>:
    2cdc:	ab e0       	ldi	r26, 0x0B	; 11
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	e4 e7       	ldi	r30, 0x74	; 116
    2ce2:	f6 e1       	ldi	r31, 0x16	; 22
    2ce4:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__>
    2ce8:	3c 01       	movw	r6, r24
    2cea:	2b 01       	movw	r4, r22
    2cec:	5a 01       	movw	r10, r20
    2cee:	fc 01       	movw	r30, r24
    2cf0:	17 82       	std	Z+7, r1	; 0x07
    2cf2:	16 82       	std	Z+6, r1	; 0x06
    2cf4:	83 81       	ldd	r24, Z+3	; 0x03
    2cf6:	81 fd       	sbrc	r24, 1
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <vfprintf+0x24>
    2cfa:	6f ef       	ldi	r22, 0xFF	; 255
    2cfc:	7f ef       	ldi	r23, 0xFF	; 255
    2cfe:	c6 c1       	rjmp	.+908    	; 0x308c <vfprintf+0x3b0>
    2d00:	9a e0       	ldi	r25, 0x0A	; 10
    2d02:	89 2e       	mov	r8, r25
    2d04:	1e 01       	movw	r2, r28
    2d06:	08 94       	sec
    2d08:	21 1c       	adc	r2, r1
    2d0a:	31 1c       	adc	r3, r1
    2d0c:	f3 01       	movw	r30, r6
    2d0e:	23 81       	ldd	r18, Z+3	; 0x03
    2d10:	f2 01       	movw	r30, r4
    2d12:	23 fd       	sbrc	r18, 3
    2d14:	85 91       	lpm	r24, Z+
    2d16:	23 ff       	sbrs	r18, 3
    2d18:	81 91       	ld	r24, Z+
    2d1a:	2f 01       	movw	r4, r30
    2d1c:	88 23       	and	r24, r24
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <vfprintf+0x46>
    2d20:	b2 c1       	rjmp	.+868    	; 0x3086 <vfprintf+0x3aa>
    2d22:	85 32       	cpi	r24, 0x25	; 37
    2d24:	39 f4       	brne	.+14     	; 0x2d34 <vfprintf+0x58>
    2d26:	23 fd       	sbrc	r18, 3
    2d28:	85 91       	lpm	r24, Z+
    2d2a:	23 ff       	sbrs	r18, 3
    2d2c:	81 91       	ld	r24, Z+
    2d2e:	2f 01       	movw	r4, r30
    2d30:	85 32       	cpi	r24, 0x25	; 37
    2d32:	29 f4       	brne	.+10     	; 0x2d3e <vfprintf+0x62>
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	b3 01       	movw	r22, r6
    2d38:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    2d3c:	e7 cf       	rjmp	.-50     	; 0x2d0c <vfprintf+0x30>
    2d3e:	98 2f       	mov	r25, r24
    2d40:	ff 24       	eor	r15, r15
    2d42:	ee 24       	eor	r14, r14
    2d44:	99 24       	eor	r9, r9
    2d46:	ff e1       	ldi	r31, 0x1F	; 31
    2d48:	ff 15       	cp	r31, r15
    2d4a:	d0 f0       	brcs	.+52     	; 0x2d80 <vfprintf+0xa4>
    2d4c:	9b 32       	cpi	r25, 0x2B	; 43
    2d4e:	69 f0       	breq	.+26     	; 0x2d6a <vfprintf+0x8e>
    2d50:	9c 32       	cpi	r25, 0x2C	; 44
    2d52:	28 f4       	brcc	.+10     	; 0x2d5e <vfprintf+0x82>
    2d54:	90 32       	cpi	r25, 0x20	; 32
    2d56:	59 f0       	breq	.+22     	; 0x2d6e <vfprintf+0x92>
    2d58:	93 32       	cpi	r25, 0x23	; 35
    2d5a:	91 f4       	brne	.+36     	; 0x2d80 <vfprintf+0xa4>
    2d5c:	0e c0       	rjmp	.+28     	; 0x2d7a <vfprintf+0x9e>
    2d5e:	9d 32       	cpi	r25, 0x2D	; 45
    2d60:	49 f0       	breq	.+18     	; 0x2d74 <vfprintf+0x98>
    2d62:	90 33       	cpi	r25, 0x30	; 48
    2d64:	69 f4       	brne	.+26     	; 0x2d80 <vfprintf+0xa4>
    2d66:	41 e0       	ldi	r20, 0x01	; 1
    2d68:	24 c0       	rjmp	.+72     	; 0x2db2 <vfprintf+0xd6>
    2d6a:	52 e0       	ldi	r21, 0x02	; 2
    2d6c:	f5 2a       	or	r15, r21
    2d6e:	84 e0       	ldi	r24, 0x04	; 4
    2d70:	f8 2a       	or	r15, r24
    2d72:	28 c0       	rjmp	.+80     	; 0x2dc4 <vfprintf+0xe8>
    2d74:	98 e0       	ldi	r25, 0x08	; 8
    2d76:	f9 2a       	or	r15, r25
    2d78:	25 c0       	rjmp	.+74     	; 0x2dc4 <vfprintf+0xe8>
    2d7a:	e0 e1       	ldi	r30, 0x10	; 16
    2d7c:	fe 2a       	or	r15, r30
    2d7e:	22 c0       	rjmp	.+68     	; 0x2dc4 <vfprintf+0xe8>
    2d80:	f7 fc       	sbrc	r15, 7
    2d82:	29 c0       	rjmp	.+82     	; 0x2dd6 <vfprintf+0xfa>
    2d84:	89 2f       	mov	r24, r25
    2d86:	80 53       	subi	r24, 0x30	; 48
    2d88:	8a 30       	cpi	r24, 0x0A	; 10
    2d8a:	70 f4       	brcc	.+28     	; 0x2da8 <vfprintf+0xcc>
    2d8c:	f6 fe       	sbrs	r15, 6
    2d8e:	05 c0       	rjmp	.+10     	; 0x2d9a <vfprintf+0xbe>
    2d90:	98 9c       	mul	r9, r8
    2d92:	90 2c       	mov	r9, r0
    2d94:	11 24       	eor	r1, r1
    2d96:	98 0e       	add	r9, r24
    2d98:	15 c0       	rjmp	.+42     	; 0x2dc4 <vfprintf+0xe8>
    2d9a:	e8 9c       	mul	r14, r8
    2d9c:	e0 2c       	mov	r14, r0
    2d9e:	11 24       	eor	r1, r1
    2da0:	e8 0e       	add	r14, r24
    2da2:	f0 e2       	ldi	r31, 0x20	; 32
    2da4:	ff 2a       	or	r15, r31
    2da6:	0e c0       	rjmp	.+28     	; 0x2dc4 <vfprintf+0xe8>
    2da8:	9e 32       	cpi	r25, 0x2E	; 46
    2daa:	29 f4       	brne	.+10     	; 0x2db6 <vfprintf+0xda>
    2dac:	f6 fc       	sbrc	r15, 6
    2dae:	6b c1       	rjmp	.+726    	; 0x3086 <vfprintf+0x3aa>
    2db0:	40 e4       	ldi	r20, 0x40	; 64
    2db2:	f4 2a       	or	r15, r20
    2db4:	07 c0       	rjmp	.+14     	; 0x2dc4 <vfprintf+0xe8>
    2db6:	9c 36       	cpi	r25, 0x6C	; 108
    2db8:	19 f4       	brne	.+6      	; 0x2dc0 <vfprintf+0xe4>
    2dba:	50 e8       	ldi	r21, 0x80	; 128
    2dbc:	f5 2a       	or	r15, r21
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <vfprintf+0xe8>
    2dc0:	98 36       	cpi	r25, 0x68	; 104
    2dc2:	49 f4       	brne	.+18     	; 0x2dd6 <vfprintf+0xfa>
    2dc4:	f2 01       	movw	r30, r4
    2dc6:	23 fd       	sbrc	r18, 3
    2dc8:	95 91       	lpm	r25, Z+
    2dca:	23 ff       	sbrs	r18, 3
    2dcc:	91 91       	ld	r25, Z+
    2dce:	2f 01       	movw	r4, r30
    2dd0:	99 23       	and	r25, r25
    2dd2:	09 f0       	breq	.+2      	; 0x2dd6 <vfprintf+0xfa>
    2dd4:	b8 cf       	rjmp	.-144    	; 0x2d46 <vfprintf+0x6a>
    2dd6:	89 2f       	mov	r24, r25
    2dd8:	85 54       	subi	r24, 0x45	; 69
    2dda:	83 30       	cpi	r24, 0x03	; 3
    2ddc:	18 f0       	brcs	.+6      	; 0x2de4 <vfprintf+0x108>
    2dde:	80 52       	subi	r24, 0x20	; 32
    2de0:	83 30       	cpi	r24, 0x03	; 3
    2de2:	38 f4       	brcc	.+14     	; 0x2df2 <vfprintf+0x116>
    2de4:	44 e0       	ldi	r20, 0x04	; 4
    2de6:	50 e0       	ldi	r21, 0x00	; 0
    2de8:	a4 0e       	add	r10, r20
    2dea:	b5 1e       	adc	r11, r21
    2dec:	5f e3       	ldi	r21, 0x3F	; 63
    2dee:	59 83       	std	Y+1, r21	; 0x01
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <vfprintf+0x134>
    2df2:	93 36       	cpi	r25, 0x63	; 99
    2df4:	31 f0       	breq	.+12     	; 0x2e02 <vfprintf+0x126>
    2df6:	93 37       	cpi	r25, 0x73	; 115
    2df8:	79 f0       	breq	.+30     	; 0x2e18 <vfprintf+0x13c>
    2dfa:	93 35       	cpi	r25, 0x53	; 83
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <vfprintf+0x124>
    2dfe:	56 c0       	rjmp	.+172    	; 0x2eac <vfprintf+0x1d0>
    2e00:	20 c0       	rjmp	.+64     	; 0x2e42 <vfprintf+0x166>
    2e02:	f5 01       	movw	r30, r10
    2e04:	80 81       	ld	r24, Z
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	42 e0       	ldi	r20, 0x02	; 2
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	a4 0e       	add	r10, r20
    2e0e:	b5 1e       	adc	r11, r21
    2e10:	61 01       	movw	r12, r2
    2e12:	01 e0       	ldi	r16, 0x01	; 1
    2e14:	10 e0       	ldi	r17, 0x00	; 0
    2e16:	12 c0       	rjmp	.+36     	; 0x2e3c <vfprintf+0x160>
    2e18:	f5 01       	movw	r30, r10
    2e1a:	c0 80       	ld	r12, Z
    2e1c:	d1 80       	ldd	r13, Z+1	; 0x01
    2e1e:	f6 fc       	sbrc	r15, 6
    2e20:	03 c0       	rjmp	.+6      	; 0x2e28 <vfprintf+0x14c>
    2e22:	6f ef       	ldi	r22, 0xFF	; 255
    2e24:	7f ef       	ldi	r23, 0xFF	; 255
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <vfprintf+0x150>
    2e28:	69 2d       	mov	r22, r9
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	42 e0       	ldi	r20, 0x02	; 2
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	a4 0e       	add	r10, r20
    2e32:	b5 1e       	adc	r11, r21
    2e34:	c6 01       	movw	r24, r12
    2e36:	0e 94 74 18 	call	0x30e8	; 0x30e8 <strnlen>
    2e3a:	8c 01       	movw	r16, r24
    2e3c:	5f e7       	ldi	r21, 0x7F	; 127
    2e3e:	f5 22       	and	r15, r21
    2e40:	14 c0       	rjmp	.+40     	; 0x2e6a <vfprintf+0x18e>
    2e42:	f5 01       	movw	r30, r10
    2e44:	c0 80       	ld	r12, Z
    2e46:	d1 80       	ldd	r13, Z+1	; 0x01
    2e48:	f6 fc       	sbrc	r15, 6
    2e4a:	03 c0       	rjmp	.+6      	; 0x2e52 <vfprintf+0x176>
    2e4c:	6f ef       	ldi	r22, 0xFF	; 255
    2e4e:	7f ef       	ldi	r23, 0xFF	; 255
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <vfprintf+0x17a>
    2e52:	69 2d       	mov	r22, r9
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	42 e0       	ldi	r20, 0x02	; 2
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	a4 0e       	add	r10, r20
    2e5c:	b5 1e       	adc	r11, r21
    2e5e:	c6 01       	movw	r24, r12
    2e60:	0e 94 69 18 	call	0x30d2	; 0x30d2 <strnlen_P>
    2e64:	8c 01       	movw	r16, r24
    2e66:	50 e8       	ldi	r21, 0x80	; 128
    2e68:	f5 2a       	or	r15, r21
    2e6a:	f3 fe       	sbrs	r15, 3
    2e6c:	07 c0       	rjmp	.+14     	; 0x2e7c <vfprintf+0x1a0>
    2e6e:	1a c0       	rjmp	.+52     	; 0x2ea4 <vfprintf+0x1c8>
    2e70:	80 e2       	ldi	r24, 0x20	; 32
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	b3 01       	movw	r22, r6
    2e76:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    2e7a:	ea 94       	dec	r14
    2e7c:	8e 2d       	mov	r24, r14
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	08 17       	cp	r16, r24
    2e82:	19 07       	cpc	r17, r25
    2e84:	a8 f3       	brcs	.-22     	; 0x2e70 <vfprintf+0x194>
    2e86:	0e c0       	rjmp	.+28     	; 0x2ea4 <vfprintf+0x1c8>
    2e88:	f6 01       	movw	r30, r12
    2e8a:	f7 fc       	sbrc	r15, 7
    2e8c:	85 91       	lpm	r24, Z+
    2e8e:	f7 fe       	sbrs	r15, 7
    2e90:	81 91       	ld	r24, Z+
    2e92:	6f 01       	movw	r12, r30
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	b3 01       	movw	r22, r6
    2e98:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    2e9c:	e1 10       	cpse	r14, r1
    2e9e:	ea 94       	dec	r14
    2ea0:	01 50       	subi	r16, 0x01	; 1
    2ea2:	10 40       	sbci	r17, 0x00	; 0
    2ea4:	01 15       	cp	r16, r1
    2ea6:	11 05       	cpc	r17, r1
    2ea8:	79 f7       	brne	.-34     	; 0x2e88 <vfprintf+0x1ac>
    2eaa:	ea c0       	rjmp	.+468    	; 0x3080 <vfprintf+0x3a4>
    2eac:	94 36       	cpi	r25, 0x64	; 100
    2eae:	11 f0       	breq	.+4      	; 0x2eb4 <vfprintf+0x1d8>
    2eb0:	99 36       	cpi	r25, 0x69	; 105
    2eb2:	69 f5       	brne	.+90     	; 0x2f0e <vfprintf+0x232>
    2eb4:	f7 fe       	sbrs	r15, 7
    2eb6:	08 c0       	rjmp	.+16     	; 0x2ec8 <vfprintf+0x1ec>
    2eb8:	f5 01       	movw	r30, r10
    2eba:	20 81       	ld	r18, Z
    2ebc:	31 81       	ldd	r19, Z+1	; 0x01
    2ebe:	42 81       	ldd	r20, Z+2	; 0x02
    2ec0:	53 81       	ldd	r21, Z+3	; 0x03
    2ec2:	84 e0       	ldi	r24, 0x04	; 4
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0a c0       	rjmp	.+20     	; 0x2edc <vfprintf+0x200>
    2ec8:	f5 01       	movw	r30, r10
    2eca:	80 81       	ld	r24, Z
    2ecc:	91 81       	ldd	r25, Z+1	; 0x01
    2ece:	9c 01       	movw	r18, r24
    2ed0:	44 27       	eor	r20, r20
    2ed2:	37 fd       	sbrc	r19, 7
    2ed4:	40 95       	com	r20
    2ed6:	54 2f       	mov	r21, r20
    2ed8:	82 e0       	ldi	r24, 0x02	; 2
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a8 0e       	add	r10, r24
    2ede:	b9 1e       	adc	r11, r25
    2ee0:	9f e6       	ldi	r25, 0x6F	; 111
    2ee2:	f9 22       	and	r15, r25
    2ee4:	57 ff       	sbrs	r21, 7
    2ee6:	09 c0       	rjmp	.+18     	; 0x2efa <vfprintf+0x21e>
    2ee8:	50 95       	com	r21
    2eea:	40 95       	com	r20
    2eec:	30 95       	com	r19
    2eee:	21 95       	neg	r18
    2ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef6:	e0 e8       	ldi	r30, 0x80	; 128
    2ef8:	fe 2a       	or	r15, r30
    2efa:	ca 01       	movw	r24, r20
    2efc:	b9 01       	movw	r22, r18
    2efe:	a1 01       	movw	r20, r2
    2f00:	2a e0       	ldi	r18, 0x0A	; 10
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	0e 94 ab 18 	call	0x3156	; 0x3156 <__ultoa_invert>
    2f08:	d8 2e       	mov	r13, r24
    2f0a:	d2 18       	sub	r13, r2
    2f0c:	40 c0       	rjmp	.+128    	; 0x2f8e <vfprintf+0x2b2>
    2f0e:	95 37       	cpi	r25, 0x75	; 117
    2f10:	29 f4       	brne	.+10     	; 0x2f1c <vfprintf+0x240>
    2f12:	1f 2d       	mov	r17, r15
    2f14:	1f 7e       	andi	r17, 0xEF	; 239
    2f16:	2a e0       	ldi	r18, 0x0A	; 10
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	1d c0       	rjmp	.+58     	; 0x2f56 <vfprintf+0x27a>
    2f1c:	1f 2d       	mov	r17, r15
    2f1e:	19 7f       	andi	r17, 0xF9	; 249
    2f20:	9f 36       	cpi	r25, 0x6F	; 111
    2f22:	61 f0       	breq	.+24     	; 0x2f3c <vfprintf+0x260>
    2f24:	90 37       	cpi	r25, 0x70	; 112
    2f26:	20 f4       	brcc	.+8      	; 0x2f30 <vfprintf+0x254>
    2f28:	98 35       	cpi	r25, 0x58	; 88
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <vfprintf+0x252>
    2f2c:	ac c0       	rjmp	.+344    	; 0x3086 <vfprintf+0x3aa>
    2f2e:	0f c0       	rjmp	.+30     	; 0x2f4e <vfprintf+0x272>
    2f30:	90 37       	cpi	r25, 0x70	; 112
    2f32:	39 f0       	breq	.+14     	; 0x2f42 <vfprintf+0x266>
    2f34:	98 37       	cpi	r25, 0x78	; 120
    2f36:	09 f0       	breq	.+2      	; 0x2f3a <vfprintf+0x25e>
    2f38:	a6 c0       	rjmp	.+332    	; 0x3086 <vfprintf+0x3aa>
    2f3a:	04 c0       	rjmp	.+8      	; 0x2f44 <vfprintf+0x268>
    2f3c:	28 e0       	ldi	r18, 0x08	; 8
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	0a c0       	rjmp	.+20     	; 0x2f56 <vfprintf+0x27a>
    2f42:	10 61       	ori	r17, 0x10	; 16
    2f44:	14 fd       	sbrc	r17, 4
    2f46:	14 60       	ori	r17, 0x04	; 4
    2f48:	20 e1       	ldi	r18, 0x10	; 16
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	04 c0       	rjmp	.+8      	; 0x2f56 <vfprintf+0x27a>
    2f4e:	14 fd       	sbrc	r17, 4
    2f50:	16 60       	ori	r17, 0x06	; 6
    2f52:	20 e1       	ldi	r18, 0x10	; 16
    2f54:	32 e0       	ldi	r19, 0x02	; 2
    2f56:	17 ff       	sbrs	r17, 7
    2f58:	08 c0       	rjmp	.+16     	; 0x2f6a <vfprintf+0x28e>
    2f5a:	f5 01       	movw	r30, r10
    2f5c:	60 81       	ld	r22, Z
    2f5e:	71 81       	ldd	r23, Z+1	; 0x01
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	44 e0       	ldi	r20, 0x04	; 4
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	08 c0       	rjmp	.+16     	; 0x2f7a <vfprintf+0x29e>
    2f6a:	f5 01       	movw	r30, r10
    2f6c:	80 81       	ld	r24, Z
    2f6e:	91 81       	ldd	r25, Z+1	; 0x01
    2f70:	bc 01       	movw	r22, r24
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	42 e0       	ldi	r20, 0x02	; 2
    2f78:	50 e0       	ldi	r21, 0x00	; 0
    2f7a:	a4 0e       	add	r10, r20
    2f7c:	b5 1e       	adc	r11, r21
    2f7e:	a1 01       	movw	r20, r2
    2f80:	0e 94 ab 18 	call	0x3156	; 0x3156 <__ultoa_invert>
    2f84:	d8 2e       	mov	r13, r24
    2f86:	d2 18       	sub	r13, r2
    2f88:	8f e7       	ldi	r24, 0x7F	; 127
    2f8a:	f8 2e       	mov	r15, r24
    2f8c:	f1 22       	and	r15, r17
    2f8e:	f6 fe       	sbrs	r15, 6
    2f90:	0b c0       	rjmp	.+22     	; 0x2fa8 <vfprintf+0x2cc>
    2f92:	5e ef       	ldi	r21, 0xFE	; 254
    2f94:	f5 22       	and	r15, r21
    2f96:	d9 14       	cp	r13, r9
    2f98:	38 f4       	brcc	.+14     	; 0x2fa8 <vfprintf+0x2cc>
    2f9a:	f4 fe       	sbrs	r15, 4
    2f9c:	07 c0       	rjmp	.+14     	; 0x2fac <vfprintf+0x2d0>
    2f9e:	f2 fc       	sbrc	r15, 2
    2fa0:	05 c0       	rjmp	.+10     	; 0x2fac <vfprintf+0x2d0>
    2fa2:	8f ee       	ldi	r24, 0xEF	; 239
    2fa4:	f8 22       	and	r15, r24
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <vfprintf+0x2d0>
    2fa8:	1d 2d       	mov	r17, r13
    2faa:	01 c0       	rjmp	.+2      	; 0x2fae <vfprintf+0x2d2>
    2fac:	19 2d       	mov	r17, r9
    2fae:	f4 fe       	sbrs	r15, 4
    2fb0:	0d c0       	rjmp	.+26     	; 0x2fcc <vfprintf+0x2f0>
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	ed 0d       	add	r30, r13
    2fb6:	f1 1d       	adc	r31, r1
    2fb8:	80 81       	ld	r24, Z
    2fba:	80 33       	cpi	r24, 0x30	; 48
    2fbc:	19 f4       	brne	.+6      	; 0x2fc4 <vfprintf+0x2e8>
    2fbe:	99 ee       	ldi	r25, 0xE9	; 233
    2fc0:	f9 22       	and	r15, r25
    2fc2:	08 c0       	rjmp	.+16     	; 0x2fd4 <vfprintf+0x2f8>
    2fc4:	1f 5f       	subi	r17, 0xFF	; 255
    2fc6:	f2 fe       	sbrs	r15, 2
    2fc8:	05 c0       	rjmp	.+10     	; 0x2fd4 <vfprintf+0x2f8>
    2fca:	03 c0       	rjmp	.+6      	; 0x2fd2 <vfprintf+0x2f6>
    2fcc:	8f 2d       	mov	r24, r15
    2fce:	86 78       	andi	r24, 0x86	; 134
    2fd0:	09 f0       	breq	.+2      	; 0x2fd4 <vfprintf+0x2f8>
    2fd2:	1f 5f       	subi	r17, 0xFF	; 255
    2fd4:	0f 2d       	mov	r16, r15
    2fd6:	f3 fc       	sbrc	r15, 3
    2fd8:	14 c0       	rjmp	.+40     	; 0x3002 <vfprintf+0x326>
    2fda:	f0 fe       	sbrs	r15, 0
    2fdc:	0f c0       	rjmp	.+30     	; 0x2ffc <vfprintf+0x320>
    2fde:	1e 15       	cp	r17, r14
    2fe0:	10 f0       	brcs	.+4      	; 0x2fe6 <vfprintf+0x30a>
    2fe2:	9d 2c       	mov	r9, r13
    2fe4:	0b c0       	rjmp	.+22     	; 0x2ffc <vfprintf+0x320>
    2fe6:	9d 2c       	mov	r9, r13
    2fe8:	9e 0c       	add	r9, r14
    2fea:	91 1a       	sub	r9, r17
    2fec:	1e 2d       	mov	r17, r14
    2fee:	06 c0       	rjmp	.+12     	; 0x2ffc <vfprintf+0x320>
    2ff0:	80 e2       	ldi	r24, 0x20	; 32
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	b3 01       	movw	r22, r6
    2ff6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    2ffa:	1f 5f       	subi	r17, 0xFF	; 255
    2ffc:	1e 15       	cp	r17, r14
    2ffe:	c0 f3       	brcs	.-16     	; 0x2ff0 <vfprintf+0x314>
    3000:	04 c0       	rjmp	.+8      	; 0x300a <vfprintf+0x32e>
    3002:	1e 15       	cp	r17, r14
    3004:	10 f4       	brcc	.+4      	; 0x300a <vfprintf+0x32e>
    3006:	e1 1a       	sub	r14, r17
    3008:	01 c0       	rjmp	.+2      	; 0x300c <vfprintf+0x330>
    300a:	ee 24       	eor	r14, r14
    300c:	04 ff       	sbrs	r16, 4
    300e:	0f c0       	rjmp	.+30     	; 0x302e <vfprintf+0x352>
    3010:	80 e3       	ldi	r24, 0x30	; 48
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	b3 01       	movw	r22, r6
    3016:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    301a:	02 ff       	sbrs	r16, 2
    301c:	1d c0       	rjmp	.+58     	; 0x3058 <vfprintf+0x37c>
    301e:	01 fd       	sbrc	r16, 1
    3020:	03 c0       	rjmp	.+6      	; 0x3028 <vfprintf+0x34c>
    3022:	88 e7       	ldi	r24, 0x78	; 120
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	0e c0       	rjmp	.+28     	; 0x3044 <vfprintf+0x368>
    3028:	88 e5       	ldi	r24, 0x58	; 88
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0b c0       	rjmp	.+22     	; 0x3044 <vfprintf+0x368>
    302e:	80 2f       	mov	r24, r16
    3030:	86 78       	andi	r24, 0x86	; 134
    3032:	91 f0       	breq	.+36     	; 0x3058 <vfprintf+0x37c>
    3034:	01 ff       	sbrs	r16, 1
    3036:	02 c0       	rjmp	.+4      	; 0x303c <vfprintf+0x360>
    3038:	8b e2       	ldi	r24, 0x2B	; 43
    303a:	01 c0       	rjmp	.+2      	; 0x303e <vfprintf+0x362>
    303c:	80 e2       	ldi	r24, 0x20	; 32
    303e:	f7 fc       	sbrc	r15, 7
    3040:	8d e2       	ldi	r24, 0x2D	; 45
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	b3 01       	movw	r22, r6
    3046:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    304a:	06 c0       	rjmp	.+12     	; 0x3058 <vfprintf+0x37c>
    304c:	80 e3       	ldi	r24, 0x30	; 48
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	b3 01       	movw	r22, r6
    3052:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    3056:	9a 94       	dec	r9
    3058:	d9 14       	cp	r13, r9
    305a:	c0 f3       	brcs	.-16     	; 0x304c <vfprintf+0x370>
    305c:	da 94       	dec	r13
    305e:	f1 01       	movw	r30, r2
    3060:	ed 0d       	add	r30, r13
    3062:	f1 1d       	adc	r31, r1
    3064:	80 81       	ld	r24, Z
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	b3 01       	movw	r22, r6
    306a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    306e:	dd 20       	and	r13, r13
    3070:	a9 f7       	brne	.-22     	; 0x305c <vfprintf+0x380>
    3072:	06 c0       	rjmp	.+12     	; 0x3080 <vfprintf+0x3a4>
    3074:	80 e2       	ldi	r24, 0x20	; 32
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	b3 01       	movw	r22, r6
    307a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    307e:	ea 94       	dec	r14
    3080:	ee 20       	and	r14, r14
    3082:	c1 f7       	brne	.-16     	; 0x3074 <vfprintf+0x398>
    3084:	43 ce       	rjmp	.-890    	; 0x2d0c <vfprintf+0x30>
    3086:	f3 01       	movw	r30, r6
    3088:	66 81       	ldd	r22, Z+6	; 0x06
    308a:	77 81       	ldd	r23, Z+7	; 0x07
    308c:	cb 01       	movw	r24, r22
    308e:	2b 96       	adiw	r28, 0x0b	; 11
    3090:	e2 e1       	ldi	r30, 0x12	; 18
    3092:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__>

00003096 <__eerd_block_m328p>:
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22

0000309a <__eerd_blraw_m328p>:
    309a:	fc 01       	movw	r30, r24
    309c:	f9 99       	sbic	0x1f, 1	; 31
    309e:	fe cf       	rjmp	.-4      	; 0x309c <__eerd_blraw_m328p+0x2>
    30a0:	06 c0       	rjmp	.+12     	; 0x30ae <__eerd_blraw_m328p+0x14>
    30a2:	f2 bd       	out	0x22, r31	; 34
    30a4:	e1 bd       	out	0x21, r30	; 33
    30a6:	f8 9a       	sbi	0x1f, 0	; 31
    30a8:	31 96       	adiw	r30, 0x01	; 1
    30aa:	00 b4       	in	r0, 0x20	; 32
    30ac:	0d 92       	st	X+, r0
    30ae:	41 50       	subi	r20, 0x01	; 1
    30b0:	50 40       	sbci	r21, 0x00	; 0
    30b2:	b8 f7       	brcc	.-18     	; 0x30a2 <__eerd_blraw_m328p+0x8>
    30b4:	08 95       	ret

000030b6 <__eewr_byte_m328p>:
    30b6:	26 2f       	mov	r18, r22

000030b8 <__eewr_r18_m328p>:
    30b8:	f9 99       	sbic	0x1f, 1	; 31
    30ba:	fe cf       	rjmp	.-4      	; 0x30b8 <__eewr_r18_m328p>
    30bc:	1f ba       	out	0x1f, r1	; 31
    30be:	92 bd       	out	0x22, r25	; 34
    30c0:	81 bd       	out	0x21, r24	; 33
    30c2:	20 bd       	out	0x20, r18	; 32
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	fa 9a       	sbi	0x1f, 2	; 31
    30ca:	f9 9a       	sbi	0x1f, 1	; 31
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	08 95       	ret

000030d2 <strnlen_P>:
    30d2:	fc 01       	movw	r30, r24
    30d4:	05 90       	lpm	r0, Z+
    30d6:	61 50       	subi	r22, 0x01	; 1
    30d8:	70 40       	sbci	r23, 0x00	; 0
    30da:	01 10       	cpse	r0, r1
    30dc:	d8 f7       	brcc	.-10     	; 0x30d4 <strnlen_P+0x2>
    30de:	80 95       	com	r24
    30e0:	90 95       	com	r25
    30e2:	8e 0f       	add	r24, r30
    30e4:	9f 1f       	adc	r25, r31
    30e6:	08 95       	ret

000030e8 <strnlen>:
    30e8:	fc 01       	movw	r30, r24
    30ea:	61 50       	subi	r22, 0x01	; 1
    30ec:	70 40       	sbci	r23, 0x00	; 0
    30ee:	01 90       	ld	r0, Z+
    30f0:	01 10       	cpse	r0, r1
    30f2:	d8 f7       	brcc	.-10     	; 0x30ea <strnlen+0x2>
    30f4:	80 95       	com	r24
    30f6:	90 95       	com	r25
    30f8:	8e 0f       	add	r24, r30
    30fa:	9f 1f       	adc	r25, r31
    30fc:	08 95       	ret

000030fe <fputc>:
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	8c 01       	movw	r16, r24
    3108:	eb 01       	movw	r28, r22
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	81 ff       	sbrs	r24, 1
    310e:	1b c0       	rjmp	.+54     	; 0x3146 <fputc+0x48>
    3110:	82 ff       	sbrs	r24, 2
    3112:	0d c0       	rjmp	.+26     	; 0x312e <fputc+0x30>
    3114:	2e 81       	ldd	r18, Y+6	; 0x06
    3116:	3f 81       	ldd	r19, Y+7	; 0x07
    3118:	8c 81       	ldd	r24, Y+4	; 0x04
    311a:	9d 81       	ldd	r25, Y+5	; 0x05
    311c:	28 17       	cp	r18, r24
    311e:	39 07       	cpc	r19, r25
    3120:	64 f4       	brge	.+24     	; 0x313a <fputc+0x3c>
    3122:	e8 81       	ld	r30, Y
    3124:	f9 81       	ldd	r31, Y+1	; 0x01
    3126:	01 93       	st	Z+, r16
    3128:	f9 83       	std	Y+1, r31	; 0x01
    312a:	e8 83       	st	Y, r30
    312c:	06 c0       	rjmp	.+12     	; 0x313a <fputc+0x3c>
    312e:	e8 85       	ldd	r30, Y+8	; 0x08
    3130:	f9 85       	ldd	r31, Y+9	; 0x09
    3132:	80 2f       	mov	r24, r16
    3134:	09 95       	icall
    3136:	89 2b       	or	r24, r25
    3138:	31 f4       	brne	.+12     	; 0x3146 <fputc+0x48>
    313a:	8e 81       	ldd	r24, Y+6	; 0x06
    313c:	9f 81       	ldd	r25, Y+7	; 0x07
    313e:	01 96       	adiw	r24, 0x01	; 1
    3140:	9f 83       	std	Y+7, r25	; 0x07
    3142:	8e 83       	std	Y+6, r24	; 0x06
    3144:	02 c0       	rjmp	.+4      	; 0x314a <fputc+0x4c>
    3146:	0f ef       	ldi	r16, 0xFF	; 255
    3148:	1f ef       	ldi	r17, 0xFF	; 255
    314a:	c8 01       	movw	r24, r16
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	1f 91       	pop	r17
    3152:	0f 91       	pop	r16
    3154:	08 95       	ret

00003156 <__ultoa_invert>:
    3156:	fa 01       	movw	r30, r20
    3158:	aa 27       	eor	r26, r26
    315a:	28 30       	cpi	r18, 0x08	; 8
    315c:	51 f1       	breq	.+84     	; 0x31b2 <__ultoa_invert+0x5c>
    315e:	20 31       	cpi	r18, 0x10	; 16
    3160:	81 f1       	breq	.+96     	; 0x31c2 <__ultoa_invert+0x6c>
    3162:	e8 94       	clt
    3164:	6f 93       	push	r22
    3166:	6e 7f       	andi	r22, 0xFE	; 254
    3168:	6e 5f       	subi	r22, 0xFE	; 254
    316a:	7f 4f       	sbci	r23, 0xFF	; 255
    316c:	8f 4f       	sbci	r24, 0xFF	; 255
    316e:	9f 4f       	sbci	r25, 0xFF	; 255
    3170:	af 4f       	sbci	r26, 0xFF	; 255
    3172:	b1 e0       	ldi	r27, 0x01	; 1
    3174:	3e d0       	rcall	.+124    	; 0x31f2 <__ultoa_invert+0x9c>
    3176:	b4 e0       	ldi	r27, 0x04	; 4
    3178:	3c d0       	rcall	.+120    	; 0x31f2 <__ultoa_invert+0x9c>
    317a:	67 0f       	add	r22, r23
    317c:	78 1f       	adc	r23, r24
    317e:	89 1f       	adc	r24, r25
    3180:	9a 1f       	adc	r25, r26
    3182:	a1 1d       	adc	r26, r1
    3184:	68 0f       	add	r22, r24
    3186:	79 1f       	adc	r23, r25
    3188:	8a 1f       	adc	r24, r26
    318a:	91 1d       	adc	r25, r1
    318c:	a1 1d       	adc	r26, r1
    318e:	6a 0f       	add	r22, r26
    3190:	71 1d       	adc	r23, r1
    3192:	81 1d       	adc	r24, r1
    3194:	91 1d       	adc	r25, r1
    3196:	a1 1d       	adc	r26, r1
    3198:	20 d0       	rcall	.+64     	; 0x31da <__ultoa_invert+0x84>
    319a:	09 f4       	brne	.+2      	; 0x319e <__ultoa_invert+0x48>
    319c:	68 94       	set
    319e:	3f 91       	pop	r19
    31a0:	2a e0       	ldi	r18, 0x0A	; 10
    31a2:	26 9f       	mul	r18, r22
    31a4:	11 24       	eor	r1, r1
    31a6:	30 19       	sub	r19, r0
    31a8:	30 5d       	subi	r19, 0xD0	; 208
    31aa:	31 93       	st	Z+, r19
    31ac:	de f6       	brtc	.-74     	; 0x3164 <__ultoa_invert+0xe>
    31ae:	cf 01       	movw	r24, r30
    31b0:	08 95       	ret
    31b2:	46 2f       	mov	r20, r22
    31b4:	47 70       	andi	r20, 0x07	; 7
    31b6:	40 5d       	subi	r20, 0xD0	; 208
    31b8:	41 93       	st	Z+, r20
    31ba:	b3 e0       	ldi	r27, 0x03	; 3
    31bc:	0f d0       	rcall	.+30     	; 0x31dc <__ultoa_invert+0x86>
    31be:	c9 f7       	brne	.-14     	; 0x31b2 <__ultoa_invert+0x5c>
    31c0:	f6 cf       	rjmp	.-20     	; 0x31ae <__ultoa_invert+0x58>
    31c2:	46 2f       	mov	r20, r22
    31c4:	4f 70       	andi	r20, 0x0F	; 15
    31c6:	40 5d       	subi	r20, 0xD0	; 208
    31c8:	4a 33       	cpi	r20, 0x3A	; 58
    31ca:	18 f0       	brcs	.+6      	; 0x31d2 <__ultoa_invert+0x7c>
    31cc:	49 5d       	subi	r20, 0xD9	; 217
    31ce:	31 fd       	sbrc	r19, 1
    31d0:	40 52       	subi	r20, 0x20	; 32
    31d2:	41 93       	st	Z+, r20
    31d4:	02 d0       	rcall	.+4      	; 0x31da <__ultoa_invert+0x84>
    31d6:	a9 f7       	brne	.-22     	; 0x31c2 <__ultoa_invert+0x6c>
    31d8:	ea cf       	rjmp	.-44     	; 0x31ae <__ultoa_invert+0x58>
    31da:	b4 e0       	ldi	r27, 0x04	; 4
    31dc:	a6 95       	lsr	r26
    31de:	97 95       	ror	r25
    31e0:	87 95       	ror	r24
    31e2:	77 95       	ror	r23
    31e4:	67 95       	ror	r22
    31e6:	ba 95       	dec	r27
    31e8:	c9 f7       	brne	.-14     	; 0x31dc <__ultoa_invert+0x86>
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	61 05       	cpc	r22, r1
    31ee:	71 05       	cpc	r23, r1
    31f0:	08 95       	ret
    31f2:	9b 01       	movw	r18, r22
    31f4:	ac 01       	movw	r20, r24
    31f6:	0a 2e       	mov	r0, r26
    31f8:	06 94       	lsr	r0
    31fa:	57 95       	ror	r21
    31fc:	47 95       	ror	r20
    31fe:	37 95       	ror	r19
    3200:	27 95       	ror	r18
    3202:	ba 95       	dec	r27
    3204:	c9 f7       	brne	.-14     	; 0x31f8 <__ultoa_invert+0xa2>
    3206:	62 0f       	add	r22, r18
    3208:	73 1f       	adc	r23, r19
    320a:	84 1f       	adc	r24, r20
    320c:	95 1f       	adc	r25, r21
    320e:	a0 1d       	adc	r26, r0
    3210:	08 95       	ret

00003212 <__prologue_saves__>:
    3212:	2f 92       	push	r2
    3214:	3f 92       	push	r3
    3216:	4f 92       	push	r4
    3218:	5f 92       	push	r5
    321a:	6f 92       	push	r6
    321c:	7f 92       	push	r7
    321e:	8f 92       	push	r8
    3220:	9f 92       	push	r9
    3222:	af 92       	push	r10
    3224:	bf 92       	push	r11
    3226:	cf 92       	push	r12
    3228:	df 92       	push	r13
    322a:	ef 92       	push	r14
    322c:	ff 92       	push	r15
    322e:	0f 93       	push	r16
    3230:	1f 93       	push	r17
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	ca 1b       	sub	r28, r26
    323c:	db 0b       	sbc	r29, r27
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	09 94       	ijmp

0000324a <__epilogue_restores__>:
    324a:	2a 88       	ldd	r2, Y+18	; 0x12
    324c:	39 88       	ldd	r3, Y+17	; 0x11
    324e:	48 88       	ldd	r4, Y+16	; 0x10
    3250:	5f 84       	ldd	r5, Y+15	; 0x0f
    3252:	6e 84       	ldd	r6, Y+14	; 0x0e
    3254:	7d 84       	ldd	r7, Y+13	; 0x0d
    3256:	8c 84       	ldd	r8, Y+12	; 0x0c
    3258:	9b 84       	ldd	r9, Y+11	; 0x0b
    325a:	aa 84       	ldd	r10, Y+10	; 0x0a
    325c:	b9 84       	ldd	r11, Y+9	; 0x09
    325e:	c8 84       	ldd	r12, Y+8	; 0x08
    3260:	df 80       	ldd	r13, Y+7	; 0x07
    3262:	ee 80       	ldd	r14, Y+6	; 0x06
    3264:	fd 80       	ldd	r15, Y+5	; 0x05
    3266:	0c 81       	ldd	r16, Y+4	; 0x04
    3268:	1b 81       	ldd	r17, Y+3	; 0x03
    326a:	aa 81       	ldd	r26, Y+2	; 0x02
    326c:	b9 81       	ldd	r27, Y+1	; 0x01
    326e:	ce 0f       	add	r28, r30
    3270:	d1 1d       	adc	r29, r1
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	ed 01       	movw	r28, r26
    327e:	08 95       	ret

00003280 <_exit>:
    3280:	f8 94       	cli

00003282 <__stop_program>:
    3282:	ff cf       	rjmp	.-2      	; 0x3282 <__stop_program>
